-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity cp_corr_pss_sss_td_pss_2_imag_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of cp_corr_pss_sss_td_pss_2_imag_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101010000000000001000011001", 
    1 => "10111011011100100011101111110010", 
    2 => "00111101100010000101111101001010", 
    3 => "00111101100000111011100000011011", 
    4 => "10111100100000010100000011011101", 
    5 => "10111101100011111100100100110110", 
    6 => "10111100101011110110000111101101", 
    7 => "00111101100100101010011000101011", 
    8 => "00111101101011001000000111010100", 
    9 => "10111011101000010000111000000010", 
    10 => "10111101101000100101010100101010", 
    11 => "10111101001001001001110000101100", 
    12 => "00111101011111000100001110110011", 
    13 => "00111101110101010010011111100101", 
    14 => "00111101100000100111000001101101", 
    15 => "00111100111100110111010101000011", 
    16 => "00111101011010001010000111100000", 
    17 => "00111101101100101101010011010100", 
    18 => "00111101010100110000011010100011", 
    19 => "10111100110010110110101001100010", 
    20 => "10111101100010100010101010010001", 
    21 => "10111101011110011010010110101001", 
    22 => "10111101001100110000111110001100", 
    23 => "10111100110100100111010111101111", 
    24 => "00111100010101011110110100000111", 
    25 => "00111101010001110100011001000101", 
    26 => "00111100101001110010101001111100", 
    27 => "10111101100001100011111010001110", 
    28 => "10111101111000111010011111011011", 
    29 => "10111101010100001010111111100110", 
    30 => "00111101010011010100001000111110", 
    31 => "00111101101000011000100100110111", 
    32 => "00111100100101101100101001000111", 
    33 => "10111101010100100101100110011111", 
    34 => "10111101100101100010011110111111", 
    35 => "10111101011111010101100110010010", 
    36 => "10111101000101101011001100110101", 
    37 => "00111100001110000000101010011110", 
    38 => "00111101100001000001100100011010", 
    39 => "00111101011100011101011100010011", 
    40 => "10111100110101010011111011110111", 
    41 => "10111101110111101011110110010000", 
    42 => "10111101110010001011000000001000", 
    43 => "10111100101001011101101011110000", 
    44 => "00111100011101000110001000111101", 
    45 => "10111101000000110110110010011100", 
    46 => "10111101101011010011010000010110", 
    47 => "10111101100100011101100110110010", 
    48 => "10111100110010001010000101011010", 
    49 => "10111100011101100010101101101011", 
    50 => "10111101000111111000010011001011", 
    51 => "10111101000001010101000100001101", 
    52 => "00111100110000010100000111101010", 
    53 => "00111101101000011000101001000100", 
    54 => "00111101101110101100101111001001", 
    55 => "00111101100101111001011000111010", 
    56 => "00111101010010101111000111001100", 
    57 => "00111100000000100111110111110100", 
    58 => "10111101010110000100011111110101", 
    59 => "10111101101100010011100010111101", 
    60 => "10111101010001001001111011001011", 
    61 => "00111101000010111101101010010100", 
    62 => "00111101101011000000001101111001", 
    63 => "00111101100111010011000000100111", 
    64 => "00111101011111100010100000100100", 
    65 => "00111101100111010011000000100111", 
    66 => "00111101101011000000001101111001", 
    67 => "00111101000010111101101010010100", 
    68 => "10111101010001001001111011001011", 
    69 => "10111101101100010011100010111101", 
    70 => "10111101010110000100011111110101", 
    71 => "00111100000000100111110111110100", 
    72 => "00111101010010101111000111001100", 
    73 => "00111101100101111001011000111010", 
    74 => "00111101101110101100101111001001", 
    75 => "00111101101000011000101001000100", 
    76 => "00111100110000010100000111101010", 
    77 => "10111101000001010101000100001101", 
    78 => "10111101000111111000010011001011", 
    79 => "10111100011101100010101101101011", 
    80 => "10111100110010001010000101011010", 
    81 => "10111101100100011101100110110010", 
    82 => "10111101101011010011010000010110", 
    83 => "10111101000000110110110010011100", 
    84 => "00111100011101000110001000111101", 
    85 => "10111100101001011101101011110000", 
    86 => "10111101110010001011000000001000", 
    87 => "10111101110111101011110110010000", 
    88 => "10111100110101010011111011110111", 
    89 => "00111101011100011101011100010011", 
    90 => "00111101100001000001100100011010", 
    91 => "00111100001110000000101010011110", 
    92 => "10111101000101101011001100110101", 
    93 => "10111101011111010101100110010010", 
    94 => "10111101100101100010011110111111", 
    95 => "10111101010100100101100110011111", 
    96 => "00111100100101101100101001000111", 
    97 => "00111101101000011000100100110111", 
    98 => "00111101010011010100001000111110", 
    99 => "10111101010100001010111111100110", 
    100 => "10111101111000111010011111011011", 
    101 => "10111101100001100011111010001110", 
    102 => "00111100101001110010101001111100", 
    103 => "00111101010001110100011001000101", 
    104 => "00111100010101011110110100000111", 
    105 => "10111100110100100111010111101111", 
    106 => "10111101001100110000111110001100", 
    107 => "10111101011110011010010110101001", 
    108 => "10111101100010100010101010010001", 
    109 => "10111100110010110110101001100010", 
    110 => "00111101010100110000011010100011", 
    111 => "00111101101100101101010011010100", 
    112 => "00111101011010001010000111100000", 
    113 => "00111100111100110111010101000011", 
    114 => "00111101100000100111000001101101", 
    115 => "00111101110101010010011111100101", 
    116 => "00111101011111000100001110110011", 
    117 => "10111101001001001001110000101100", 
    118 => "10111101101000100101010100101010", 
    119 => "10111011101000010000111000000010", 
    120 => "00111101101011001000000111010100", 
    121 => "00111101100100101010011000101011", 
    122 => "10111100101011110110000111101101", 
    123 => "10111101100011111100100100110110", 
    124 => "10111100100000010100000011011101", 
    125 => "00111101100000111011100000011011", 
    126 => "00111101100010000101111101001010", 
    127 => "10111011011100100011101111110010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity cp_corr_pss_sss_td_pss_2_imag is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of cp_corr_pss_sss_td_pss_2_imag is
    component cp_corr_pss_sss_td_pss_2_imag_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    cp_corr_pss_sss_td_pss_2_imag_rom_U :  component cp_corr_pss_sss_td_pss_2_imag_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


