-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cp_corr_pss_sss is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    IN_R_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    IN_R_TVALID : IN STD_LOGIC;
    IN_R_TREADY : OUT STD_LOGIC;
    IN_R_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    IN_R_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    IN_R_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    IN_I_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    IN_I_TVALID : IN STD_LOGIC;
    IN_I_TREADY : OUT STD_LOGIC;
    IN_I_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    IN_I_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    IN_I_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_V_TDATA : OUT STD_LOGIC_VECTOR (95 downto 0);
    out_V_TVALID : OUT STD_LOGIC;
    out_V_TREADY : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of cp_corr_pss_sss is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cp_corr_pss_sss_cp_corr_pss_sss,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=3.300000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.291000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=5194,HLS_SYN_LUT=6938,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (52 downto 0) := "00000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (52 downto 0) := "00000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (52 downto 0) := "00000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (52 downto 0) := "00000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (52 downto 0) := "00000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (52 downto 0) := "00000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (52 downto 0) := "00001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (52 downto 0) := "00010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (52 downto 0) := "00100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (52 downto 0) := "01000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (52 downto 0) := "10000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal td_pss_0_real_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal td_pss_0_real_ce0 : STD_LOGIC;
    signal td_pss_0_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal td_pss_1_real_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal td_pss_1_real_ce0 : STD_LOGIC;
    signal td_pss_1_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal td_pss_2_real_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal td_pss_2_real_ce0 : STD_LOGIC;
    signal td_pss_2_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal td_pss_0_imag_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal td_pss_0_imag_ce0 : STD_LOGIC;
    signal td_pss_0_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal td_pss_1_imag_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal td_pss_1_imag_ce0 : STD_LOGIC;
    signal td_pss_1_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal td_pss_2_imag_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal td_pss_2_imag_ce0 : STD_LOGIC;
    signal td_pss_2_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal IN_R_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln658_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal IN_I_TDATA_blk_n : STD_LOGIC;
    signal out_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal j_reg_262 : STD_LOGIC_VECTOR (7 downto 0);
    signal acc_2_i_reg_273 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_1_i_reg_285 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_0_r_reg_297 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_1_r_reg_309 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_2_r_reg_321 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_0_i_reg_333 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_357_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_411 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter9 : STD_LOGIC := '0';
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_state11_pp1_stage0_iter6 : BOOLEAN;
    signal ap_block_state12_pp1_stage0_iter7 : BOOLEAN;
    signal ap_block_state13_pp1_stage0_iter8 : BOOLEAN;
    signal ap_block_state14_pp1_stage0_iter9 : BOOLEAN;
    signal ap_block_state15_pp1_stage0_iter10 : BOOLEAN;
    signal ap_block_state16_pp1_stage0_iter11 : BOOLEAN;
    signal ap_block_state17_pp1_stage0_iter12 : BOOLEAN;
    signal ap_block_state18_pp1_stage0_iter13 : BOOLEAN;
    signal ap_block_state19_pp1_stage0_iter14 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln663_reg_654 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln663_reg_654_pp1_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_fu_361_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_416 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_365_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_421 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_369_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_426 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_373_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_431 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_377_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_436 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln648_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln658_fu_452_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal add_ln663_fu_505_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln663_reg_643 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal icmp_ln663_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln663_reg_654_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln663_reg_654_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln663_reg_654_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln663_reg_654_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln663_reg_654_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln663_reg_654_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln663_reg_654_pp1_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln663_reg_654_pp1_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln663_reg_654_pp1_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln663_reg_654_pp1_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln663_reg_654_pp1_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln663_reg_654_pp1_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal IN_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal IN_real_load_reg_698 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal td_pss_0_real_load_reg_705 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln665_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln665_reg_710 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln665_reg_710_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln665_reg_710_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln665_reg_710_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln665_reg_710_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln665_reg_710_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln665_reg_710_pp1_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln665_reg_710_pp1_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln665_reg_710_pp1_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal td_pss_1_real_load_reg_715 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln666_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln666_reg_720 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln666_reg_720_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln666_reg_720_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln666_reg_720_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln666_reg_720_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln666_reg_720_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln666_reg_720_pp1_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln666_reg_720_pp1_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln666_reg_720_pp1_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal td_pss_2_real_load_reg_725 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln667_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln667_reg_730 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln667_reg_730_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln667_reg_730_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln667_reg_730_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln667_reg_730_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln667_reg_730_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln667_reg_730_pp1_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln667_reg_730_pp1_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln667_reg_730_pp1_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal IN_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal IN_imag_load_reg_735 : STD_LOGIC_VECTOR (31 downto 0);
    signal td_pss_0_imag_load_reg_742 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln669_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln669_reg_747 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln669_reg_747_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln669_reg_747_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln669_reg_747_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln669_reg_747_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln669_reg_747_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln669_reg_747_pp1_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln669_reg_747_pp1_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln669_reg_747_pp1_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal td_pss_1_imag_load_reg_752 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln670_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln670_reg_757 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln670_reg_757_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln670_reg_757_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln670_reg_757_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln670_reg_757_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln670_reg_757_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln670_reg_757_pp1_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln670_reg_757_pp1_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln670_reg_757_pp1_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal td_pss_2_imag_load_reg_762 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln671_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln671_reg_767 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln671_reg_767_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln671_reg_767_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln671_reg_767_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln671_reg_767_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln671_reg_767_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln671_reg_767_pp1_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln671_reg_767_pp1_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln671_reg_767_pp1_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_559_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter14 : STD_LOGIC := '0';
    signal grp_fu_566_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_573_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_580_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_587_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_594_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_345_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_x_assign_reg_802 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal grp_fu_349_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_x_assign_1_reg_807 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_353_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_x_assign_2_reg_812 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter13 : STD_LOGIC := '0';
    signal IN_real_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal IN_real_ce0 : STD_LOGIC;
    signal IN_real_we0 : STD_LOGIC;
    signal IN_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal IN_imag_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal IN_imag_ce0 : STD_LOGIC;
    signal IN_imag_we0 : STD_LOGIC;
    signal IN_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_251 : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_out_V_U_apdone_blk : STD_LOGIC;
    signal ap_phi_mux_j_phi_fu_266_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal i_cast_fu_464_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_cast_fu_517_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal run_fu_92 : STD_LOGIC_VECTOR (31 downto 0);
    signal run_2_fu_492_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_fu_357_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_357_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_fu_361_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_361_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_365_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_365_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_369_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_369_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_373_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_373_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_377_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_377_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal grp_fu_393_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_398_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_403_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln174_2_fu_609_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln174_1_fu_605_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln174_fu_601_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_393_ce : STD_LOGIC;
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal grp_fu_398_ce : STD_LOGIC;
    signal grp_fu_403_ce : STD_LOGIC;
    signal grp_fu_559_in_valid : STD_LOGIC;
    signal grp_fu_566_in_valid : STD_LOGIC;
    signal grp_fu_573_in_valid : STD_LOGIC;
    signal grp_fu_580_in_valid : STD_LOGIC;
    signal grp_fu_587_in_valid : STD_LOGIC;
    signal grp_fu_594_in_valid : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (52 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal regslice_both_IN_R_V_data_V_U_apdone_blk : STD_LOGIC;
    signal IN_R_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal IN_R_TVALID_int_regslice : STD_LOGIC;
    signal IN_R_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_IN_R_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_IN_R_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal IN_R_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_IN_R_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_IN_R_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_IN_R_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal IN_R_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_IN_R_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_IN_R_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_IN_R_V_last_V_U_apdone_blk : STD_LOGIC;
    signal IN_R_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_IN_R_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_IN_R_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_IN_I_V_data_V_U_apdone_blk : STD_LOGIC;
    signal IN_I_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal IN_I_TVALID_int_regslice : STD_LOGIC;
    signal IN_I_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_IN_I_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_IN_I_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal IN_I_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_IN_I_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_IN_I_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_IN_I_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal IN_I_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_IN_I_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_IN_I_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_IN_I_V_last_V_U_apdone_blk : STD_LOGIC;
    signal IN_I_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_IN_I_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_IN_I_V_last_V_U_ack_in : STD_LOGIC;
    signal out_V_TDATA_int_regslice : STD_LOGIC_VECTOR (95 downto 0);
    signal out_V_TVALID_int_regslice : STD_LOGIC;
    signal out_V_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_out_V_U_vld_out : STD_LOGIC;
    signal grp_fu_559_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_566_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_573_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_580_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_587_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_594_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component cp_corr_pss_sss_fadd_32ns_32ns_32_11_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cp_corr_pss_sss_fmul_32ns_32ns_32_8_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cp_corr_pss_sss_fsqrt_32ns_32ns_32_28_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cp_corr_pss_sss_facc_32ns_32ns_1ns_32_5_no_dsp_1 IS
    generic (
        DWIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        ce : IN STD_LOGIC;
        in_data : IN STD_LOGIC_VECTOR (31 downto 0);
        in_last : IN STD_LOGIC_VECTOR (0 downto 0);
        in_valid : IN STD_LOGIC;
        out_data : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cp_corr_pss_sss_td_pss_0_real IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cp_corr_pss_sss_td_pss_1_real IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cp_corr_pss_sss_td_pss_0_imag IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cp_corr_pss_sss_td_pss_1_imag IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cp_corr_pss_sss_td_pss_2_imag IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cp_corr_pss_sss_IN_real IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cp_corr_pss_sss_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component cp_corr_pss_sss_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    td_pss_0_real_U : component cp_corr_pss_sss_td_pss_0_real
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => td_pss_0_real_address0,
        ce0 => td_pss_0_real_ce0,
        q0 => td_pss_0_real_q0);

    td_pss_1_real_U : component cp_corr_pss_sss_td_pss_1_real
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => td_pss_1_real_address0,
        ce0 => td_pss_1_real_ce0,
        q0 => td_pss_1_real_q0);

    td_pss_2_real_U : component cp_corr_pss_sss_td_pss_1_real
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => td_pss_2_real_address0,
        ce0 => td_pss_2_real_ce0,
        q0 => td_pss_2_real_q0);

    td_pss_0_imag_U : component cp_corr_pss_sss_td_pss_0_imag
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => td_pss_0_imag_address0,
        ce0 => td_pss_0_imag_ce0,
        q0 => td_pss_0_imag_q0);

    td_pss_1_imag_U : component cp_corr_pss_sss_td_pss_1_imag
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => td_pss_1_imag_address0,
        ce0 => td_pss_1_imag_ce0,
        q0 => td_pss_1_imag_q0);

    td_pss_2_imag_U : component cp_corr_pss_sss_td_pss_2_imag
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => td_pss_2_imag_address0,
        ce0 => td_pss_2_imag_ce0,
        q0 => td_pss_2_imag_q0);

    control_s_axi_U : component cp_corr_pss_sss_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    IN_real_U : component cp_corr_pss_sss_IN_real
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => IN_real_address0,
        ce0 => IN_real_ce0,
        we0 => IN_real_we0,
        d0 => IN_real_d0,
        q0 => IN_real_q0);

    IN_imag_U : component cp_corr_pss_sss_IN_real
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => IN_imag_address0,
        ce0 => IN_imag_ce0,
        we0 => IN_imag_we0,
        d0 => IN_imag_d0,
        q0 => IN_imag_q0);

    fadd_32ns_32ns_32_11_full_dsp_1_U1 : component cp_corr_pss_sss_fadd_32ns_32ns_32_11_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_411,
        din1 => reg_416,
        ce => ap_const_logic_1,
        dout => grp_fu_345_p2);

    fadd_32ns_32ns_32_11_full_dsp_1_U2 : component cp_corr_pss_sss_fadd_32ns_32ns_32_11_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_421,
        din1 => reg_426,
        ce => ap_const_logic_1,
        dout => grp_fu_349_p2);

    fadd_32ns_32ns_32_11_full_dsp_1_U3 : component cp_corr_pss_sss_fadd_32ns_32ns_32_11_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_431,
        din1 => reg_436,
        ce => ap_const_logic_1,
        dout => grp_fu_353_p2);

    fmul_32ns_32ns_32_8_max_dsp_1_U4 : component cp_corr_pss_sss_fmul_32ns_32ns_32_8_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_357_p0,
        din1 => grp_fu_357_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_357_p2);

    fmul_32ns_32ns_32_8_max_dsp_1_U5 : component cp_corr_pss_sss_fmul_32ns_32ns_32_8_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_361_p0,
        din1 => grp_fu_361_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_361_p2);

    fmul_32ns_32ns_32_8_max_dsp_1_U6 : component cp_corr_pss_sss_fmul_32ns_32ns_32_8_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_365_p0,
        din1 => grp_fu_365_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_365_p2);

    fmul_32ns_32ns_32_8_max_dsp_1_U7 : component cp_corr_pss_sss_fmul_32ns_32ns_32_8_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_369_p0,
        din1 => grp_fu_369_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_369_p2);

    fmul_32ns_32ns_32_8_max_dsp_1_U8 : component cp_corr_pss_sss_fmul_32ns_32ns_32_8_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_373_p0,
        din1 => grp_fu_373_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_373_p2);

    fmul_32ns_32ns_32_8_max_dsp_1_U9 : component cp_corr_pss_sss_fmul_32ns_32ns_32_8_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_377_p0,
        din1 => grp_fu_377_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_377_p2);

    fsqrt_32ns_32ns_32_28_no_dsp_1_U10 : component cp_corr_pss_sss_fsqrt_32ns_32ns_32_28_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 28,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv32_0,
        din1 => p_x_assign_reg_802,
        ce => grp_fu_393_ce,
        dout => grp_fu_393_p2);

    fsqrt_32ns_32ns_32_28_no_dsp_1_U11 : component cp_corr_pss_sss_fsqrt_32ns_32ns_32_28_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 28,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv32_0,
        din1 => p_x_assign_1_reg_807,
        ce => grp_fu_398_ce,
        dout => grp_fu_398_p2);

    fsqrt_32ns_32ns_32_28_no_dsp_1_U12 : component cp_corr_pss_sss_fsqrt_32ns_32ns_32_28_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 28,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv32_0,
        din1 => p_x_assign_2_reg_812,
        ce => grp_fu_403_ce,
        dout => grp_fu_403_p2);

    facc_32ns_32ns_1ns_32_5_no_dsp_1_U13 : component cp_corr_pss_sss_facc_32ns_32ns_1ns_32_5_no_dsp_1
    generic map (
        DWIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        ce => ap_const_logic_1,
        in_data => reg_411,
        in_last => icmp_ln665_reg_710_pp1_iter9_reg,
        in_valid => grp_fu_559_in_valid,
        out_data => grp_fu_559_p3);

    facc_32ns_32ns_1ns_32_5_no_dsp_1_U14 : component cp_corr_pss_sss_facc_32ns_32ns_1ns_32_5_no_dsp_1
    generic map (
        DWIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        ce => ap_const_logic_1,
        in_data => reg_416,
        in_last => icmp_ln666_reg_720_pp1_iter9_reg,
        in_valid => grp_fu_566_in_valid,
        out_data => grp_fu_566_p3);

    facc_32ns_32ns_1ns_32_5_no_dsp_1_U15 : component cp_corr_pss_sss_facc_32ns_32ns_1ns_32_5_no_dsp_1
    generic map (
        DWIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        ce => ap_const_logic_1,
        in_data => reg_421,
        in_last => icmp_ln667_reg_730_pp1_iter9_reg,
        in_valid => grp_fu_573_in_valid,
        out_data => grp_fu_573_p3);

    facc_32ns_32ns_1ns_32_5_no_dsp_1_U16 : component cp_corr_pss_sss_facc_32ns_32ns_1ns_32_5_no_dsp_1
    generic map (
        DWIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        ce => ap_const_logic_1,
        in_data => reg_426,
        in_last => icmp_ln669_reg_747_pp1_iter9_reg,
        in_valid => grp_fu_580_in_valid,
        out_data => grp_fu_580_p3);

    facc_32ns_32ns_1ns_32_5_no_dsp_1_U17 : component cp_corr_pss_sss_facc_32ns_32ns_1ns_32_5_no_dsp_1
    generic map (
        DWIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        ce => ap_const_logic_1,
        in_data => reg_431,
        in_last => icmp_ln670_reg_757_pp1_iter9_reg,
        in_valid => grp_fu_587_in_valid,
        out_data => grp_fu_587_p3);

    facc_32ns_32ns_1ns_32_5_no_dsp_1_U18 : component cp_corr_pss_sss_facc_32ns_32ns_1ns_32_5_no_dsp_1
    generic map (
        DWIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        ce => ap_const_logic_1,
        in_data => reg_436,
        in_last => icmp_ln671_reg_767_pp1_iter9_reg,
        in_valid => grp_fu_594_in_valid,
        out_data => grp_fu_594_p3);

    regslice_both_IN_R_V_data_V_U : component cp_corr_pss_sss_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => IN_R_TDATA,
        vld_in => IN_R_TVALID,
        ack_in => regslice_both_IN_R_V_data_V_U_ack_in,
        data_out => IN_R_TDATA_int_regslice,
        vld_out => IN_R_TVALID_int_regslice,
        ack_out => IN_R_TREADY_int_regslice,
        apdone_blk => regslice_both_IN_R_V_data_V_U_apdone_blk);

    regslice_both_IN_R_V_keep_V_U : component cp_corr_pss_sss_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => IN_R_TKEEP,
        vld_in => IN_R_TVALID,
        ack_in => regslice_both_IN_R_V_keep_V_U_ack_in,
        data_out => IN_R_TKEEP_int_regslice,
        vld_out => regslice_both_IN_R_V_keep_V_U_vld_out,
        ack_out => IN_R_TREADY_int_regslice,
        apdone_blk => regslice_both_IN_R_V_keep_V_U_apdone_blk);

    regslice_both_IN_R_V_strb_V_U : component cp_corr_pss_sss_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => IN_R_TSTRB,
        vld_in => IN_R_TVALID,
        ack_in => regslice_both_IN_R_V_strb_V_U_ack_in,
        data_out => IN_R_TSTRB_int_regslice,
        vld_out => regslice_both_IN_R_V_strb_V_U_vld_out,
        ack_out => IN_R_TREADY_int_regslice,
        apdone_blk => regslice_both_IN_R_V_strb_V_U_apdone_blk);

    regslice_both_IN_R_V_last_V_U : component cp_corr_pss_sss_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => IN_R_TLAST,
        vld_in => IN_R_TVALID,
        ack_in => regslice_both_IN_R_V_last_V_U_ack_in,
        data_out => IN_R_TLAST_int_regslice,
        vld_out => regslice_both_IN_R_V_last_V_U_vld_out,
        ack_out => IN_R_TREADY_int_regslice,
        apdone_blk => regslice_both_IN_R_V_last_V_U_apdone_blk);

    regslice_both_IN_I_V_data_V_U : component cp_corr_pss_sss_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => IN_I_TDATA,
        vld_in => IN_I_TVALID,
        ack_in => regslice_both_IN_I_V_data_V_U_ack_in,
        data_out => IN_I_TDATA_int_regslice,
        vld_out => IN_I_TVALID_int_regslice,
        ack_out => IN_I_TREADY_int_regslice,
        apdone_blk => regslice_both_IN_I_V_data_V_U_apdone_blk);

    regslice_both_IN_I_V_keep_V_U : component cp_corr_pss_sss_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => IN_I_TKEEP,
        vld_in => IN_I_TVALID,
        ack_in => regslice_both_IN_I_V_keep_V_U_ack_in,
        data_out => IN_I_TKEEP_int_regslice,
        vld_out => regslice_both_IN_I_V_keep_V_U_vld_out,
        ack_out => IN_I_TREADY_int_regslice,
        apdone_blk => regslice_both_IN_I_V_keep_V_U_apdone_blk);

    regslice_both_IN_I_V_strb_V_U : component cp_corr_pss_sss_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => IN_I_TSTRB,
        vld_in => IN_I_TVALID,
        ack_in => regslice_both_IN_I_V_strb_V_U_ack_in,
        data_out => IN_I_TSTRB_int_regslice,
        vld_out => regslice_both_IN_I_V_strb_V_U_vld_out,
        ack_out => IN_I_TREADY_int_regslice,
        apdone_blk => regslice_both_IN_I_V_strb_V_U_apdone_blk);

    regslice_both_IN_I_V_last_V_U : component cp_corr_pss_sss_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => IN_I_TLAST,
        vld_in => IN_I_TVALID,
        ack_in => regslice_both_IN_I_V_last_V_U_ack_in,
        data_out => IN_I_TLAST_int_regslice,
        vld_out => regslice_both_IN_I_V_last_V_U_vld_out,
        ack_out => IN_I_TREADY_int_regslice,
        apdone_blk => regslice_both_IN_I_V_last_V_U_apdone_blk);

    regslice_both_out_V_U : component cp_corr_pss_sss_regslice_both
    generic map (
        DataWidth => 96)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_V_TDATA_int_regslice,
        vld_in => out_V_TVALID_int_regslice,
        ack_in => out_V_TREADY_int_regslice,
        data_out => out_V_TDATA,
        vld_out => regslice_both_out_V_U_vld_out,
        ack_out => out_V_TREADY,
        apdone_blk => regslice_both_out_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state5);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter12 <= ap_enable_reg_pp1_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter13 <= ap_enable_reg_pp1_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter14 <= ap_enable_reg_pp1_iter13;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter14 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
                end if; 
            end if;
        end if;
    end process;


    acc_0_i_reg_333_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                acc_0_i_reg_333 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp1_iter14 = ap_const_logic_1) and (icmp_ln663_reg_654_pp1_iter13_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                acc_0_i_reg_333 <= grp_fu_580_p3;
            end if; 
        end if;
    end process;

    acc_0_r_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                acc_0_r_reg_297 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp1_iter14 = ap_const_logic_1) and (icmp_ln663_reg_654_pp1_iter13_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                acc_0_r_reg_297 <= grp_fu_559_p3;
            end if; 
        end if;
    end process;

    acc_1_i_reg_285_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                acc_1_i_reg_285 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp1_iter14 = ap_const_logic_1) and (icmp_ln663_reg_654_pp1_iter13_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                acc_1_i_reg_285 <= grp_fu_587_p3;
            end if; 
        end if;
    end process;

    acc_1_r_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                acc_1_r_reg_309 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp1_iter14 = ap_const_logic_1) and (icmp_ln663_reg_654_pp1_iter13_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                acc_1_r_reg_309 <= grp_fu_566_p3;
            end if; 
        end if;
    end process;

    acc_2_i_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                acc_2_i_reg_273 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp1_iter14 = ap_const_logic_1) and (icmp_ln663_reg_654_pp1_iter13_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                acc_2_i_reg_273 <= grp_fu_594_p3;
            end if; 
        end if;
    end process;

    acc_2_r_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                acc_2_r_reg_321 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp1_iter14 = ap_const_logic_1) and (icmp_ln663_reg_654_pp1_iter13_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                acc_2_r_reg_321 <= grp_fu_573_p3;
            end if; 
        end if;
    end process;

    i_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((regslice_both_out_V_U_apdone_blk = ap_const_logic_0) and (icmp_ln648_fu_446_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_251 <= ap_const_lv8_0;
            elsif ((not((((ap_const_logic_0 = IN_I_TVALID_int_regslice) and (icmp_ln658_fu_458_p2 = ap_const_lv1_0)) or ((ap_const_logic_0 = IN_R_TVALID_int_regslice) and (icmp_ln658_fu_458_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln658_fu_458_p2 = ap_const_lv1_0))) then 
                i_reg_251 <= add_ln658_fu_452_p2;
            end if; 
        end if;
    end process;

    j_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_reg_262 <= ap_const_lv8_0;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln663_reg_654 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                j_reg_262 <= add_ln663_reg_643;
            end if; 
        end if;
    end process;

    run_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                run_fu_92 <= ap_const_lv32_1;
            elsif ((not((((ap_const_logic_0 = IN_I_TVALID_int_regslice) and (icmp_ln658_fu_458_p2 = ap_const_lv1_0)) or ((ap_const_logic_0 = IN_R_TVALID_int_regslice) and (icmp_ln658_fu_458_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln658_fu_458_p2 = ap_const_lv1_0))) then 
                run_fu_92 <= run_2_fu_492_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln663_reg_654 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                IN_imag_load_reg_735 <= IN_imag_q0;
                IN_real_load_reg_698 <= IN_real_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                add_ln663_reg_643 <= add_ln663_fu_505_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln663_reg_654 <= icmp_ln663_fu_511_p2;
                icmp_ln663_reg_654_pp1_iter1_reg <= icmp_ln663_reg_654;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                icmp_ln663_reg_654_pp1_iter10_reg <= icmp_ln663_reg_654_pp1_iter9_reg;
                icmp_ln663_reg_654_pp1_iter11_reg <= icmp_ln663_reg_654_pp1_iter10_reg;
                icmp_ln663_reg_654_pp1_iter12_reg <= icmp_ln663_reg_654_pp1_iter11_reg;
                icmp_ln663_reg_654_pp1_iter13_reg <= icmp_ln663_reg_654_pp1_iter12_reg;
                icmp_ln663_reg_654_pp1_iter2_reg <= icmp_ln663_reg_654_pp1_iter1_reg;
                icmp_ln663_reg_654_pp1_iter3_reg <= icmp_ln663_reg_654_pp1_iter2_reg;
                icmp_ln663_reg_654_pp1_iter4_reg <= icmp_ln663_reg_654_pp1_iter3_reg;
                icmp_ln663_reg_654_pp1_iter5_reg <= icmp_ln663_reg_654_pp1_iter4_reg;
                icmp_ln663_reg_654_pp1_iter6_reg <= icmp_ln663_reg_654_pp1_iter5_reg;
                icmp_ln663_reg_654_pp1_iter7_reg <= icmp_ln663_reg_654_pp1_iter6_reg;
                icmp_ln663_reg_654_pp1_iter8_reg <= icmp_ln663_reg_654_pp1_iter7_reg;
                icmp_ln663_reg_654_pp1_iter9_reg <= icmp_ln663_reg_654_pp1_iter8_reg;
                icmp_ln665_reg_710_pp1_iter2_reg <= icmp_ln665_reg_710;
                icmp_ln665_reg_710_pp1_iter3_reg <= icmp_ln665_reg_710_pp1_iter2_reg;
                icmp_ln665_reg_710_pp1_iter4_reg <= icmp_ln665_reg_710_pp1_iter3_reg;
                icmp_ln665_reg_710_pp1_iter5_reg <= icmp_ln665_reg_710_pp1_iter4_reg;
                icmp_ln665_reg_710_pp1_iter6_reg <= icmp_ln665_reg_710_pp1_iter5_reg;
                icmp_ln665_reg_710_pp1_iter7_reg <= icmp_ln665_reg_710_pp1_iter6_reg;
                icmp_ln665_reg_710_pp1_iter8_reg <= icmp_ln665_reg_710_pp1_iter7_reg;
                icmp_ln665_reg_710_pp1_iter9_reg <= icmp_ln665_reg_710_pp1_iter8_reg;
                icmp_ln666_reg_720_pp1_iter2_reg <= icmp_ln666_reg_720;
                icmp_ln666_reg_720_pp1_iter3_reg <= icmp_ln666_reg_720_pp1_iter2_reg;
                icmp_ln666_reg_720_pp1_iter4_reg <= icmp_ln666_reg_720_pp1_iter3_reg;
                icmp_ln666_reg_720_pp1_iter5_reg <= icmp_ln666_reg_720_pp1_iter4_reg;
                icmp_ln666_reg_720_pp1_iter6_reg <= icmp_ln666_reg_720_pp1_iter5_reg;
                icmp_ln666_reg_720_pp1_iter7_reg <= icmp_ln666_reg_720_pp1_iter6_reg;
                icmp_ln666_reg_720_pp1_iter8_reg <= icmp_ln666_reg_720_pp1_iter7_reg;
                icmp_ln666_reg_720_pp1_iter9_reg <= icmp_ln666_reg_720_pp1_iter8_reg;
                icmp_ln667_reg_730_pp1_iter2_reg <= icmp_ln667_reg_730;
                icmp_ln667_reg_730_pp1_iter3_reg <= icmp_ln667_reg_730_pp1_iter2_reg;
                icmp_ln667_reg_730_pp1_iter4_reg <= icmp_ln667_reg_730_pp1_iter3_reg;
                icmp_ln667_reg_730_pp1_iter5_reg <= icmp_ln667_reg_730_pp1_iter4_reg;
                icmp_ln667_reg_730_pp1_iter6_reg <= icmp_ln667_reg_730_pp1_iter5_reg;
                icmp_ln667_reg_730_pp1_iter7_reg <= icmp_ln667_reg_730_pp1_iter6_reg;
                icmp_ln667_reg_730_pp1_iter8_reg <= icmp_ln667_reg_730_pp1_iter7_reg;
                icmp_ln667_reg_730_pp1_iter9_reg <= icmp_ln667_reg_730_pp1_iter8_reg;
                icmp_ln669_reg_747_pp1_iter2_reg <= icmp_ln669_reg_747;
                icmp_ln669_reg_747_pp1_iter3_reg <= icmp_ln669_reg_747_pp1_iter2_reg;
                icmp_ln669_reg_747_pp1_iter4_reg <= icmp_ln669_reg_747_pp1_iter3_reg;
                icmp_ln669_reg_747_pp1_iter5_reg <= icmp_ln669_reg_747_pp1_iter4_reg;
                icmp_ln669_reg_747_pp1_iter6_reg <= icmp_ln669_reg_747_pp1_iter5_reg;
                icmp_ln669_reg_747_pp1_iter7_reg <= icmp_ln669_reg_747_pp1_iter6_reg;
                icmp_ln669_reg_747_pp1_iter8_reg <= icmp_ln669_reg_747_pp1_iter7_reg;
                icmp_ln669_reg_747_pp1_iter9_reg <= icmp_ln669_reg_747_pp1_iter8_reg;
                icmp_ln670_reg_757_pp1_iter2_reg <= icmp_ln670_reg_757;
                icmp_ln670_reg_757_pp1_iter3_reg <= icmp_ln670_reg_757_pp1_iter2_reg;
                icmp_ln670_reg_757_pp1_iter4_reg <= icmp_ln670_reg_757_pp1_iter3_reg;
                icmp_ln670_reg_757_pp1_iter5_reg <= icmp_ln670_reg_757_pp1_iter4_reg;
                icmp_ln670_reg_757_pp1_iter6_reg <= icmp_ln670_reg_757_pp1_iter5_reg;
                icmp_ln670_reg_757_pp1_iter7_reg <= icmp_ln670_reg_757_pp1_iter6_reg;
                icmp_ln670_reg_757_pp1_iter8_reg <= icmp_ln670_reg_757_pp1_iter7_reg;
                icmp_ln670_reg_757_pp1_iter9_reg <= icmp_ln670_reg_757_pp1_iter8_reg;
                icmp_ln671_reg_767_pp1_iter2_reg <= icmp_ln671_reg_767;
                icmp_ln671_reg_767_pp1_iter3_reg <= icmp_ln671_reg_767_pp1_iter2_reg;
                icmp_ln671_reg_767_pp1_iter4_reg <= icmp_ln671_reg_767_pp1_iter3_reg;
                icmp_ln671_reg_767_pp1_iter5_reg <= icmp_ln671_reg_767_pp1_iter4_reg;
                icmp_ln671_reg_767_pp1_iter6_reg <= icmp_ln671_reg_767_pp1_iter5_reg;
                icmp_ln671_reg_767_pp1_iter7_reg <= icmp_ln671_reg_767_pp1_iter6_reg;
                icmp_ln671_reg_767_pp1_iter8_reg <= icmp_ln671_reg_767_pp1_iter7_reg;
                icmp_ln671_reg_767_pp1_iter9_reg <= icmp_ln671_reg_767_pp1_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln663_reg_654 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln665_reg_710 <= icmp_ln665_fu_529_p2;
                icmp_ln666_reg_720 <= icmp_ln666_fu_534_p2;
                icmp_ln667_reg_730 <= icmp_ln667_fu_539_p2;
                icmp_ln669_reg_747 <= icmp_ln669_fu_544_p2;
                icmp_ln670_reg_757 <= icmp_ln670_fu_549_p2;
                icmp_ln671_reg_767 <= icmp_ln671_fu_554_p2;
                td_pss_0_imag_load_reg_742 <= td_pss_0_imag_q0;
                td_pss_0_real_load_reg_705 <= td_pss_0_real_q0;
                td_pss_1_imag_load_reg_752 <= td_pss_1_imag_q0;
                td_pss_1_real_load_reg_715 <= td_pss_1_real_q0;
                td_pss_2_imag_load_reg_762 <= td_pss_2_imag_q0;
                td_pss_2_real_load_reg_725 <= td_pss_2_real_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                p_x_assign_1_reg_807 <= grp_fu_349_p2;
                p_x_assign_2_reg_812 <= grp_fu_353_p2;
                p_x_assign_reg_802 <= grp_fu_345_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) or ((icmp_ln663_reg_654_pp1_iter8_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter9 = ap_const_logic_1)))) then
                reg_411 <= grp_fu_357_p2;
                reg_416 <= grp_fu_361_p2;
                reg_421 <= grp_fu_365_p2;
                reg_426 <= grp_fu_369_p2;
                reg_431 <= grp_fu_373_p2;
                reg_436 <= grp_fu_377_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln658_fu_458_p2, ap_CS_fsm_state66, ap_CS_fsm_state67, icmp_ln648_fu_446_p2, ap_CS_fsm_state2, ap_enable_reg_pp1_iter0, icmp_ln663_fu_511_p2, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter14, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter13, regslice_both_out_V_U_apdone_blk, IN_R_TVALID_int_regslice, IN_I_TVALID_int_regslice, out_V_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((regslice_both_out_V_U_apdone_blk = ap_const_logic_0) and (icmp_ln648_fu_446_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((regslice_both_out_V_U_apdone_blk = ap_const_logic_0) and (icmp_ln648_fu_446_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not((((ap_const_logic_0 = IN_I_TVALID_int_regslice) and (icmp_ln658_fu_458_p2 = ap_const_lv1_0)) or ((ap_const_logic_0 = IN_R_TVALID_int_regslice) and (icmp_ln658_fu_458_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln658_fu_458_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif ((not((((ap_const_logic_0 = IN_I_TVALID_int_regslice) and (icmp_ln658_fu_458_p2 = ap_const_lv1_0)) or ((ap_const_logic_0 = IN_R_TVALID_int_regslice) and (icmp_ln658_fu_458_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln658_fu_458_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln663_fu_511_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter13 = ap_const_logic_0) and (ap_enable_reg_pp1_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter13 = ap_const_logic_0) and (ap_enable_reg_pp1_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln663_fu_511_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state66) and (out_V_TREADY_int_regslice = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state67;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when ap_ST_fsm_state67 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state67) and (out_V_TREADY_int_regslice = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state67;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    IN_I_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state3, icmp_ln658_fu_458_p2, IN_I_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln658_fu_458_p2 = ap_const_lv1_0))) then 
            IN_I_TDATA_blk_n <= IN_I_TVALID_int_regslice;
        else 
            IN_I_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    IN_I_TREADY <= regslice_both_IN_I_V_data_V_U_ack_in;

    IN_I_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state3, icmp_ln658_fu_458_p2, IN_R_TVALID_int_regslice, IN_I_TVALID_int_regslice)
    begin
        if ((not((((ap_const_logic_0 = IN_I_TVALID_int_regslice) and (icmp_ln658_fu_458_p2 = ap_const_lv1_0)) or ((ap_const_logic_0 = IN_R_TVALID_int_regslice) and (icmp_ln658_fu_458_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln658_fu_458_p2 = ap_const_lv1_0))) then 
            IN_I_TREADY_int_regslice <= ap_const_logic_1;
        else 
            IN_I_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    IN_R_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state3, icmp_ln658_fu_458_p2, IN_R_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln658_fu_458_p2 = ap_const_lv1_0))) then 
            IN_R_TDATA_blk_n <= IN_R_TVALID_int_regslice;
        else 
            IN_R_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    IN_R_TREADY <= regslice_both_IN_R_V_data_V_U_ack_in;

    IN_R_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state3, icmp_ln658_fu_458_p2, IN_R_TVALID_int_regslice, IN_I_TVALID_int_regslice)
    begin
        if ((not((((ap_const_logic_0 = IN_I_TVALID_int_regslice) and (icmp_ln658_fu_458_p2 = ap_const_lv1_0)) or ((ap_const_logic_0 = IN_R_TVALID_int_regslice) and (icmp_ln658_fu_458_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln658_fu_458_p2 = ap_const_lv1_0))) then 
            IN_R_TREADY_int_regslice <= ap_const_logic_1;
        else 
            IN_R_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    IN_imag_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0, i_cast_fu_464_p1, j_cast_fu_517_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            IN_imag_address0 <= j_cast_fu_517_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            IN_imag_address0 <= i_cast_fu_464_p1(7 - 1 downto 0);
        else 
            IN_imag_address0 <= "XXXXXXX";
        end if; 
    end process;


    IN_imag_ce0_assign_proc : process(ap_CS_fsm_state3, icmp_ln658_fu_458_p2, ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, IN_R_TVALID_int_regslice, IN_I_TVALID_int_regslice)
    begin
        if ((((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or (not((((ap_const_logic_0 = IN_I_TVALID_int_regslice) and (icmp_ln658_fu_458_p2 = ap_const_lv1_0)) or ((ap_const_logic_0 = IN_R_TVALID_int_regslice) and (icmp_ln658_fu_458_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            IN_imag_ce0 <= ap_const_logic_1;
        else 
            IN_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    IN_imag_d0 <= IN_I_TDATA_int_regslice;

    IN_imag_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln658_fu_458_p2, IN_R_TVALID_int_regslice, IN_I_TVALID_int_regslice)
    begin
        if ((not((((ap_const_logic_0 = IN_I_TVALID_int_regslice) and (icmp_ln658_fu_458_p2 = ap_const_lv1_0)) or ((ap_const_logic_0 = IN_R_TVALID_int_regslice) and (icmp_ln658_fu_458_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln658_fu_458_p2 = ap_const_lv1_0))) then 
            IN_imag_we0 <= ap_const_logic_1;
        else 
            IN_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    IN_real_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0, i_cast_fu_464_p1, j_cast_fu_517_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            IN_real_address0 <= j_cast_fu_517_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            IN_real_address0 <= i_cast_fu_464_p1(7 - 1 downto 0);
        else 
            IN_real_address0 <= "XXXXXXX";
        end if; 
    end process;


    IN_real_ce0_assign_proc : process(ap_CS_fsm_state3, icmp_ln658_fu_458_p2, ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, IN_R_TVALID_int_regslice, IN_I_TVALID_int_regslice)
    begin
        if ((((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or (not((((ap_const_logic_0 = IN_I_TVALID_int_regslice) and (icmp_ln658_fu_458_p2 = ap_const_lv1_0)) or ((ap_const_logic_0 = IN_R_TVALID_int_regslice) and (icmp_ln658_fu_458_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            IN_real_ce0 <= ap_const_logic_1;
        else 
            IN_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    IN_real_d0 <= IN_R_TDATA_int_regslice;

    IN_real_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln658_fu_458_p2, IN_R_TVALID_int_regslice, IN_I_TVALID_int_regslice)
    begin
        if ((not((((ap_const_logic_0 = IN_I_TVALID_int_regslice) and (icmp_ln658_fu_458_p2 = ap_const_lv1_0)) or ((ap_const_logic_0 = IN_R_TVALID_int_regslice) and (icmp_ln658_fu_458_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln658_fu_458_p2 = ap_const_lv1_0))) then 
            IN_real_we0 <= ap_const_logic_1;
        else 
            IN_real_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln658_fu_452_p2 <= std_logic_vector(unsigned(i_reg_251) + unsigned(ap_const_lv8_1));
    add_ln663_fu_505_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_phi_fu_266_p4) + unsigned(ap_const_lv8_1));
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(5);
    ap_CS_fsm_state21 <= ap_CS_fsm(6);
    ap_CS_fsm_state22 <= ap_CS_fsm(7);
    ap_CS_fsm_state23 <= ap_CS_fsm(8);
    ap_CS_fsm_state24 <= ap_CS_fsm(9);
    ap_CS_fsm_state25 <= ap_CS_fsm(10);
    ap_CS_fsm_state26 <= ap_CS_fsm(11);
    ap_CS_fsm_state27 <= ap_CS_fsm(12);
    ap_CS_fsm_state28 <= ap_CS_fsm(13);
    ap_CS_fsm_state29 <= ap_CS_fsm(14);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(15);
    ap_CS_fsm_state31 <= ap_CS_fsm(16);
    ap_CS_fsm_state32 <= ap_CS_fsm(17);
    ap_CS_fsm_state33 <= ap_CS_fsm(18);
    ap_CS_fsm_state34 <= ap_CS_fsm(19);
    ap_CS_fsm_state35 <= ap_CS_fsm(20);
    ap_CS_fsm_state36 <= ap_CS_fsm(21);
    ap_CS_fsm_state37 <= ap_CS_fsm(22);
    ap_CS_fsm_state38 <= ap_CS_fsm(23);
    ap_CS_fsm_state39 <= ap_CS_fsm(24);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state66 <= ap_CS_fsm(51);
    ap_CS_fsm_state67 <= ap_CS_fsm(52);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp1_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp1_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_assign_proc : process(icmp_ln658_fu_458_p2, IN_R_TVALID_int_regslice, IN_I_TVALID_int_regslice)
    begin
                ap_block_state3 <= (((ap_const_logic_0 = IN_I_TVALID_int_regslice) and (icmp_ln658_fu_458_p2 = ap_const_lv1_0)) or ((ap_const_logic_0 = IN_R_TVALID_int_regslice) and (icmp_ln658_fu_458_p2 = ap_const_lv1_0)));
    end process;

        ap_block_state5_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state5_assign_proc : process(icmp_ln663_fu_511_p2)
    begin
        if ((icmp_ln663_fu_511_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(icmp_ln648_fu_446_p2, ap_CS_fsm_state2, regslice_both_out_V_U_apdone_blk)
    begin
        if (((regslice_both_out_V_U_apdone_blk = ap_const_logic_0) and (icmp_ln648_fu_446_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter9, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter14, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5, ap_enable_reg_pp1_iter6, ap_enable_reg_pp1_iter7, ap_enable_reg_pp1_iter8, ap_enable_reg_pp1_iter10, ap_enable_reg_pp1_iter11, ap_enable_reg_pp1_iter12, ap_enable_reg_pp1_iter13)
    begin
        if (((ap_enable_reg_pp1_iter13 = ap_const_logic_0) and (ap_enable_reg_pp1_iter12 = ap_const_logic_0) and (ap_enable_reg_pp1_iter11 = ap_const_logic_0) and (ap_enable_reg_pp1_iter10 = ap_const_logic_0) and (ap_enable_reg_pp1_iter8 = ap_const_logic_0) and (ap_enable_reg_pp1_iter7 = ap_const_logic_0) and (ap_enable_reg_pp1_iter6 = ap_const_logic_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter14 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter9 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j_phi_fu_266_p4_assign_proc : process(j_reg_262, icmp_ln663_reg_654, add_ln663_reg_643, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln663_reg_654 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_j_phi_fu_266_p4 <= add_ln663_reg_643;
        else 
            ap_phi_mux_j_phi_fu_266_p4 <= j_reg_262;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln648_fu_446_p2, ap_CS_fsm_state2, regslice_both_out_V_U_apdone_blk)
    begin
        if (((regslice_both_out_V_U_apdone_blk = ap_const_logic_0) and (icmp_ln648_fu_446_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln174_1_fu_605_p1 <= grp_fu_398_p2;
    bitcast_ln174_2_fu_609_p1 <= grp_fu_403_p2;
    bitcast_ln174_fu_601_p1 <= grp_fu_393_p2;

    grp_fu_357_p0_assign_proc : process(acc_0_r_reg_297, IN_real_load_reg_698, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_357_p0 <= acc_0_r_reg_297;
        elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            grp_fu_357_p0 <= IN_real_load_reg_698;
        else 
            grp_fu_357_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_357_p1_assign_proc : process(acc_0_r_reg_297, td_pss_0_real_load_reg_705, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_357_p1 <= acc_0_r_reg_297;
        elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            grp_fu_357_p1 <= td_pss_0_real_load_reg_705;
        else 
            grp_fu_357_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_361_p0_assign_proc : process(acc_0_i_reg_333, IN_real_load_reg_698, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_361_p0 <= acc_0_i_reg_333;
        elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            grp_fu_361_p0 <= IN_real_load_reg_698;
        else 
            grp_fu_361_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_361_p1_assign_proc : process(acc_0_i_reg_333, td_pss_1_real_load_reg_715, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_361_p1 <= acc_0_i_reg_333;
        elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            grp_fu_361_p1 <= td_pss_1_real_load_reg_715;
        else 
            grp_fu_361_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_365_p0_assign_proc : process(acc_1_r_reg_309, IN_real_load_reg_698, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_365_p0 <= acc_1_r_reg_309;
        elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            grp_fu_365_p0 <= IN_real_load_reg_698;
        else 
            grp_fu_365_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_365_p1_assign_proc : process(acc_1_r_reg_309, td_pss_2_real_load_reg_725, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_365_p1 <= acc_1_r_reg_309;
        elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            grp_fu_365_p1 <= td_pss_2_real_load_reg_725;
        else 
            grp_fu_365_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_369_p0_assign_proc : process(acc_1_i_reg_285, IN_imag_load_reg_735, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_369_p0 <= acc_1_i_reg_285;
        elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            grp_fu_369_p0 <= IN_imag_load_reg_735;
        else 
            grp_fu_369_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_369_p1_assign_proc : process(acc_1_i_reg_285, td_pss_0_imag_load_reg_742, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_369_p1 <= acc_1_i_reg_285;
        elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            grp_fu_369_p1 <= td_pss_0_imag_load_reg_742;
        else 
            grp_fu_369_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_373_p0_assign_proc : process(acc_2_r_reg_321, IN_imag_load_reg_735, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_373_p0 <= acc_2_r_reg_321;
        elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            grp_fu_373_p0 <= IN_imag_load_reg_735;
        else 
            grp_fu_373_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_373_p1_assign_proc : process(acc_2_r_reg_321, td_pss_1_imag_load_reg_752, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_373_p1 <= acc_2_r_reg_321;
        elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            grp_fu_373_p1 <= td_pss_1_imag_load_reg_752;
        else 
            grp_fu_373_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_377_p0_assign_proc : process(acc_2_i_reg_273, IN_imag_load_reg_735, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_377_p0 <= acc_2_i_reg_273;
        elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            grp_fu_377_p0 <= IN_imag_load_reg_735;
        else 
            grp_fu_377_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_377_p1_assign_proc : process(acc_2_i_reg_273, td_pss_2_imag_load_reg_762, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_377_p1 <= acc_2_i_reg_273;
        elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            grp_fu_377_p1 <= td_pss_2_imag_load_reg_762;
        else 
            grp_fu_377_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_393_ce_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state27, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_CS_fsm_state38, ap_CS_fsm_state4, ap_CS_fsm_state28, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, out_V_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or ((ap_const_logic_1 = ap_CS_fsm_state66) and (out_V_TREADY_int_regslice = ap_const_logic_0)))) then 
            grp_fu_393_ce <= ap_const_logic_0;
        else 
            grp_fu_393_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_398_ce_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state27, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_CS_fsm_state38, ap_CS_fsm_state4, ap_CS_fsm_state28, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, out_V_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or ((ap_const_logic_1 = ap_CS_fsm_state66) and (out_V_TREADY_int_regslice = ap_const_logic_0)))) then 
            grp_fu_398_ce <= ap_const_logic_0;
        else 
            grp_fu_398_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_403_ce_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state27, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_CS_fsm_state38, ap_CS_fsm_state4, ap_CS_fsm_state28, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, out_V_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or ((ap_const_logic_1 = ap_CS_fsm_state66) and (out_V_TREADY_int_regslice = ap_const_logic_0)))) then 
            grp_fu_403_ce <= ap_const_logic_0;
        else 
            grp_fu_403_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_559_in_valid_assign_proc : process(icmp_ln663_reg_654_pp1_iter9_reg, ap_enable_reg_pp1_iter10, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter10 = ap_const_logic_1) and (icmp_ln663_reg_654_pp1_iter9_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            grp_fu_559_in_valid <= ap_const_logic_1;
        else 
            grp_fu_559_in_valid <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_566_in_valid_assign_proc : process(icmp_ln663_reg_654_pp1_iter9_reg, ap_enable_reg_pp1_iter10, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter10 = ap_const_logic_1) and (icmp_ln663_reg_654_pp1_iter9_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            grp_fu_566_in_valid <= ap_const_logic_1;
        else 
            grp_fu_566_in_valid <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_573_in_valid_assign_proc : process(icmp_ln663_reg_654_pp1_iter9_reg, ap_enable_reg_pp1_iter10, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter10 = ap_const_logic_1) and (icmp_ln663_reg_654_pp1_iter9_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            grp_fu_573_in_valid <= ap_const_logic_1;
        else 
            grp_fu_573_in_valid <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_580_in_valid_assign_proc : process(icmp_ln663_reg_654_pp1_iter9_reg, ap_enable_reg_pp1_iter10, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter10 = ap_const_logic_1) and (icmp_ln663_reg_654_pp1_iter9_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            grp_fu_580_in_valid <= ap_const_logic_1;
        else 
            grp_fu_580_in_valid <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_587_in_valid_assign_proc : process(icmp_ln663_reg_654_pp1_iter9_reg, ap_enable_reg_pp1_iter10, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter10 = ap_const_logic_1) and (icmp_ln663_reg_654_pp1_iter9_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            grp_fu_587_in_valid <= ap_const_logic_1;
        else 
            grp_fu_587_in_valid <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_594_in_valid_assign_proc : process(icmp_ln663_reg_654_pp1_iter9_reg, ap_enable_reg_pp1_iter10, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter10 = ap_const_logic_1) and (icmp_ln663_reg_654_pp1_iter9_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            grp_fu_594_in_valid <= ap_const_logic_1;
        else 
            grp_fu_594_in_valid <= ap_const_logic_0;
        end if; 
    end process;

    i_cast_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_251),64));
    icmp_ln648_fu_446_p2 <= "1" when (run_fu_92 = ap_const_lv32_0) else "0";
    icmp_ln658_fu_458_p2 <= "1" when (i_reg_251 = ap_const_lv8_80) else "0";
    icmp_ln663_fu_511_p2 <= "1" when (ap_phi_mux_j_phi_fu_266_p4 = ap_const_lv8_80) else "0";
    icmp_ln665_fu_529_p2 <= "1" when (add_ln663_reg_643 = ap_const_lv8_80) else "0";
    icmp_ln666_fu_534_p2 <= "1" when (add_ln663_reg_643 = ap_const_lv8_80) else "0";
    icmp_ln667_fu_539_p2 <= "1" when (add_ln663_reg_643 = ap_const_lv8_80) else "0";
    icmp_ln669_fu_544_p2 <= "1" when (add_ln663_reg_643 = ap_const_lv8_80) else "0";
    icmp_ln670_fu_549_p2 <= "1" when (add_ln663_reg_643 = ap_const_lv8_80) else "0";
    icmp_ln671_fu_554_p2 <= "1" when (add_ln663_reg_643 = ap_const_lv8_80) else "0";
    j_cast_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_phi_fu_266_p4),64));

    out_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state66, ap_CS_fsm_state67, out_V_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            out_V_TDATA_blk_n <= out_V_TREADY_int_regslice;
        else 
            out_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_TDATA_int_regslice <= ((bitcast_ln174_2_fu_609_p1 & bitcast_ln174_1_fu_605_p1) & bitcast_ln174_fu_601_p1);
    out_V_TVALID <= regslice_both_out_V_U_vld_out;

    out_V_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state66, out_V_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state66) and (out_V_TREADY_int_regslice = ap_const_logic_1))) then 
            out_V_TVALID_int_regslice <= ap_const_logic_1;
        else 
            out_V_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    run_2_fu_492_p3 <= 
        ap_const_lv32_0 when (IN_R_TLAST_int_regslice(0) = '1') else 
        run_fu_92;
    td_pss_0_imag_address0 <= j_cast_fu_517_p1(7 - 1 downto 0);

    td_pss_0_imag_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            td_pss_0_imag_ce0 <= ap_const_logic_1;
        else 
            td_pss_0_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    td_pss_0_real_address0 <= j_cast_fu_517_p1(7 - 1 downto 0);

    td_pss_0_real_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            td_pss_0_real_ce0 <= ap_const_logic_1;
        else 
            td_pss_0_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    td_pss_1_imag_address0 <= j_cast_fu_517_p1(7 - 1 downto 0);

    td_pss_1_imag_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            td_pss_1_imag_ce0 <= ap_const_logic_1;
        else 
            td_pss_1_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    td_pss_1_real_address0 <= j_cast_fu_517_p1(7 - 1 downto 0);

    td_pss_1_real_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            td_pss_1_real_ce0 <= ap_const_logic_1;
        else 
            td_pss_1_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    td_pss_2_imag_address0 <= j_cast_fu_517_p1(7 - 1 downto 0);

    td_pss_2_imag_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            td_pss_2_imag_ce0 <= ap_const_logic_1;
        else 
            td_pss_2_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    td_pss_2_real_address0 <= j_cast_fu_517_p1(7 - 1 downto 0);

    td_pss_2_real_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            td_pss_2_real_ce0 <= ap_const_logic_1;
        else 
            td_pss_2_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
