-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity cp_corr_pss_sss_td_pss_0_imag_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of cp_corr_pss_sss_td_pss_0_imag_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101010011110110100010111110", 
    1 => "10111011100111011110000111111110", 
    2 => "00111101010001111000000011111110", 
    3 => "00111001101100011001010011100011", 
    4 => "10111101110000011111011111010111", 
    5 => "10111101101111110101010100010101", 
    6 => "00111100011110101101011011001011", 
    7 => "00111101110010110101101110110100", 
    8 => "00111101101010100001000011100000", 
    9 => "00111101000010101011101101000101", 
    10 => "00111100110011011110101000000011", 
    11 => "00111100111011010110110111000010", 
    12 => "10111001000011101010111000000011", 
    13 => "10111100111011110000100011001100", 
    14 => "10111100000100010001000110100000", 
    15 => "00111101000011011100110010100111", 
    16 => "00111101010010101101100110101110", 
    17 => "00111101010010110011110000111110", 
    18 => "00111101100011111011010111010000", 
    19 => "00111101100101101010100111000101", 
    20 => "00111010001010001011010010010101", 
    21 => "10111101110010110100101111111001", 
    22 => "10111101110100011001001001100100", 
    23 => "00111011101011000010010010110111", 
    24 => "00111101101010001111100111110100", 
    25 => "00111100110101111011101001100111", 
    26 => "10111101101000010000111010001000", 
    27 => "10111101101010001010001011101100", 
    28 => "00111100100101101110101111010101", 
    29 => "00111101101100001111001001111100", 
    30 => "00111101001000010100100111000111", 
    31 => "10111101011010100001000111101101", 
    32 => "10111101110100100111100100010100", 
    33 => "10111101101011001010100100100110", 
    34 => "10111101010010110011001011001111", 
    35 => "10111100101100011111000000111101", 
    36 => "00111100000011010100011111100111", 
    37 => "00111101000110100100100010110110", 
    38 => "00111101010000000001101101000011", 
    39 => "00111101000101110010001001011011", 
    40 => "00111100110011100111010001101101", 
    41 => "00111100010011101100010000011110", 
    42 => "10111100100101100100100001000001", 
    43 => "10111101100010100011001011110100", 
    44 => "10111101110100001000110000111111", 
    45 => "10111101101100011010111111000000", 
    46 => "10111100110010000001011011110000", 
    47 => "00111101001010011111001001111000", 
    48 => "00111101011011101100011111001001", 
    49 => "00111100001101110011010010110101", 
    50 => "10111101010111100101011011001101", 
    51 => "10111101100011010000100110011110", 
    52 => "10111100011001011010111111110011", 
    53 => "00111101010011001111000110000000", 
    54 => "00111101010010001100101101001011", 
    55 => "10111100100111101000101000101111", 
    56 => "10111101101011101100000011111001", 
    57 => "10111101101101100111001100111111", 
    58 => "10111101000110100000110111111110", 
    59 => "00111100101110001010101000000000", 
    60 => "00111101011110010011100010011011", 
    61 => "00111101100111010010110100000010", 
    62 => "00111101101000101100010101011101", 
    63 => "00111101100111000011111110000001", 
    64 => "00111101100101111001100101011111", 
    65 => "00111101100111000011111110000001", 
    66 => "00111101101000101100010101011101", 
    67 => "00111101100111010010110100000010", 
    68 => "00111101011110010011100010011011", 
    69 => "00111100101110001010101000000000", 
    70 => "10111101000110100000110111111110", 
    71 => "10111101101101100111001100111111", 
    72 => "10111101101011101100000011111001", 
    73 => "10111100100111101000101000101111", 
    74 => "00111101010010001100101101001011", 
    75 => "00111101010011001111000110000000", 
    76 => "10111100011001011010111111110011", 
    77 => "10111101100011010000100110011110", 
    78 => "10111101010111100101011011001101", 
    79 => "00111100001101110011010010110101", 
    80 => "00111101011011101100011111001001", 
    81 => "00111101001010011111001001111000", 
    82 => "10111100110010000001011011110000", 
    83 => "10111101101100011010111111000000", 
    84 => "10111101110100001000110000111111", 
    85 => "10111101100010100011001011110100", 
    86 => "10111100100101100100100001000001", 
    87 => "00111100010011101100010000011110", 
    88 => "00111100110011100111010001101101", 
    89 => "00111101000101110010001001011011", 
    90 => "00111101010000000001101101000011", 
    91 => "00111101000110100100100010110110", 
    92 => "00111100000011010100011111100111", 
    93 => "10111100101100011111000000111101", 
    94 => "10111101010010110011001011001111", 
    95 => "10111101101011001010100100100110", 
    96 => "10111101110100100111100100010100", 
    97 => "10111101011010100001000111101101", 
    98 => "00111101001000010100100111000111", 
    99 => "00111101101100001111001001111100", 
    100 => "00111100100101101110101111010101", 
    101 => "10111101101010001010001011101100", 
    102 => "10111101101000010000111010001000", 
    103 => "00111100110101111011101001100111", 
    104 => "00111101101010001111100111110100", 
    105 => "00111011101011000010010010110111", 
    106 => "10111101110100011001001001100100", 
    107 => "10111101110010110100101111111001", 
    108 => "00111010001010001011010010010101", 
    109 => "00111101100101101010100111000101", 
    110 => "00111101100011111011010111010000", 
    111 => "00111101010010110011110000111110", 
    112 => "00111101010010101101100110101110", 
    113 => "00111101000011011100110010100111", 
    114 => "10111100000100010001000110100000", 
    115 => "10111100111011110000100011001100", 
    116 => "10111001000011101010111000000011", 
    117 => "00111100111011010110110111000010", 
    118 => "00111100110011011110101000000011", 
    119 => "00111101000010101011101101000101", 
    120 => "00111101101010100001000011100000", 
    121 => "00111101110010110101101110110100", 
    122 => "00111100011110101101011011001011", 
    123 => "10111101101111110101010100010101", 
    124 => "10111101110000011111011111010111", 
    125 => "00111001101100011001010011100011", 
    126 => "00111101010001111000000011111110", 
    127 => "10111011100111011110000111111110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity cp_corr_pss_sss_td_pss_0_imag is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of cp_corr_pss_sss_td_pss_0_imag is
    component cp_corr_pss_sss_td_pss_0_imag_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    cp_corr_pss_sss_td_pss_0_imag_rom_U :  component cp_corr_pss_sss_td_pss_0_imag_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


