// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="cp_corr_pss_sss_cp_corr_pss_sss,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=3.300000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.291000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=5194,HLS_SYN_LUT=6938,HLS_VERSION=2020_2}" *)

module cp_corr_pss_sss (
        ap_clk,
        ap_rst_n,
        IN_R_TDATA,
        IN_R_TVALID,
        IN_R_TREADY,
        IN_R_TKEEP,
        IN_R_TSTRB,
        IN_R_TLAST,
        IN_I_TDATA,
        IN_I_TVALID,
        IN_I_TREADY,
        IN_I_TKEEP,
        IN_I_TSTRB,
        IN_I_TLAST,
        out_V_TDATA,
        out_V_TVALID,
        out_V_TREADY,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 53'd1;
parameter    ap_ST_fsm_state2 = 53'd2;
parameter    ap_ST_fsm_state3 = 53'd4;
parameter    ap_ST_fsm_state4 = 53'd8;
parameter    ap_ST_fsm_pp1_stage0 = 53'd16;
parameter    ap_ST_fsm_state20 = 53'd32;
parameter    ap_ST_fsm_state21 = 53'd64;
parameter    ap_ST_fsm_state22 = 53'd128;
parameter    ap_ST_fsm_state23 = 53'd256;
parameter    ap_ST_fsm_state24 = 53'd512;
parameter    ap_ST_fsm_state25 = 53'd1024;
parameter    ap_ST_fsm_state26 = 53'd2048;
parameter    ap_ST_fsm_state27 = 53'd4096;
parameter    ap_ST_fsm_state28 = 53'd8192;
parameter    ap_ST_fsm_state29 = 53'd16384;
parameter    ap_ST_fsm_state30 = 53'd32768;
parameter    ap_ST_fsm_state31 = 53'd65536;
parameter    ap_ST_fsm_state32 = 53'd131072;
parameter    ap_ST_fsm_state33 = 53'd262144;
parameter    ap_ST_fsm_state34 = 53'd524288;
parameter    ap_ST_fsm_state35 = 53'd1048576;
parameter    ap_ST_fsm_state36 = 53'd2097152;
parameter    ap_ST_fsm_state37 = 53'd4194304;
parameter    ap_ST_fsm_state38 = 53'd8388608;
parameter    ap_ST_fsm_state39 = 53'd16777216;
parameter    ap_ST_fsm_state40 = 53'd33554432;
parameter    ap_ST_fsm_state41 = 53'd67108864;
parameter    ap_ST_fsm_state42 = 53'd134217728;
parameter    ap_ST_fsm_state43 = 53'd268435456;
parameter    ap_ST_fsm_state44 = 53'd536870912;
parameter    ap_ST_fsm_state45 = 53'd1073741824;
parameter    ap_ST_fsm_state46 = 53'd2147483648;
parameter    ap_ST_fsm_state47 = 53'd4294967296;
parameter    ap_ST_fsm_state48 = 53'd8589934592;
parameter    ap_ST_fsm_state49 = 53'd17179869184;
parameter    ap_ST_fsm_state50 = 53'd34359738368;
parameter    ap_ST_fsm_state51 = 53'd68719476736;
parameter    ap_ST_fsm_state52 = 53'd137438953472;
parameter    ap_ST_fsm_state53 = 53'd274877906944;
parameter    ap_ST_fsm_state54 = 53'd549755813888;
parameter    ap_ST_fsm_state55 = 53'd1099511627776;
parameter    ap_ST_fsm_state56 = 53'd2199023255552;
parameter    ap_ST_fsm_state57 = 53'd4398046511104;
parameter    ap_ST_fsm_state58 = 53'd8796093022208;
parameter    ap_ST_fsm_state59 = 53'd17592186044416;
parameter    ap_ST_fsm_state60 = 53'd35184372088832;
parameter    ap_ST_fsm_state61 = 53'd70368744177664;
parameter    ap_ST_fsm_state62 = 53'd140737488355328;
parameter    ap_ST_fsm_state63 = 53'd281474976710656;
parameter    ap_ST_fsm_state64 = 53'd562949953421312;
parameter    ap_ST_fsm_state65 = 53'd1125899906842624;
parameter    ap_ST_fsm_state66 = 53'd2251799813685248;
parameter    ap_ST_fsm_state67 = 53'd4503599627370496;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] IN_R_TDATA;
input   IN_R_TVALID;
output   IN_R_TREADY;
input  [3:0] IN_R_TKEEP;
input  [3:0] IN_R_TSTRB;
input  [0:0] IN_R_TLAST;
input  [31:0] IN_I_TDATA;
input   IN_I_TVALID;
output   IN_I_TREADY;
input  [3:0] IN_I_TKEEP;
input  [3:0] IN_I_TSTRB;
input  [0:0] IN_I_TLAST;
output  [95:0] out_V_TDATA;
output   out_V_TVALID;
input   out_V_TREADY;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [52:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [6:0] td_pss_0_real_address0;
reg    td_pss_0_real_ce0;
wire   [31:0] td_pss_0_real_q0;
wire   [6:0] td_pss_1_real_address0;
reg    td_pss_1_real_ce0;
wire   [31:0] td_pss_1_real_q0;
wire   [6:0] td_pss_2_real_address0;
reg    td_pss_2_real_ce0;
wire   [31:0] td_pss_2_real_q0;
wire   [6:0] td_pss_0_imag_address0;
reg    td_pss_0_imag_ce0;
wire   [31:0] td_pss_0_imag_q0;
wire   [6:0] td_pss_1_imag_address0;
reg    td_pss_1_imag_ce0;
wire   [31:0] td_pss_1_imag_q0;
wire   [6:0] td_pss_2_imag_address0;
reg    td_pss_2_imag_ce0;
wire   [31:0] td_pss_2_imag_q0;
reg    IN_R_TDATA_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln658_fu_458_p2;
reg    IN_I_TDATA_blk_n;
reg    out_V_TDATA_blk_n;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state67;
reg   [7:0] j_reg_262;
reg   [31:0] acc_2_i_reg_273;
reg   [31:0] acc_1_i_reg_285;
reg   [31:0] acc_0_r_reg_297;
reg   [31:0] acc_1_r_reg_309;
reg   [31:0] acc_2_r_reg_321;
reg   [31:0] acc_0_i_reg_333;
wire   [31:0] grp_fu_357_p2;
reg   [31:0] reg_411;
reg    ap_enable_reg_pp1_iter9;
wire    ap_block_state5_pp1_stage0_iter0;
wire    ap_block_state6_pp1_stage0_iter1;
wire    ap_block_state7_pp1_stage0_iter2;
wire    ap_block_state8_pp1_stage0_iter3;
wire    ap_block_state9_pp1_stage0_iter4;
wire    ap_block_state10_pp1_stage0_iter5;
wire    ap_block_state11_pp1_stage0_iter6;
wire    ap_block_state12_pp1_stage0_iter7;
wire    ap_block_state13_pp1_stage0_iter8;
wire    ap_block_state14_pp1_stage0_iter9;
wire    ap_block_state15_pp1_stage0_iter10;
wire    ap_block_state16_pp1_stage0_iter11;
wire    ap_block_state17_pp1_stage0_iter12;
wire    ap_block_state18_pp1_stage0_iter13;
wire    ap_block_state19_pp1_stage0_iter14;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln663_reg_654;
reg   [0:0] icmp_ln663_reg_654_pp1_iter8_reg;
wire    ap_CS_fsm_state27;
wire   [31:0] grp_fu_361_p2;
reg   [31:0] reg_416;
wire   [31:0] grp_fu_365_p2;
reg   [31:0] reg_421;
wire   [31:0] grp_fu_369_p2;
reg   [31:0] reg_426;
wire   [31:0] grp_fu_373_p2;
reg   [31:0] reg_431;
wire   [31:0] grp_fu_377_p2;
reg   [31:0] reg_436;
wire   [0:0] icmp_ln648_fu_446_p2;
wire    ap_CS_fsm_state2;
wire   [7:0] add_ln658_fu_452_p2;
reg    ap_block_state3;
wire   [7:0] add_ln663_fu_505_p2;
reg   [7:0] add_ln663_reg_643;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] icmp_ln663_fu_511_p2;
reg   [0:0] icmp_ln663_reg_654_pp1_iter1_reg;
reg   [0:0] icmp_ln663_reg_654_pp1_iter2_reg;
reg   [0:0] icmp_ln663_reg_654_pp1_iter3_reg;
reg   [0:0] icmp_ln663_reg_654_pp1_iter4_reg;
reg   [0:0] icmp_ln663_reg_654_pp1_iter5_reg;
reg   [0:0] icmp_ln663_reg_654_pp1_iter6_reg;
reg   [0:0] icmp_ln663_reg_654_pp1_iter7_reg;
reg   [0:0] icmp_ln663_reg_654_pp1_iter9_reg;
reg   [0:0] icmp_ln663_reg_654_pp1_iter10_reg;
reg   [0:0] icmp_ln663_reg_654_pp1_iter11_reg;
reg   [0:0] icmp_ln663_reg_654_pp1_iter12_reg;
reg   [0:0] icmp_ln663_reg_654_pp1_iter13_reg;
wire   [31:0] IN_real_q0;
reg   [31:0] IN_real_load_reg_698;
reg    ap_enable_reg_pp1_iter1;
reg   [31:0] td_pss_0_real_load_reg_705;
wire   [0:0] icmp_ln665_fu_529_p2;
reg   [0:0] icmp_ln665_reg_710;
reg   [0:0] icmp_ln665_reg_710_pp1_iter2_reg;
reg   [0:0] icmp_ln665_reg_710_pp1_iter3_reg;
reg   [0:0] icmp_ln665_reg_710_pp1_iter4_reg;
reg   [0:0] icmp_ln665_reg_710_pp1_iter5_reg;
reg   [0:0] icmp_ln665_reg_710_pp1_iter6_reg;
reg   [0:0] icmp_ln665_reg_710_pp1_iter7_reg;
reg   [0:0] icmp_ln665_reg_710_pp1_iter8_reg;
reg   [0:0] icmp_ln665_reg_710_pp1_iter9_reg;
reg   [31:0] td_pss_1_real_load_reg_715;
wire   [0:0] icmp_ln666_fu_534_p2;
reg   [0:0] icmp_ln666_reg_720;
reg   [0:0] icmp_ln666_reg_720_pp1_iter2_reg;
reg   [0:0] icmp_ln666_reg_720_pp1_iter3_reg;
reg   [0:0] icmp_ln666_reg_720_pp1_iter4_reg;
reg   [0:0] icmp_ln666_reg_720_pp1_iter5_reg;
reg   [0:0] icmp_ln666_reg_720_pp1_iter6_reg;
reg   [0:0] icmp_ln666_reg_720_pp1_iter7_reg;
reg   [0:0] icmp_ln666_reg_720_pp1_iter8_reg;
reg   [0:0] icmp_ln666_reg_720_pp1_iter9_reg;
reg   [31:0] td_pss_2_real_load_reg_725;
wire   [0:0] icmp_ln667_fu_539_p2;
reg   [0:0] icmp_ln667_reg_730;
reg   [0:0] icmp_ln667_reg_730_pp1_iter2_reg;
reg   [0:0] icmp_ln667_reg_730_pp1_iter3_reg;
reg   [0:0] icmp_ln667_reg_730_pp1_iter4_reg;
reg   [0:0] icmp_ln667_reg_730_pp1_iter5_reg;
reg   [0:0] icmp_ln667_reg_730_pp1_iter6_reg;
reg   [0:0] icmp_ln667_reg_730_pp1_iter7_reg;
reg   [0:0] icmp_ln667_reg_730_pp1_iter8_reg;
reg   [0:0] icmp_ln667_reg_730_pp1_iter9_reg;
wire   [31:0] IN_imag_q0;
reg   [31:0] IN_imag_load_reg_735;
reg   [31:0] td_pss_0_imag_load_reg_742;
wire   [0:0] icmp_ln669_fu_544_p2;
reg   [0:0] icmp_ln669_reg_747;
reg   [0:0] icmp_ln669_reg_747_pp1_iter2_reg;
reg   [0:0] icmp_ln669_reg_747_pp1_iter3_reg;
reg   [0:0] icmp_ln669_reg_747_pp1_iter4_reg;
reg   [0:0] icmp_ln669_reg_747_pp1_iter5_reg;
reg   [0:0] icmp_ln669_reg_747_pp1_iter6_reg;
reg   [0:0] icmp_ln669_reg_747_pp1_iter7_reg;
reg   [0:0] icmp_ln669_reg_747_pp1_iter8_reg;
reg   [0:0] icmp_ln669_reg_747_pp1_iter9_reg;
reg   [31:0] td_pss_1_imag_load_reg_752;
wire   [0:0] icmp_ln670_fu_549_p2;
reg   [0:0] icmp_ln670_reg_757;
reg   [0:0] icmp_ln670_reg_757_pp1_iter2_reg;
reg   [0:0] icmp_ln670_reg_757_pp1_iter3_reg;
reg   [0:0] icmp_ln670_reg_757_pp1_iter4_reg;
reg   [0:0] icmp_ln670_reg_757_pp1_iter5_reg;
reg   [0:0] icmp_ln670_reg_757_pp1_iter6_reg;
reg   [0:0] icmp_ln670_reg_757_pp1_iter7_reg;
reg   [0:0] icmp_ln670_reg_757_pp1_iter8_reg;
reg   [0:0] icmp_ln670_reg_757_pp1_iter9_reg;
reg   [31:0] td_pss_2_imag_load_reg_762;
wire   [0:0] icmp_ln671_fu_554_p2;
reg   [0:0] icmp_ln671_reg_767;
reg   [0:0] icmp_ln671_reg_767_pp1_iter2_reg;
reg   [0:0] icmp_ln671_reg_767_pp1_iter3_reg;
reg   [0:0] icmp_ln671_reg_767_pp1_iter4_reg;
reg   [0:0] icmp_ln671_reg_767_pp1_iter5_reg;
reg   [0:0] icmp_ln671_reg_767_pp1_iter6_reg;
reg   [0:0] icmp_ln671_reg_767_pp1_iter7_reg;
reg   [0:0] icmp_ln671_reg_767_pp1_iter8_reg;
reg   [0:0] icmp_ln671_reg_767_pp1_iter9_reg;
wire   [31:0] grp_fu_559_p3;
reg    ap_enable_reg_pp1_iter14;
wire   [31:0] grp_fu_566_p3;
wire   [31:0] grp_fu_573_p3;
wire   [31:0] grp_fu_580_p3;
wire   [31:0] grp_fu_587_p3;
wire   [31:0] grp_fu_594_p3;
wire   [31:0] grp_fu_345_p2;
reg   [31:0] p_x_assign_reg_802;
wire    ap_CS_fsm_state38;
wire   [31:0] grp_fu_349_p2;
reg   [31:0] p_x_assign_1_reg_807;
wire   [31:0] grp_fu_353_p2;
reg   [31:0] p_x_assign_2_reg_812;
wire    ap_CS_fsm_state4;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state5;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
reg    ap_enable_reg_pp1_iter6;
reg    ap_enable_reg_pp1_iter7;
reg    ap_enable_reg_pp1_iter8;
reg    ap_enable_reg_pp1_iter10;
reg    ap_enable_reg_pp1_iter11;
reg    ap_enable_reg_pp1_iter12;
reg    ap_enable_reg_pp1_iter13;
reg   [6:0] IN_real_address0;
reg    IN_real_ce0;
reg    IN_real_we0;
wire   [31:0] IN_real_d0;
reg   [6:0] IN_imag_address0;
reg    IN_imag_ce0;
reg    IN_imag_we0;
wire   [31:0] IN_imag_d0;
reg   [7:0] i_reg_251;
wire    regslice_both_out_V_U_apdone_blk;
reg   [7:0] ap_phi_mux_j_phi_fu_266_p4;
wire    ap_block_pp1_stage0;
wire   [63:0] i_cast_fu_464_p1;
wire   [63:0] j_cast_fu_517_p1;
reg   [31:0] run_fu_92;
wire   [31:0] run_2_fu_492_p3;
wire    ap_CS_fsm_state28;
reg   [31:0] grp_fu_357_p0;
reg   [31:0] grp_fu_357_p1;
wire    ap_CS_fsm_state20;
reg   [31:0] grp_fu_361_p0;
reg   [31:0] grp_fu_361_p1;
reg   [31:0] grp_fu_365_p0;
reg   [31:0] grp_fu_365_p1;
reg   [31:0] grp_fu_369_p0;
reg   [31:0] grp_fu_369_p1;
reg   [31:0] grp_fu_373_p0;
reg   [31:0] grp_fu_373_p1;
reg   [31:0] grp_fu_377_p0;
reg   [31:0] grp_fu_377_p1;
wire    ap_CS_fsm_state39;
wire   [31:0] grp_fu_393_p2;
wire   [31:0] grp_fu_398_p2;
wire   [31:0] grp_fu_403_p2;
wire   [31:0] bitcast_ln174_2_fu_609_p1;
wire   [31:0] bitcast_ln174_1_fu_605_p1;
wire   [31:0] bitcast_ln174_fu_601_p1;
reg    grp_fu_393_ce;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
reg    grp_fu_398_ce;
reg    grp_fu_403_ce;
reg    grp_fu_559_in_valid;
reg    grp_fu_566_in_valid;
reg    grp_fu_573_in_valid;
reg    grp_fu_580_in_valid;
reg    grp_fu_587_in_valid;
reg    grp_fu_594_in_valid;
reg   [52:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    regslice_both_IN_R_V_data_V_U_apdone_blk;
wire   [31:0] IN_R_TDATA_int_regslice;
wire    IN_R_TVALID_int_regslice;
reg    IN_R_TREADY_int_regslice;
wire    regslice_both_IN_R_V_data_V_U_ack_in;
wire    regslice_both_IN_R_V_keep_V_U_apdone_blk;
wire   [3:0] IN_R_TKEEP_int_regslice;
wire    regslice_both_IN_R_V_keep_V_U_vld_out;
wire    regslice_both_IN_R_V_keep_V_U_ack_in;
wire    regslice_both_IN_R_V_strb_V_U_apdone_blk;
wire   [3:0] IN_R_TSTRB_int_regslice;
wire    regslice_both_IN_R_V_strb_V_U_vld_out;
wire    regslice_both_IN_R_V_strb_V_U_ack_in;
wire    regslice_both_IN_R_V_last_V_U_apdone_blk;
wire   [0:0] IN_R_TLAST_int_regslice;
wire    regslice_both_IN_R_V_last_V_U_vld_out;
wire    regslice_both_IN_R_V_last_V_U_ack_in;
wire    regslice_both_IN_I_V_data_V_U_apdone_blk;
wire   [31:0] IN_I_TDATA_int_regslice;
wire    IN_I_TVALID_int_regslice;
reg    IN_I_TREADY_int_regslice;
wire    regslice_both_IN_I_V_data_V_U_ack_in;
wire    regslice_both_IN_I_V_keep_V_U_apdone_blk;
wire   [3:0] IN_I_TKEEP_int_regslice;
wire    regslice_both_IN_I_V_keep_V_U_vld_out;
wire    regslice_both_IN_I_V_keep_V_U_ack_in;
wire    regslice_both_IN_I_V_strb_V_U_apdone_blk;
wire   [3:0] IN_I_TSTRB_int_regslice;
wire    regslice_both_IN_I_V_strb_V_U_vld_out;
wire    regslice_both_IN_I_V_strb_V_U_ack_in;
wire    regslice_both_IN_I_V_last_V_U_apdone_blk;
wire   [0:0] IN_I_TLAST_int_regslice;
wire    regslice_both_IN_I_V_last_V_U_vld_out;
wire    regslice_both_IN_I_V_last_V_U_ack_in;
wire   [95:0] out_V_TDATA_int_regslice;
reg    out_V_TVALID_int_regslice;
wire    out_V_TREADY_int_regslice;
wire    regslice_both_out_V_U_vld_out;
wire   [31:0] grp_fu_559_p0;
wire   [31:0] grp_fu_566_p0;
wire   [31:0] grp_fu_573_p0;
wire   [31:0] grp_fu_580_p0;
wire   [31:0] grp_fu_587_p0;
wire   [31:0] grp_fu_594_p0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 53'd1;
#0 ap_enable_reg_pp1_iter9 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter14 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter8 = 1'b0;
#0 ap_enable_reg_pp1_iter10 = 1'b0;
#0 ap_enable_reg_pp1_iter11 = 1'b0;
#0 ap_enable_reg_pp1_iter12 = 1'b0;
#0 ap_enable_reg_pp1_iter13 = 1'b0;
end

cp_corr_pss_sss_td_pss_0_real #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
td_pss_0_real_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(td_pss_0_real_address0),
    .ce0(td_pss_0_real_ce0),
    .q0(td_pss_0_real_q0)
);

cp_corr_pss_sss_td_pss_1_real #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
td_pss_1_real_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(td_pss_1_real_address0),
    .ce0(td_pss_1_real_ce0),
    .q0(td_pss_1_real_q0)
);

cp_corr_pss_sss_td_pss_1_real #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
td_pss_2_real_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(td_pss_2_real_address0),
    .ce0(td_pss_2_real_ce0),
    .q0(td_pss_2_real_q0)
);

cp_corr_pss_sss_td_pss_0_imag #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
td_pss_0_imag_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(td_pss_0_imag_address0),
    .ce0(td_pss_0_imag_ce0),
    .q0(td_pss_0_imag_q0)
);

cp_corr_pss_sss_td_pss_1_imag #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
td_pss_1_imag_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(td_pss_1_imag_address0),
    .ce0(td_pss_1_imag_ce0),
    .q0(td_pss_1_imag_q0)
);

cp_corr_pss_sss_td_pss_2_imag #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
td_pss_2_imag_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(td_pss_2_imag_address0),
    .ce0(td_pss_2_imag_ce0),
    .q0(td_pss_2_imag_q0)
);

cp_corr_pss_sss_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

cp_corr_pss_sss_IN_real #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
IN_real_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(IN_real_address0),
    .ce0(IN_real_ce0),
    .we0(IN_real_we0),
    .d0(IN_real_d0),
    .q0(IN_real_q0)
);

cp_corr_pss_sss_IN_real #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
IN_imag_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(IN_imag_address0),
    .ce0(IN_imag_ce0),
    .we0(IN_imag_we0),
    .d0(IN_imag_d0),
    .q0(IN_imag_q0)
);

cp_corr_pss_sss_fadd_32ns_32ns_32_11_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 11 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_11_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_411),
    .din1(reg_416),
    .ce(1'b1),
    .dout(grp_fu_345_p2)
);

cp_corr_pss_sss_fadd_32ns_32ns_32_11_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 11 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_11_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_421),
    .din1(reg_426),
    .ce(1'b1),
    .dout(grp_fu_349_p2)
);

cp_corr_pss_sss_fadd_32ns_32ns_32_11_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 11 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_11_full_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_431),
    .din1(reg_436),
    .ce(1'b1),
    .dout(grp_fu_353_p2)
);

cp_corr_pss_sss_fmul_32ns_32ns_32_8_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_8_max_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_357_p0),
    .din1(grp_fu_357_p1),
    .ce(1'b1),
    .dout(grp_fu_357_p2)
);

cp_corr_pss_sss_fmul_32ns_32ns_32_8_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_8_max_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_361_p0),
    .din1(grp_fu_361_p1),
    .ce(1'b1),
    .dout(grp_fu_361_p2)
);

cp_corr_pss_sss_fmul_32ns_32ns_32_8_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_8_max_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_365_p0),
    .din1(grp_fu_365_p1),
    .ce(1'b1),
    .dout(grp_fu_365_p2)
);

cp_corr_pss_sss_fmul_32ns_32ns_32_8_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_8_max_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_369_p0),
    .din1(grp_fu_369_p1),
    .ce(1'b1),
    .dout(grp_fu_369_p2)
);

cp_corr_pss_sss_fmul_32ns_32ns_32_8_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_8_max_dsp_1_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_373_p0),
    .din1(grp_fu_373_p1),
    .ce(1'b1),
    .dout(grp_fu_373_p2)
);

cp_corr_pss_sss_fmul_32ns_32ns_32_8_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_8_max_dsp_1_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_377_p0),
    .din1(grp_fu_377_p1),
    .ce(1'b1),
    .dout(grp_fu_377_p2)
);

cp_corr_pss_sss_fsqrt_32ns_32ns_32_28_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 28 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsqrt_32ns_32ns_32_28_no_dsp_1_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(32'd0),
    .din1(p_x_assign_reg_802),
    .ce(grp_fu_393_ce),
    .dout(grp_fu_393_p2)
);

cp_corr_pss_sss_fsqrt_32ns_32ns_32_28_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 28 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsqrt_32ns_32ns_32_28_no_dsp_1_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(32'd0),
    .din1(p_x_assign_1_reg_807),
    .ce(grp_fu_398_ce),
    .dout(grp_fu_398_p2)
);

cp_corr_pss_sss_fsqrt_32ns_32ns_32_28_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 28 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsqrt_32ns_32ns_32_28_no_dsp_1_U12(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(32'd0),
    .din1(p_x_assign_2_reg_812),
    .ce(grp_fu_403_ce),
    .dout(grp_fu_403_p2)
);

cp_corr_pss_sss_facc_32ns_32ns_1ns_32_5_no_dsp_1 #(
    .DWIDTH( 32 ))
facc_32ns_32ns_1ns_32_5_no_dsp_1_U13(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .ce(1'b1),
    .in_data(reg_411),
    .in_last(icmp_ln665_reg_710_pp1_iter9_reg),
    .in_valid(grp_fu_559_in_valid),
    .out_data(grp_fu_559_p3)
);

cp_corr_pss_sss_facc_32ns_32ns_1ns_32_5_no_dsp_1 #(
    .DWIDTH( 32 ))
facc_32ns_32ns_1ns_32_5_no_dsp_1_U14(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .ce(1'b1),
    .in_data(reg_416),
    .in_last(icmp_ln666_reg_720_pp1_iter9_reg),
    .in_valid(grp_fu_566_in_valid),
    .out_data(grp_fu_566_p3)
);

cp_corr_pss_sss_facc_32ns_32ns_1ns_32_5_no_dsp_1 #(
    .DWIDTH( 32 ))
facc_32ns_32ns_1ns_32_5_no_dsp_1_U15(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .ce(1'b1),
    .in_data(reg_421),
    .in_last(icmp_ln667_reg_730_pp1_iter9_reg),
    .in_valid(grp_fu_573_in_valid),
    .out_data(grp_fu_573_p3)
);

cp_corr_pss_sss_facc_32ns_32ns_1ns_32_5_no_dsp_1 #(
    .DWIDTH( 32 ))
facc_32ns_32ns_1ns_32_5_no_dsp_1_U16(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .ce(1'b1),
    .in_data(reg_426),
    .in_last(icmp_ln669_reg_747_pp1_iter9_reg),
    .in_valid(grp_fu_580_in_valid),
    .out_data(grp_fu_580_p3)
);

cp_corr_pss_sss_facc_32ns_32ns_1ns_32_5_no_dsp_1 #(
    .DWIDTH( 32 ))
facc_32ns_32ns_1ns_32_5_no_dsp_1_U17(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .ce(1'b1),
    .in_data(reg_431),
    .in_last(icmp_ln670_reg_757_pp1_iter9_reg),
    .in_valid(grp_fu_587_in_valid),
    .out_data(grp_fu_587_p3)
);

cp_corr_pss_sss_facc_32ns_32ns_1ns_32_5_no_dsp_1 #(
    .DWIDTH( 32 ))
facc_32ns_32ns_1ns_32_5_no_dsp_1_U18(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .ce(1'b1),
    .in_data(reg_436),
    .in_last(icmp_ln671_reg_767_pp1_iter9_reg),
    .in_valid(grp_fu_594_in_valid),
    .out_data(grp_fu_594_p3)
);

cp_corr_pss_sss_regslice_both #(
    .DataWidth( 32 ))
regslice_both_IN_R_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(IN_R_TDATA),
    .vld_in(IN_R_TVALID),
    .ack_in(regslice_both_IN_R_V_data_V_U_ack_in),
    .data_out(IN_R_TDATA_int_regslice),
    .vld_out(IN_R_TVALID_int_regslice),
    .ack_out(IN_R_TREADY_int_regslice),
    .apdone_blk(regslice_both_IN_R_V_data_V_U_apdone_blk)
);

cp_corr_pss_sss_regslice_both #(
    .DataWidth( 4 ))
regslice_both_IN_R_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(IN_R_TKEEP),
    .vld_in(IN_R_TVALID),
    .ack_in(regslice_both_IN_R_V_keep_V_U_ack_in),
    .data_out(IN_R_TKEEP_int_regslice),
    .vld_out(regslice_both_IN_R_V_keep_V_U_vld_out),
    .ack_out(IN_R_TREADY_int_regslice),
    .apdone_blk(regslice_both_IN_R_V_keep_V_U_apdone_blk)
);

cp_corr_pss_sss_regslice_both #(
    .DataWidth( 4 ))
regslice_both_IN_R_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(IN_R_TSTRB),
    .vld_in(IN_R_TVALID),
    .ack_in(regslice_both_IN_R_V_strb_V_U_ack_in),
    .data_out(IN_R_TSTRB_int_regslice),
    .vld_out(regslice_both_IN_R_V_strb_V_U_vld_out),
    .ack_out(IN_R_TREADY_int_regslice),
    .apdone_blk(regslice_both_IN_R_V_strb_V_U_apdone_blk)
);

cp_corr_pss_sss_regslice_both #(
    .DataWidth( 1 ))
regslice_both_IN_R_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(IN_R_TLAST),
    .vld_in(IN_R_TVALID),
    .ack_in(regslice_both_IN_R_V_last_V_U_ack_in),
    .data_out(IN_R_TLAST_int_regslice),
    .vld_out(regslice_both_IN_R_V_last_V_U_vld_out),
    .ack_out(IN_R_TREADY_int_regslice),
    .apdone_blk(regslice_both_IN_R_V_last_V_U_apdone_blk)
);

cp_corr_pss_sss_regslice_both #(
    .DataWidth( 32 ))
regslice_both_IN_I_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(IN_I_TDATA),
    .vld_in(IN_I_TVALID),
    .ack_in(regslice_both_IN_I_V_data_V_U_ack_in),
    .data_out(IN_I_TDATA_int_regslice),
    .vld_out(IN_I_TVALID_int_regslice),
    .ack_out(IN_I_TREADY_int_regslice),
    .apdone_blk(regslice_both_IN_I_V_data_V_U_apdone_blk)
);

cp_corr_pss_sss_regslice_both #(
    .DataWidth( 4 ))
regslice_both_IN_I_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(IN_I_TKEEP),
    .vld_in(IN_I_TVALID),
    .ack_in(regslice_both_IN_I_V_keep_V_U_ack_in),
    .data_out(IN_I_TKEEP_int_regslice),
    .vld_out(regslice_both_IN_I_V_keep_V_U_vld_out),
    .ack_out(IN_I_TREADY_int_regslice),
    .apdone_blk(regslice_both_IN_I_V_keep_V_U_apdone_blk)
);

cp_corr_pss_sss_regslice_both #(
    .DataWidth( 4 ))
regslice_both_IN_I_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(IN_I_TSTRB),
    .vld_in(IN_I_TVALID),
    .ack_in(regslice_both_IN_I_V_strb_V_U_ack_in),
    .data_out(IN_I_TSTRB_int_regslice),
    .vld_out(regslice_both_IN_I_V_strb_V_U_vld_out),
    .ack_out(IN_I_TREADY_int_regslice),
    .apdone_blk(regslice_both_IN_I_V_strb_V_U_apdone_blk)
);

cp_corr_pss_sss_regslice_both #(
    .DataWidth( 1 ))
regslice_both_IN_I_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(IN_I_TLAST),
    .vld_in(IN_I_TVALID),
    .ack_in(regslice_both_IN_I_V_last_V_U_ack_in),
    .data_out(IN_I_TLAST_int_regslice),
    .vld_out(regslice_both_IN_I_V_last_V_U_vld_out),
    .ack_out(IN_I_TREADY_int_regslice),
    .apdone_blk(regslice_both_IN_I_V_last_V_U_apdone_blk)
);

cp_corr_pss_sss_regslice_both #(
    .DataWidth( 96 ))
regslice_both_out_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_V_TDATA_int_regslice),
    .vld_in(out_V_TVALID_int_regslice),
    .ack_in(out_V_TREADY_int_regslice),
    .data_out(out_V_TDATA),
    .vld_out(regslice_both_out_V_U_vld_out),
    .ack_out(out_V_TREADY),
    .apdone_blk(regslice_both_out_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state5)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state5);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter12 <= ap_enable_reg_pp1_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter13 <= ap_enable_reg_pp1_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter14 <= ap_enable_reg_pp1_iter13;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter14 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        acc_0_i_reg_333 <= 32'd0;
    end else if (((ap_enable_reg_pp1_iter14 == 1'b1) & (icmp_ln663_reg_654_pp1_iter13_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        acc_0_i_reg_333 <= grp_fu_580_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        acc_0_r_reg_297 <= 32'd0;
    end else if (((ap_enable_reg_pp1_iter14 == 1'b1) & (icmp_ln663_reg_654_pp1_iter13_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        acc_0_r_reg_297 <= grp_fu_559_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        acc_1_i_reg_285 <= 32'd0;
    end else if (((ap_enable_reg_pp1_iter14 == 1'b1) & (icmp_ln663_reg_654_pp1_iter13_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        acc_1_i_reg_285 <= grp_fu_587_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        acc_1_r_reg_309 <= 32'd0;
    end else if (((ap_enable_reg_pp1_iter14 == 1'b1) & (icmp_ln663_reg_654_pp1_iter13_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        acc_1_r_reg_309 <= grp_fu_566_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        acc_2_i_reg_273 <= 32'd0;
    end else if (((ap_enable_reg_pp1_iter14 == 1'b1) & (icmp_ln663_reg_654_pp1_iter13_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        acc_2_i_reg_273 <= grp_fu_594_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        acc_2_r_reg_321 <= 32'd0;
    end else if (((ap_enable_reg_pp1_iter14 == 1'b1) & (icmp_ln663_reg_654_pp1_iter13_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        acc_2_r_reg_321 <= grp_fu_573_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((regslice_both_out_V_U_apdone_blk == 1'b0) & (icmp_ln648_fu_446_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_251 <= 8'd0;
    end else if ((~(((1'b0 == IN_I_TVALID_int_regslice) & (icmp_ln658_fu_458_p2 == 1'd0)) | ((1'b0 == IN_R_TVALID_int_regslice) & (icmp_ln658_fu_458_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln658_fu_458_p2 == 1'd0))) begin
        i_reg_251 <= add_ln658_fu_452_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_262 <= 8'd0;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln663_reg_654 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        j_reg_262 <= add_ln663_reg_643;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        run_fu_92 <= 32'd1;
    end else if ((~(((1'b0 == IN_I_TVALID_int_regslice) & (icmp_ln658_fu_458_p2 == 1'd0)) | ((1'b0 == IN_R_TVALID_int_regslice) & (icmp_ln658_fu_458_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln658_fu_458_p2 == 1'd0))) begin
        run_fu_92 <= run_2_fu_492_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln663_reg_654 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        IN_imag_load_reg_735 <= IN_imag_q0;
        IN_real_load_reg_698 <= IN_real_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        add_ln663_reg_643 <= add_ln663_fu_505_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln663_reg_654 <= icmp_ln663_fu_511_p2;
        icmp_ln663_reg_654_pp1_iter1_reg <= icmp_ln663_reg_654;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln663_reg_654_pp1_iter10_reg <= icmp_ln663_reg_654_pp1_iter9_reg;
        icmp_ln663_reg_654_pp1_iter11_reg <= icmp_ln663_reg_654_pp1_iter10_reg;
        icmp_ln663_reg_654_pp1_iter12_reg <= icmp_ln663_reg_654_pp1_iter11_reg;
        icmp_ln663_reg_654_pp1_iter13_reg <= icmp_ln663_reg_654_pp1_iter12_reg;
        icmp_ln663_reg_654_pp1_iter2_reg <= icmp_ln663_reg_654_pp1_iter1_reg;
        icmp_ln663_reg_654_pp1_iter3_reg <= icmp_ln663_reg_654_pp1_iter2_reg;
        icmp_ln663_reg_654_pp1_iter4_reg <= icmp_ln663_reg_654_pp1_iter3_reg;
        icmp_ln663_reg_654_pp1_iter5_reg <= icmp_ln663_reg_654_pp1_iter4_reg;
        icmp_ln663_reg_654_pp1_iter6_reg <= icmp_ln663_reg_654_pp1_iter5_reg;
        icmp_ln663_reg_654_pp1_iter7_reg <= icmp_ln663_reg_654_pp1_iter6_reg;
        icmp_ln663_reg_654_pp1_iter8_reg <= icmp_ln663_reg_654_pp1_iter7_reg;
        icmp_ln663_reg_654_pp1_iter9_reg <= icmp_ln663_reg_654_pp1_iter8_reg;
        icmp_ln665_reg_710_pp1_iter2_reg <= icmp_ln665_reg_710;
        icmp_ln665_reg_710_pp1_iter3_reg <= icmp_ln665_reg_710_pp1_iter2_reg;
        icmp_ln665_reg_710_pp1_iter4_reg <= icmp_ln665_reg_710_pp1_iter3_reg;
        icmp_ln665_reg_710_pp1_iter5_reg <= icmp_ln665_reg_710_pp1_iter4_reg;
        icmp_ln665_reg_710_pp1_iter6_reg <= icmp_ln665_reg_710_pp1_iter5_reg;
        icmp_ln665_reg_710_pp1_iter7_reg <= icmp_ln665_reg_710_pp1_iter6_reg;
        icmp_ln665_reg_710_pp1_iter8_reg <= icmp_ln665_reg_710_pp1_iter7_reg;
        icmp_ln665_reg_710_pp1_iter9_reg <= icmp_ln665_reg_710_pp1_iter8_reg;
        icmp_ln666_reg_720_pp1_iter2_reg <= icmp_ln666_reg_720;
        icmp_ln666_reg_720_pp1_iter3_reg <= icmp_ln666_reg_720_pp1_iter2_reg;
        icmp_ln666_reg_720_pp1_iter4_reg <= icmp_ln666_reg_720_pp1_iter3_reg;
        icmp_ln666_reg_720_pp1_iter5_reg <= icmp_ln666_reg_720_pp1_iter4_reg;
        icmp_ln666_reg_720_pp1_iter6_reg <= icmp_ln666_reg_720_pp1_iter5_reg;
        icmp_ln666_reg_720_pp1_iter7_reg <= icmp_ln666_reg_720_pp1_iter6_reg;
        icmp_ln666_reg_720_pp1_iter8_reg <= icmp_ln666_reg_720_pp1_iter7_reg;
        icmp_ln666_reg_720_pp1_iter9_reg <= icmp_ln666_reg_720_pp1_iter8_reg;
        icmp_ln667_reg_730_pp1_iter2_reg <= icmp_ln667_reg_730;
        icmp_ln667_reg_730_pp1_iter3_reg <= icmp_ln667_reg_730_pp1_iter2_reg;
        icmp_ln667_reg_730_pp1_iter4_reg <= icmp_ln667_reg_730_pp1_iter3_reg;
        icmp_ln667_reg_730_pp1_iter5_reg <= icmp_ln667_reg_730_pp1_iter4_reg;
        icmp_ln667_reg_730_pp1_iter6_reg <= icmp_ln667_reg_730_pp1_iter5_reg;
        icmp_ln667_reg_730_pp1_iter7_reg <= icmp_ln667_reg_730_pp1_iter6_reg;
        icmp_ln667_reg_730_pp1_iter8_reg <= icmp_ln667_reg_730_pp1_iter7_reg;
        icmp_ln667_reg_730_pp1_iter9_reg <= icmp_ln667_reg_730_pp1_iter8_reg;
        icmp_ln669_reg_747_pp1_iter2_reg <= icmp_ln669_reg_747;
        icmp_ln669_reg_747_pp1_iter3_reg <= icmp_ln669_reg_747_pp1_iter2_reg;
        icmp_ln669_reg_747_pp1_iter4_reg <= icmp_ln669_reg_747_pp1_iter3_reg;
        icmp_ln669_reg_747_pp1_iter5_reg <= icmp_ln669_reg_747_pp1_iter4_reg;
        icmp_ln669_reg_747_pp1_iter6_reg <= icmp_ln669_reg_747_pp1_iter5_reg;
        icmp_ln669_reg_747_pp1_iter7_reg <= icmp_ln669_reg_747_pp1_iter6_reg;
        icmp_ln669_reg_747_pp1_iter8_reg <= icmp_ln669_reg_747_pp1_iter7_reg;
        icmp_ln669_reg_747_pp1_iter9_reg <= icmp_ln669_reg_747_pp1_iter8_reg;
        icmp_ln670_reg_757_pp1_iter2_reg <= icmp_ln670_reg_757;
        icmp_ln670_reg_757_pp1_iter3_reg <= icmp_ln670_reg_757_pp1_iter2_reg;
        icmp_ln670_reg_757_pp1_iter4_reg <= icmp_ln670_reg_757_pp1_iter3_reg;
        icmp_ln670_reg_757_pp1_iter5_reg <= icmp_ln670_reg_757_pp1_iter4_reg;
        icmp_ln670_reg_757_pp1_iter6_reg <= icmp_ln670_reg_757_pp1_iter5_reg;
        icmp_ln670_reg_757_pp1_iter7_reg <= icmp_ln670_reg_757_pp1_iter6_reg;
        icmp_ln670_reg_757_pp1_iter8_reg <= icmp_ln670_reg_757_pp1_iter7_reg;
        icmp_ln670_reg_757_pp1_iter9_reg <= icmp_ln670_reg_757_pp1_iter8_reg;
        icmp_ln671_reg_767_pp1_iter2_reg <= icmp_ln671_reg_767;
        icmp_ln671_reg_767_pp1_iter3_reg <= icmp_ln671_reg_767_pp1_iter2_reg;
        icmp_ln671_reg_767_pp1_iter4_reg <= icmp_ln671_reg_767_pp1_iter3_reg;
        icmp_ln671_reg_767_pp1_iter5_reg <= icmp_ln671_reg_767_pp1_iter4_reg;
        icmp_ln671_reg_767_pp1_iter6_reg <= icmp_ln671_reg_767_pp1_iter5_reg;
        icmp_ln671_reg_767_pp1_iter7_reg <= icmp_ln671_reg_767_pp1_iter6_reg;
        icmp_ln671_reg_767_pp1_iter8_reg <= icmp_ln671_reg_767_pp1_iter7_reg;
        icmp_ln671_reg_767_pp1_iter9_reg <= icmp_ln671_reg_767_pp1_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln663_reg_654 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln665_reg_710 <= icmp_ln665_fu_529_p2;
        icmp_ln666_reg_720 <= icmp_ln666_fu_534_p2;
        icmp_ln667_reg_730 <= icmp_ln667_fu_539_p2;
        icmp_ln669_reg_747 <= icmp_ln669_fu_544_p2;
        icmp_ln670_reg_757 <= icmp_ln670_fu_549_p2;
        icmp_ln671_reg_767 <= icmp_ln671_fu_554_p2;
        td_pss_0_imag_load_reg_742 <= td_pss_0_imag_q0;
        td_pss_0_real_load_reg_705 <= td_pss_0_real_q0;
        td_pss_1_imag_load_reg_752 <= td_pss_1_imag_q0;
        td_pss_1_real_load_reg_715 <= td_pss_1_real_q0;
        td_pss_2_imag_load_reg_762 <= td_pss_2_imag_q0;
        td_pss_2_real_load_reg_725 <= td_pss_2_real_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        p_x_assign_1_reg_807 <= grp_fu_349_p2;
        p_x_assign_2_reg_812 <= grp_fu_353_p2;
        p_x_assign_reg_802 <= grp_fu_345_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) | ((icmp_ln663_reg_654_pp1_iter8_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter9 == 1'b1)))) begin
        reg_411 <= grp_fu_357_p2;
        reg_416 <= grp_fu_361_p2;
        reg_421 <= grp_fu_365_p2;
        reg_426 <= grp_fu_369_p2;
        reg_431 <= grp_fu_373_p2;
        reg_436 <= grp_fu_377_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln658_fu_458_p2 == 1'd0))) begin
        IN_I_TDATA_blk_n = IN_I_TVALID_int_regslice;
    end else begin
        IN_I_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((1'b0 == IN_I_TVALID_int_regslice) & (icmp_ln658_fu_458_p2 == 1'd0)) | ((1'b0 == IN_R_TVALID_int_regslice) & (icmp_ln658_fu_458_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln658_fu_458_p2 == 1'd0))) begin
        IN_I_TREADY_int_regslice = 1'b1;
    end else begin
        IN_I_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln658_fu_458_p2 == 1'd0))) begin
        IN_R_TDATA_blk_n = IN_R_TVALID_int_regslice;
    end else begin
        IN_R_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((1'b0 == IN_I_TVALID_int_regslice) & (icmp_ln658_fu_458_p2 == 1'd0)) | ((1'b0 == IN_R_TVALID_int_regslice) & (icmp_ln658_fu_458_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln658_fu_458_p2 == 1'd0))) begin
        IN_R_TREADY_int_regslice = 1'b1;
    end else begin
        IN_R_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        IN_imag_address0 = j_cast_fu_517_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        IN_imag_address0 = i_cast_fu_464_p1;
    end else begin
        IN_imag_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)) | (~(((1'b0 == IN_I_TVALID_int_regslice) & (icmp_ln658_fu_458_p2 == 1'd0)) | ((1'b0 == IN_R_TVALID_int_regslice) & (icmp_ln658_fu_458_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state3)))) begin
        IN_imag_ce0 = 1'b1;
    end else begin
        IN_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(((1'b0 == IN_I_TVALID_int_regslice) & (icmp_ln658_fu_458_p2 == 1'd0)) | ((1'b0 == IN_R_TVALID_int_regslice) & (icmp_ln658_fu_458_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln658_fu_458_p2 == 1'd0))) begin
        IN_imag_we0 = 1'b1;
    end else begin
        IN_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        IN_real_address0 = j_cast_fu_517_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        IN_real_address0 = i_cast_fu_464_p1;
    end else begin
        IN_real_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)) | (~(((1'b0 == IN_I_TVALID_int_regslice) & (icmp_ln658_fu_458_p2 == 1'd0)) | ((1'b0 == IN_R_TVALID_int_regslice) & (icmp_ln658_fu_458_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state3)))) begin
        IN_real_ce0 = 1'b1;
    end else begin
        IN_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(((1'b0 == IN_I_TVALID_int_regslice) & (icmp_ln658_fu_458_p2 == 1'd0)) | ((1'b0 == IN_R_TVALID_int_regslice) & (icmp_ln658_fu_458_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln658_fu_458_p2 == 1'd0))) begin
        IN_real_we0 = 1'b1;
    end else begin
        IN_real_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln663_fu_511_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_out_V_U_apdone_blk == 1'b0) & (icmp_ln648_fu_446_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter13 == 1'b0) & (ap_enable_reg_pp1_iter12 == 1'b0) & (ap_enable_reg_pp1_iter11 == 1'b0) & (ap_enable_reg_pp1_iter10 == 1'b0) & (ap_enable_reg_pp1_iter8 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter14 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter9 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln663_reg_654 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_j_phi_fu_266_p4 = add_ln663_reg_643;
    end else begin
        ap_phi_mux_j_phi_fu_266_p4 = j_reg_262;
    end
end

always @ (*) begin
    if (((regslice_both_out_V_U_apdone_blk == 1'b0) & (icmp_ln648_fu_446_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_357_p0 = acc_0_r_reg_297;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        grp_fu_357_p0 = IN_real_load_reg_698;
    end else begin
        grp_fu_357_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_357_p1 = acc_0_r_reg_297;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        grp_fu_357_p1 = td_pss_0_real_load_reg_705;
    end else begin
        grp_fu_357_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_361_p0 = acc_0_i_reg_333;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        grp_fu_361_p0 = IN_real_load_reg_698;
    end else begin
        grp_fu_361_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_361_p1 = acc_0_i_reg_333;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        grp_fu_361_p1 = td_pss_1_real_load_reg_715;
    end else begin
        grp_fu_361_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_365_p0 = acc_1_r_reg_309;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        grp_fu_365_p0 = IN_real_load_reg_698;
    end else begin
        grp_fu_365_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_365_p1 = acc_1_r_reg_309;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        grp_fu_365_p1 = td_pss_2_real_load_reg_725;
    end else begin
        grp_fu_365_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_369_p0 = acc_1_i_reg_285;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        grp_fu_369_p0 = IN_imag_load_reg_735;
    end else begin
        grp_fu_369_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_369_p1 = acc_1_i_reg_285;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        grp_fu_369_p1 = td_pss_0_imag_load_reg_742;
    end else begin
        grp_fu_369_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_373_p0 = acc_2_r_reg_321;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        grp_fu_373_p0 = IN_imag_load_reg_735;
    end else begin
        grp_fu_373_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_373_p1 = acc_2_r_reg_321;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        grp_fu_373_p1 = td_pss_1_imag_load_reg_752;
    end else begin
        grp_fu_373_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_377_p0 = acc_2_i_reg_273;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        grp_fu_377_p0 = IN_imag_load_reg_735;
    end else begin
        grp_fu_377_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_377_p1 = acc_2_i_reg_273;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        grp_fu_377_p1 = td_pss_2_imag_load_reg_762;
    end else begin
        grp_fu_377_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_pp1_stage0) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | ((1'b1 == ap_CS_fsm_state66) & (out_V_TREADY_int_regslice == 1'b0)))) begin
        grp_fu_393_ce = 1'b0;
    end else begin
        grp_fu_393_ce = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_pp1_stage0) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | ((1'b1 == ap_CS_fsm_state66) & (out_V_TREADY_int_regslice == 1'b0)))) begin
        grp_fu_398_ce = 1'b0;
    end else begin
        grp_fu_398_ce = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_pp1_stage0) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | ((1'b1 == ap_CS_fsm_state66) & (out_V_TREADY_int_regslice == 1'b0)))) begin
        grp_fu_403_ce = 1'b0;
    end else begin
        grp_fu_403_ce = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter10 == 1'b1) & (icmp_ln663_reg_654_pp1_iter9_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        grp_fu_559_in_valid = 1'b1;
    end else begin
        grp_fu_559_in_valid = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter10 == 1'b1) & (icmp_ln663_reg_654_pp1_iter9_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        grp_fu_566_in_valid = 1'b1;
    end else begin
        grp_fu_566_in_valid = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter10 == 1'b1) & (icmp_ln663_reg_654_pp1_iter9_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        grp_fu_573_in_valid = 1'b1;
    end else begin
        grp_fu_573_in_valid = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter10 == 1'b1) & (icmp_ln663_reg_654_pp1_iter9_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        grp_fu_580_in_valid = 1'b1;
    end else begin
        grp_fu_580_in_valid = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter10 == 1'b1) & (icmp_ln663_reg_654_pp1_iter9_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        grp_fu_587_in_valid = 1'b1;
    end else begin
        grp_fu_587_in_valid = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter10 == 1'b1) & (icmp_ln663_reg_654_pp1_iter9_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        grp_fu_594_in_valid = 1'b1;
    end else begin
        grp_fu_594_in_valid = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66))) begin
        out_V_TDATA_blk_n = out_V_TREADY_int_regslice;
    end else begin
        out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state66) & (out_V_TREADY_int_regslice == 1'b1))) begin
        out_V_TVALID_int_regslice = 1'b1;
    end else begin
        out_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        td_pss_0_imag_ce0 = 1'b1;
    end else begin
        td_pss_0_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        td_pss_0_real_ce0 = 1'b1;
    end else begin
        td_pss_0_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        td_pss_1_imag_ce0 = 1'b1;
    end else begin
        td_pss_1_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        td_pss_1_real_ce0 = 1'b1;
    end else begin
        td_pss_1_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        td_pss_2_imag_ce0 = 1'b1;
    end else begin
        td_pss_2_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        td_pss_2_real_ce0 = 1'b1;
    end else begin
        td_pss_2_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((regslice_both_out_V_U_apdone_blk == 1'b0) & (icmp_ln648_fu_446_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((regslice_both_out_V_U_apdone_blk == 1'b0) & (icmp_ln648_fu_446_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~(((1'b0 == IN_I_TVALID_int_regslice) & (icmp_ln658_fu_458_p2 == 1'd0)) | ((1'b0 == IN_R_TVALID_int_regslice) & (icmp_ln658_fu_458_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln658_fu_458_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~(((1'b0 == IN_I_TVALID_int_regslice) & (icmp_ln658_fu_458_p2 == 1'd0)) | ((1'b0 == IN_R_TVALID_int_regslice) & (icmp_ln658_fu_458_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln658_fu_458_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln663_fu_511_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter13 == 1'b0) & (ap_enable_reg_pp1_iter14 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter13 == 1'b0) & (ap_enable_reg_pp1_iter14 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln663_fu_511_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            if (((1'b1 == ap_CS_fsm_state66) & (out_V_TREADY_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end
        end
        ap_ST_fsm_state67 : begin
            if (((1'b1 == ap_CS_fsm_state67) & (out_V_TREADY_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign IN_I_TREADY = regslice_both_IN_I_V_data_V_U_ack_in;

assign IN_R_TREADY = regslice_both_IN_R_V_data_V_U_ack_in;

assign IN_imag_d0 = IN_I_TDATA_int_regslice;

assign IN_real_d0 = IN_R_TDATA_int_regslice;

assign add_ln658_fu_452_p2 = (i_reg_251 + 8'd1);

assign add_ln663_fu_505_p2 = (ap_phi_mux_j_phi_fu_266_p4 + 8'd1);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd52];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp1_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage0_iter14 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3 = (((1'b0 == IN_I_TVALID_int_regslice) & (icmp_ln658_fu_458_p2 == 1'd0)) | ((1'b0 == IN_R_TVALID_int_regslice) & (icmp_ln658_fu_458_p2 == 1'd0)));
end

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln174_1_fu_605_p1 = grp_fu_398_p2;

assign bitcast_ln174_2_fu_609_p1 = grp_fu_403_p2;

assign bitcast_ln174_fu_601_p1 = grp_fu_393_p2;

assign i_cast_fu_464_p1 = i_reg_251;

assign icmp_ln648_fu_446_p2 = ((run_fu_92 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln658_fu_458_p2 = ((i_reg_251 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln663_fu_511_p2 = ((ap_phi_mux_j_phi_fu_266_p4 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln665_fu_529_p2 = ((add_ln663_reg_643 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln666_fu_534_p2 = ((add_ln663_reg_643 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln667_fu_539_p2 = ((add_ln663_reg_643 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln669_fu_544_p2 = ((add_ln663_reg_643 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln670_fu_549_p2 = ((add_ln663_reg_643 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln671_fu_554_p2 = ((add_ln663_reg_643 == 8'd128) ? 1'b1 : 1'b0);

assign j_cast_fu_517_p1 = ap_phi_mux_j_phi_fu_266_p4;

assign out_V_TDATA_int_regslice = {{{bitcast_ln174_2_fu_609_p1}, {bitcast_ln174_1_fu_605_p1}}, {bitcast_ln174_fu_601_p1}};

assign out_V_TVALID = regslice_both_out_V_U_vld_out;

assign run_2_fu_492_p3 = ((IN_R_TLAST_int_regslice[0:0] == 1'b1) ? 32'd0 : run_fu_92);

assign td_pss_0_imag_address0 = j_cast_fu_517_p1;

assign td_pss_0_real_address0 = j_cast_fu_517_p1;

assign td_pss_1_imag_address0 = j_cast_fu_517_p1;

assign td_pss_1_real_address0 = j_cast_fu_517_p1;

assign td_pss_2_imag_address0 = j_cast_fu_517_p1;

assign td_pss_2_real_address0 = j_cast_fu_517_p1;

endmodule //cp_corr_pss_sss
