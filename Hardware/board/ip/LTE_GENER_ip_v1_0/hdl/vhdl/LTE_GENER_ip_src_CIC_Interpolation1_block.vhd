-- ------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\zynqRadioHWSWLTEPBCHGeneratorRFSoC2x2\LTE_GENER_ip_src_CIC_Interpolation1_block
-- Created: 2022-05-23 17:12:00
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- ------------------------------------------------------------
-- 
-- 
-- ------------------------------------------------------------
-- 
-- Module: LTE_GENER_ip_src_CIC_Interpolation1_block
-- Source Path: /LTE_GENER_ip_src_CIC_Interpolation1_block
-- 
-- ------------------------------------------------------------
-- 
-- HDL Implementation    : Fully parallel



LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY LTE_GENER_ip_src_CIC_Interpolation1_block IS
   PORT( clk                             :   IN    std_logic; 
         enb_1_1_1                       :   IN    std_logic; 
         reset_x                         :   IN    std_logic; 
         LTE_GENER_ip_src_CIC_Interpolation1_block_in_re:   IN    std_logic_vector(15 DOWNTO 0); -- sfix16_En15
         LTE_GENER_ip_src_CIC_Interpolation1_block_in_im:   IN    std_logic_vector(15 DOWNTO 0); -- sfix16_En15
         LTE_GENER_ip_src_CIC_Interpolation1_block_out_re:   OUT   std_logic_vector(25 DOWNTO 0); -- sfix26_En15
         LTE_GENER_ip_src_CIC_Interpolation1_block_out_im:   OUT   std_logic_vector(25 DOWNTO 0)  -- sfix26_En15
         );

END LTE_GENER_ip_src_CIC_Interpolation1_block;


----------------------------------------------------------------
--Module Architecture: LTE_GENER_ip_src_CIC_Interpolation1_block
----------------------------------------------------------------
ARCHITECTURE rtl OF LTE_GENER_ip_src_CIC_Interpolation1_block IS
  -- Local Functions
  -- Type Definitions
  -- Constants
  CONSTANT zeroconst_re                   : signed(17 DOWNTO 0) := to_signed(0, 18); -- sfix18_En15
  CONSTANT zeroconst_im                   : signed(17 DOWNTO 0) := to_signed(0, 18); -- sfix18_En15
  -- Signals
  SIGNAL cur_count                        : unsigned(4 DOWNTO 0); -- ufix5
  SIGNAL phase_0                          : std_logic; -- boolean
  SIGNAL input_typeconvert_re             : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL input_typeconvert_im             : signed(15 DOWNTO 0); -- sfix16_En15
  --   -- Section 1 Signals 
  SIGNAL section_in1_re                   : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL section_in1_im                   : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL section_cast1_re                 : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL section_cast1_im                 : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL diff1_re                         : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL diff1_im                         : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL section_out1_re                  : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL section_out1_im                  : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL sub_cast                         : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL sub_cast_1                       : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL sub_temp                         : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL sub_cast_2                       : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL sub_cast_3                       : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL sub_temp_1                       : signed(17 DOWNTO 0); -- sfix18_En15
  --   -- Section 2 Signals 
  SIGNAL section_in2_re                   : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL section_in2_im                   : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL section_cast2_re                 : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL section_cast2_im                 : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL diff2_re                         : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL diff2_im                         : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL section_out2_re                  : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL section_out2_im                  : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL sub_cast_4                       : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL sub_cast_5                       : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL sub_temp_2                       : signed(18 DOWNTO 0); -- sfix19_En15
  SIGNAL sub_cast_6                       : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL sub_cast_7                       : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL sub_temp_3                       : signed(18 DOWNTO 0); -- sfix19_En15
  --   -- Section 3 Signals 
  SIGNAL section_in3_re                   : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL section_in3_im                   : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL diff3_re                         : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL diff3_im                         : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL section_out3_re                  : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL section_out3_im                  : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL sub_cast_8                       : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL sub_cast_9                       : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL sub_temp_4                       : signed(18 DOWNTO 0); -- sfix19_En15
  SIGNAL sub_cast_10                      : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL sub_cast_11                      : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL sub_temp_5                       : signed(18 DOWNTO 0); -- sfix19_En15
  SIGNAL upsampling_re                    : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL upsampling_im                    : signed(17 DOWNTO 0); -- sfix18_En15
  --   -- Section 4 Signals 
  SIGNAL section_in4_re                   : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL section_in4_im                   : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL sum1_re                          : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL sum1_im                          : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL section_out4_re                  : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL section_out4_im                  : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL add_cast                         : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL add_cast_1                       : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL add_temp                         : signed(18 DOWNTO 0); -- sfix19_En15
  SIGNAL add_cast_2                       : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL add_cast_3                       : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL add_temp_1                       : signed(18 DOWNTO 0); -- sfix19_En15
  --   -- Section 5 Signals 
  SIGNAL section_in5_re                   : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL section_in5_im                   : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL section_cast5_re                 : signed(21 DOWNTO 0); -- sfix22_En15
  SIGNAL section_cast5_im                 : signed(21 DOWNTO 0); -- sfix22_En15
  SIGNAL sum2_re                          : signed(21 DOWNTO 0); -- sfix22_En15
  SIGNAL sum2_im                          : signed(21 DOWNTO 0); -- sfix22_En15
  SIGNAL section_out5_re                  : signed(21 DOWNTO 0); -- sfix22_En15
  SIGNAL section_out5_im                  : signed(21 DOWNTO 0); -- sfix22_En15
  SIGNAL add_cast_4                       : signed(21 DOWNTO 0); -- sfix22_En15
  SIGNAL add_cast_5                       : signed(21 DOWNTO 0); -- sfix22_En15
  SIGNAL add_temp_2                       : signed(22 DOWNTO 0); -- sfix23_En15
  SIGNAL add_cast_6                       : signed(21 DOWNTO 0); -- sfix22_En15
  SIGNAL add_cast_7                       : signed(21 DOWNTO 0); -- sfix22_En15
  SIGNAL add_temp_3                       : signed(22 DOWNTO 0); -- sfix23_En15
  --   -- Section 6 Signals 
  SIGNAL section_in6_re                   : signed(21 DOWNTO 0); -- sfix22_En15
  SIGNAL section_in6_im                   : signed(21 DOWNTO 0); -- sfix22_En15
  SIGNAL section_cast6_re                 : signed(25 DOWNTO 0); -- sfix26_En15
  SIGNAL section_cast6_im                 : signed(25 DOWNTO 0); -- sfix26_En15
  SIGNAL sum3_re                          : signed(25 DOWNTO 0); -- sfix26_En15
  SIGNAL sum3_im                          : signed(25 DOWNTO 0); -- sfix26_En15
  SIGNAL section_out6_re                  : signed(25 DOWNTO 0); -- sfix26_En15
  SIGNAL section_out6_im                  : signed(25 DOWNTO 0); -- sfix26_En15
  SIGNAL add_cast_8                       : signed(25 DOWNTO 0); -- sfix26_En15
  SIGNAL add_cast_9                       : signed(25 DOWNTO 0); -- sfix26_En15
  SIGNAL add_temp_4                       : signed(26 DOWNTO 0); -- sfix27_En15
  SIGNAL add_cast_10                      : signed(25 DOWNTO 0); -- sfix26_En15
  SIGNAL add_cast_11                      : signed(25 DOWNTO 0); -- sfix26_En15
  SIGNAL add_temp_5                       : signed(26 DOWNTO 0); -- sfix27_En15
  SIGNAL regout_re                        : signed(25 DOWNTO 0); -- sfix26_En15
  SIGNAL regout_im                        : signed(25 DOWNTO 0); -- sfix26_En15
  SIGNAL muxout_re                        : signed(25 DOWNTO 0); -- sfix26_En15
  SIGNAL muxout_im                        : signed(25 DOWNTO 0); -- sfix26_En15


BEGIN

  -- Block Statements
  --   ------------------ CE Output Generation ------------------

  ce_output : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset_x = '1' THEN
        cur_count <= to_unsigned(0, 5);
      ELSIF enb_1_1_1 = '1' THEN
        IF cur_count >= to_unsigned(31, 5) THEN
          cur_count <= to_unsigned(0, 5);
        ELSE
          cur_count <= cur_count + to_unsigned(1, 5);
        END IF;
      END IF;
    END IF; 
  END PROCESS ce_output;

  phase_0 <= '1' WHEN cur_count = to_unsigned(0, 5) AND enb_1_1_1 = '1' ELSE '0';

  input_typeconvert_re <= signed(LTE_GENER_ip_src_CIC_Interpolation1_block_in_re);
  input_typeconvert_im <= signed(LTE_GENER_ip_src_CIC_Interpolation1_block_in_im);

  --   ------------------ Section # 1 : Comb ------------------

  section_in1_re <= input_typeconvert_re;
  section_in1_im <= input_typeconvert_im;

  section_cast1_re <= resize(section_in1_re, 17);
  section_cast1_im <= resize(section_in1_im, 17);

  sub_cast <= section_cast1_re;
  sub_cast_1 <= diff1_re;
  sub_temp <= resize(sub_cast, 18) - resize(sub_cast_1, 18);
  section_out1_re <= sub_temp(16 DOWNTO 0);

  sub_cast_2 <= section_cast1_im;
  sub_cast_3 <= diff1_im;
  sub_temp_1 <= resize(sub_cast_2, 18) - resize(sub_cast_3, 18);
  section_out1_im <= sub_temp_1(16 DOWNTO 0);

  comb_delay_section1 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset_x = '1' THEN
        diff1_re <= (OTHERS => '0');
        diff1_im <= (OTHERS => '0');
      ELSIF phase_0 = '1' THEN
        diff1_re <= section_cast1_re;
        diff1_im <= section_cast1_im;
      END IF;
    END IF; 
  END PROCESS comb_delay_section1;

  --   ------------------ Section # 2 : Comb ------------------

  section_in2_re <= section_out1_re;
  section_in2_im <= section_out1_im;

  section_cast2_re <= resize(section_in2_re, 18);
  section_cast2_im <= resize(section_in2_im, 18);

  sub_cast_4 <= section_cast2_re;
  sub_cast_5 <= diff2_re;
  sub_temp_2 <= resize(sub_cast_4, 19) - resize(sub_cast_5, 19);
  section_out2_re <= sub_temp_2(17 DOWNTO 0);

  sub_cast_6 <= section_cast2_im;
  sub_cast_7 <= diff2_im;
  sub_temp_3 <= resize(sub_cast_6, 19) - resize(sub_cast_7, 19);
  section_out2_im <= sub_temp_3(17 DOWNTO 0);

  comb_delay_section2 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset_x = '1' THEN
        diff2_re <= (OTHERS => '0');
        diff2_im <= (OTHERS => '0');
      ELSIF phase_0 = '1' THEN
        diff2_re <= section_cast2_re;
        diff2_im <= section_cast2_im;
      END IF;
    END IF; 
  END PROCESS comb_delay_section2;

  --   ------------------ Section # 3 : Comb ------------------

  section_in3_re <= section_out2_re;
  section_in3_im <= section_out2_im;

  sub_cast_8 <= section_in3_re;
  sub_cast_9 <= diff3_re;
  sub_temp_4 <= resize(sub_cast_8, 19) - resize(sub_cast_9, 19);
  section_out3_re <= sub_temp_4(17 DOWNTO 0);

  sub_cast_10 <= section_in3_im;
  sub_cast_11 <= diff3_im;
  sub_temp_5 <= resize(sub_cast_10, 19) - resize(sub_cast_11, 19);
  section_out3_im <= sub_temp_5(17 DOWNTO 0);

  comb_delay_section3 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset_x = '1' THEN
        diff3_re <= (OTHERS => '0');
        diff3_im <= (OTHERS => '0');
      ELSIF phase_0 = '1' THEN
        diff3_re <= section_in3_re;
        diff3_im <= section_in3_im;
      END IF;
    END IF; 
  END PROCESS comb_delay_section3;

  upsampling_re <= section_out3_re WHEN ( phase_0 = '1' ) ELSE
                   zeroconst_re;
  upsampling_im <= section_out3_im WHEN ( phase_0 = '1' ) ELSE
                   zeroconst_im;
  --   ------------------ Section # 4 : Integrator ------------------

  section_in4_re <= upsampling_re;
  section_in4_im <= upsampling_im;

  add_cast <= section_in4_re;
  add_cast_1 <= section_out4_re;
  add_temp <= resize(add_cast, 19) + resize(add_cast_1, 19);
  sum1_re <= add_temp(17 DOWNTO 0);

  add_cast_2 <= section_in4_im;
  add_cast_3 <= section_out4_im;
  add_temp_1 <= resize(add_cast_2, 19) + resize(add_cast_3, 19);
  sum1_im <= add_temp_1(17 DOWNTO 0);

  integrator_delay_section4 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset_x = '1' THEN
        section_out4_re <= (OTHERS => '0');
        section_out4_im <= (OTHERS => '0');
      ELSIF enb_1_1_1 = '1' THEN
        section_out4_re <= sum1_re;
        section_out4_im <= sum1_im;
      END IF;
    END IF; 
  END PROCESS integrator_delay_section4;

  --   ------------------ Section # 5 : Integrator ------------------

  section_in5_re <= section_out4_re;
  section_in5_im <= section_out4_im;

  section_cast5_re <= resize(section_in5_re, 22);
  section_cast5_im <= resize(section_in5_im, 22);

  add_cast_4 <= section_cast5_re;
  add_cast_5 <= section_out5_re;
  add_temp_2 <= resize(add_cast_4, 23) + resize(add_cast_5, 23);
  sum2_re <= add_temp_2(21 DOWNTO 0);

  add_cast_6 <= section_cast5_im;
  add_cast_7 <= section_out5_im;
  add_temp_3 <= resize(add_cast_6, 23) + resize(add_cast_7, 23);
  sum2_im <= add_temp_3(21 DOWNTO 0);

  integrator_delay_section5 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset_x = '1' THEN
        section_out5_re <= (OTHERS => '0');
        section_out5_im <= (OTHERS => '0');
      ELSIF enb_1_1_1 = '1' THEN
        section_out5_re <= sum2_re;
        section_out5_im <= sum2_im;
      END IF;
    END IF; 
  END PROCESS integrator_delay_section5;

  --   ------------------ Section # 6 : Integrator ------------------

  section_in6_re <= section_out5_re;
  section_in6_im <= section_out5_im;

  section_cast6_re <= resize(section_in6_re, 26);
  section_cast6_im <= resize(section_in6_im, 26);

  add_cast_8 <= section_cast6_re;
  add_cast_9 <= section_out6_re;
  add_temp_4 <= resize(add_cast_8, 27) + resize(add_cast_9, 27);
  sum3_re <= add_temp_4(25 DOWNTO 0);

  add_cast_10 <= section_cast6_im;
  add_cast_11 <= section_out6_im;
  add_temp_5 <= resize(add_cast_10, 27) + resize(add_cast_11, 27);
  sum3_im <= add_temp_5(25 DOWNTO 0);

  integrator_delay_section6 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset_x = '1' THEN
        section_out6_re <= (OTHERS => '0');
        section_out6_im <= (OTHERS => '0');
      ELSIF enb_1_1_1 = '1' THEN
        section_out6_re <= sum3_re;
        section_out6_im <= sum3_im;
      END IF;
    END IF; 
  END PROCESS integrator_delay_section6;

  DataHoldRegister_process : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset_x = '1' THEN
        regout_re <= (OTHERS => '0');
        regout_im <= (OTHERS => '0');
      ELSIF enb_1_1_1 = '1' THEN
        regout_re <= section_out6_re;
        regout_im <= section_out6_im;
      END IF;
    END IF; 
  END PROCESS DataHoldRegister_process;

  muxout_re <= section_out6_re WHEN ( enb_1_1_1 = '1' ) ELSE
               regout_re;
  muxout_im <= section_out6_im WHEN ( enb_1_1_1 = '1' ) ELSE
               regout_im;
  -- Assignment Statements
  LTE_GENER_ip_src_CIC_Interpolation1_block_out_re <= std_logic_vector(muxout_re);
  LTE_GENER_ip_src_CIC_Interpolation1_block_out_im <= std_logic_vector(muxout_im);
END rtl;
