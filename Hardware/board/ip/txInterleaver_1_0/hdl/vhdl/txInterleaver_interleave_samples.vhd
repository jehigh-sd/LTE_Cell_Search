-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity txInterleaver_interleave_samples is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    IN_AC_TVALID : IN STD_LOGIC;
    IN_GEN_TVALID : IN STD_LOGIC;
    OUT_DAC_TREADY : IN STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    IN_AC_TDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    IN_AC_TREADY : OUT STD_LOGIC;
    IN_AC_TKEEP : IN STD_LOGIC_VECTOR (31 downto 0);
    IN_AC_TSTRB : IN STD_LOGIC_VECTOR (31 downto 0);
    IN_AC_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    IN_GEN_TDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    IN_GEN_TREADY : OUT STD_LOGIC;
    IN_GEN_TKEEP : IN STD_LOGIC_VECTOR (31 downto 0);
    IN_GEN_TSTRB : IN STD_LOGIC_VECTOR (31 downto 0);
    IN_GEN_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    OUT_DAC_TDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    OUT_DAC_TVALID : OUT STD_LOGIC;
    OUT_DAC_TKEEP : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_DAC_TSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_DAC_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    IN_AC_TDATA_blk_n : OUT STD_LOGIC;
    IN_GEN_TDATA_blk_n : OUT STD_LOGIC;
    OUT_DAC_TDATA_blk_n : OUT STD_LOGIC );
end;


architecture behav of txInterleaver_interleave_samples is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    IN_AC_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, IN_AC_TVALID)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start = ap_const_logic_1))) then 
            IN_AC_TDATA_blk_n <= IN_AC_TVALID;
        else 
            IN_AC_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    IN_AC_TREADY_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start = ap_const_logic_1))) then 
            IN_AC_TREADY <= ap_const_logic_1;
        else 
            IN_AC_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    IN_GEN_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, IN_GEN_TVALID)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start = ap_const_logic_1))) then 
            IN_GEN_TDATA_blk_n <= IN_GEN_TVALID;
        else 
            IN_GEN_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    IN_GEN_TREADY_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start = ap_const_logic_1))) then 
            IN_GEN_TREADY <= ap_const_logic_1;
        else 
            IN_GEN_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    OUT_DAC_TDATA <= IN_GEN_TDATA;

    OUT_DAC_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, OUT_DAC_TREADY)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start = ap_const_logic_1))) then 
            OUT_DAC_TDATA_blk_n <= OUT_DAC_TREADY;
        else 
            OUT_DAC_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    OUT_DAC_TKEEP <= IN_AC_TKEEP;
    OUT_DAC_TLAST <= IN_AC_TLAST;
    OUT_DAC_TSTRB <= IN_AC_TSTRB;

    OUT_DAC_TVALID_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start = ap_const_logic_1))) then 
            OUT_DAC_TVALID <= ap_const_logic_1;
        else 
            OUT_DAC_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, IN_AC_TVALID, IN_GEN_TVALID, OUT_DAC_TREADY)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_start = ap_const_logic_1) and ((ap_const_logic_0 = OUT_DAC_TREADY) or (ap_const_logic_0 = IN_GEN_TVALID) or (ap_const_logic_0 = IN_AC_TVALID)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, IN_AC_TVALID, IN_GEN_TVALID, OUT_DAC_TREADY)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_1) and ((ap_const_logic_0 = OUT_DAC_TREADY) or (ap_const_logic_0 = IN_GEN_TVALID) or (ap_const_logic_0 = IN_AC_TVALID)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, IN_AC_TVALID, IN_GEN_TVALID, OUT_DAC_TREADY, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_1) and ((ap_const_logic_0 = OUT_DAC_TREADY) or (ap_const_logic_0 = IN_GEN_TVALID) or (ap_const_logic_0 = IN_AC_TVALID))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(IN_AC_TVALID, IN_GEN_TVALID, OUT_DAC_TREADY)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_const_logic_0 = OUT_DAC_TREADY) or (ap_const_logic_0 = IN_GEN_TVALID) or (ap_const_logic_0 = IN_AC_TVALID));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
