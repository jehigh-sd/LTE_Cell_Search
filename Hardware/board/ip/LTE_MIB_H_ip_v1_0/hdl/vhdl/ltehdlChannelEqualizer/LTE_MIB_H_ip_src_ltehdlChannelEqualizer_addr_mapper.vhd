-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\zynqRadioHWSWLTEMIBDetectorRFSoC2x2\ltehdlChannelEqualizer\LTE_MIB_H_ip_src_ltehdlChannelEqualizer_addr_mapper.vhd
-- Created: 2022-05-23 17:26:43
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: LTE_MIB_H_ip_src_ltehdlChannelEqualizer_addr_mapper
-- Source Path: ltehdlChannelEqualizer/chEst/hEstInterpAndStore/addr_mapper
-- Hierarchy Level: 6
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
LIBRARY work_ltehdlChannelEqualizer;

ENTITY LTE_MIB_H_ip_src_ltehdlChannelEqualizer_addr_mapper IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        addrBias                          :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        address                           :   IN    std_logic_vector(10 DOWNTO 0);  -- ufix11
        enable                            :   IN    std_logic;
        memory_addr                       :   OUT   std_logic_vector(8 DOWNTO 0);  -- ufix9
        memory_num                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
        enOut                             :   OUT   std_logic
        );
END LTE_MIB_H_ip_src_ltehdlChannelEqualizer_addr_mapper;


ARCHITECTURE rtl OF LTE_MIB_H_ip_src_ltehdlChannelEqualizer_addr_mapper IS

  -- Component Declarations
  COMPONENT LTE_MIB_H_ip_src_ltehdlChannelEqualizer_mod3HDL1
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          addr_in                         :   IN    std_logic_vector(10 DOWNTO 0);  -- ufix11
          quotient                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
          reminder                        :   OUT   std_logic_vector(15 DOWNTO 0)  -- uint16
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : LTE_MIB_H_ip_src_ltehdlChannelEqualizer_mod3HDL1
    USE ENTITY work_ltehdlChannelEqualizer.LTE_MIB_H_ip_src_ltehdlChannelEqualizer_mod3HDL1(rtl);

  -- Signals
  SIGNAL address_unsigned                 : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL addrBias_unsigned                : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Add_out1                         : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL mod3HDL1_out1                    : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL mod3HDL1_out2                    : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL mod3HDL1_out1_unsigned           : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Data_Type_Conversion_out1        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Delay1_out1                      : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Constant1_out1                   : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Add1_out1                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL mod3HDL1_out2_unsigned           : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Delay3_out1                      : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Delay4_reg                       : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Delay2_out1                      : std_logic;

BEGIN
  u_mod3HDL1 : LTE_MIB_H_ip_src_ltehdlChannelEqualizer_mod3HDL1
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              addr_in => std_logic_vector(Add_out1),  -- ufix11
              quotient => mod3HDL1_out1,  -- uint16
              reminder => mod3HDL1_out2  -- uint16
              );

  address_unsigned <= unsigned(address);

  addrBias_unsigned <= unsigned(addrBias);

  Add_out1 <= address_unsigned + resize(addrBias_unsigned, 11);

  mod3HDL1_out1_unsigned <= unsigned(mod3HDL1_out1);

  Data_Type_Conversion_out1 <= mod3HDL1_out1_unsigned(8 DOWNTO 0);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1 <= to_unsigned(16#000#, 9);
      ELSIF enb_1_2_0 = '1' THEN
        Delay1_out1 <= Data_Type_Conversion_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Constant1_out1 <= to_unsigned(16#001#, 9);

  Add1_out1 <= Delay1_out1 + Constant1_out1;

  memory_addr <= std_logic_vector(Add1_out1);

  mod3HDL1_out2_unsigned <= unsigned(mod3HDL1_out2);

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1 <= to_unsigned(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        Delay3_out1 <= mod3HDL1_out2_unsigned;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  memory_num <= std_logic_vector(Delay3_out1);

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        Delay4_reg(0) <= enable;
        Delay4_reg(1 TO 7) <= Delay4_reg(0 TO 6);
      END IF;
    END IF;
  END PROCESS Delay4_process;

  Delay4_out1 <= Delay4_reg(7);

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Delay2_out1 <= Delay4_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  enOut <= Delay2_out1;

END rtl;

