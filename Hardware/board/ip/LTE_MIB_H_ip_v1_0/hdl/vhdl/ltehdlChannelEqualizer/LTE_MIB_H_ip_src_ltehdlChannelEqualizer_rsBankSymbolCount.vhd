-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\zynqRadioHWSWLTEMIBDetectorRFSoC2x2\ltehdlChannelEqualizer\LTE_MIB_H_ip_src_ltehdlChannelEqualizer_rsBankSymbolCount.vhd
-- Created: 2022-05-23 17:26:43
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: LTE_MIB_H_ip_src_ltehdlChannelEqualizer_rsBankSymbolCount
-- Source Path: ltehdlChannelEqualizer/rsBankSymbolCount
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
LIBRARY work_ltehdlChannelEqualizer;

ENTITY LTE_MIB_H_ip_src_ltehdlChannelEqualizer_rsBankSymbolCount IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        rsValid                           :   IN    std_logic;
        reset                             :   IN    std_logic;
        rsBank                            :   OUT   std_logic_vector(3 DOWNTO 0);  -- ufix4
        rsCount                           :   OUT   std_logic_vector(8 DOWNTO 0)  -- ufix9
        );
END LTE_MIB_H_ip_src_ltehdlChannelEqualizer_rsBankSymbolCount;


ARCHITECTURE rtl OF LTE_MIB_H_ip_src_ltehdlChannelEqualizer_rsBankSymbolCount IS

  -- Component Declarations
  COMPONENT LTE_MIB_H_ip_src_ltehdlChannelEqualizer_Detect_Rise_Positive
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : LTE_MIB_H_ip_src_ltehdlChannelEqualizer_Detect_Rise_Positive
    USE ENTITY work_ltehdlChannelEqualizer.LTE_MIB_H_ip_src_ltehdlChannelEqualizer_Detect_Rise_Positive(rtl);

  -- Signals
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 20);  -- ufix1 [21]
  SIGNAL stateControl_2                   : std_logic;
  SIGNAL enb_1_2_0_gated                  : std_logic;
  SIGNAL count_step                       : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL count_from                       : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL count_reset                      : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL rsCount_1                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL count                            : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL need_to_wrap                     : std_logic;
  SIGNAL count_value                      : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL count_1                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL fullOFDMSymb                     : std_logic;
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL OR_out1                          : std_logic;
  SIGNAL count_2                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL fullOFDMSymb_1                   : std_logic;
  SIGNAL Detect_Rise_Positive_out1        : std_logic;
  SIGNAL count_step_1                     : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL count_from_1                     : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL count_reset_1                    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Symb_Counter_out1                : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL count_3                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL need_to_wrap_1                   : std_logic;
  SIGNAL count_value_1                    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL count_4                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL count_5                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Constant4_out1                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Constant5_out1                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Constant6_out1                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Constant7_out1                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Constant8_out1                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Constant9_out1                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL rsBank_1                         : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Delay1_out1                      : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL rsCount_tmp                      : unsigned(8 DOWNTO 0);  -- ufix9

BEGIN
  u_Detect_Rise_Positive : LTE_MIB_H_ip_src_ltehdlChannelEqualizer_Detect_Rise_Positive
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              U => fullOFDMSymb_1,
              Y => Detect_Rise_Positive_out1
              );

  stateControl_1 <= '1';

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        delayMatch_reg(0) <= stateControl_1;
        delayMatch_reg(1 TO 20) <= delayMatch_reg(0 TO 19);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  stateControl_2 <= delayMatch_reg(20);

  enb_1_2_0_gated <= stateControl_2 AND enb_1_2_0;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 440
  count_step <= to_unsigned(16#001#, 9);

  count_from <= to_unsigned(16#000#, 9);

  count_reset <= to_unsigned(16#000#, 9);

  count <= rsCount_1 + count_step;

  
  need_to_wrap <= '1' WHEN rsCount_1 = to_unsigned(16#1B8#, 9) ELSE
      '0';

  
  count_value <= count WHEN need_to_wrap = '0' ELSE
      count_from;

  
  count_1 <= rsCount_1 WHEN rsValid = '0' ELSE
      count_value;

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1 <= '0';
      ELSIF enb_1_2_0_gated = '1' THEN
        Delay2_out1 <= fullOFDMSymb;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  OR_out1 <= Delay2_out1 OR reset;

  
  count_2 <= count_1 WHEN OR_out1 = '0' ELSE
      count_reset;

  RS_Counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rsCount_1 <= to_unsigned(16#000#, 9);
      ELSIF enb_1_2_0 = '1' THEN
        rsCount_1 <= count_2;
      END IF;
    END IF;
  END PROCESS RS_Counter_process;


  
  fullOFDMSymb <= '1' WHEN rsCount_1 = to_unsigned(16#1B8#, 9) ELSE
      '0';

  fullOFDMSymb_1 <= fullOFDMSymb;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 5
  count_step_1 <= to_unsigned(16#1#, 3);

  count_from_1 <= to_unsigned(16#0#, 3);

  count_reset_1 <= to_unsigned(16#0#, 3);

  count_3 <= Symb_Counter_out1 + count_step_1;

  
  need_to_wrap_1 <= '1' WHEN Symb_Counter_out1 = to_unsigned(16#5#, 3) ELSE
      '0';

  
  count_value_1 <= count_3 WHEN need_to_wrap_1 = '0' ELSE
      count_from_1;

  
  count_4 <= Symb_Counter_out1 WHEN Detect_Rise_Positive_out1 = '0' ELSE
      count_value_1;

  
  count_5 <= count_4 WHEN reset = '0' ELSE
      count_reset_1;

  Symb_Counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Symb_Counter_out1 <= to_unsigned(16#0#, 3);
      ELSIF enb_1_2_0 = '1' THEN
        Symb_Counter_out1 <= count_5;
      END IF;
    END IF;
  END PROCESS Symb_Counter_process;


  Constant4_out1 <= to_unsigned(16#0#, 4);

  Constant5_out1 <= to_unsigned(16#1#, 4);

  Constant6_out1 <= to_unsigned(16#4#, 4);

  Constant7_out1 <= to_unsigned(16#7#, 4);

  Constant8_out1 <= to_unsigned(16#8#, 4);

  Constant9_out1 <= to_unsigned(16#B#, 4);

  
  rsBank_1 <= Constant4_out1 WHEN Symb_Counter_out1 = to_unsigned(16#0#, 3) ELSE
      Constant5_out1 WHEN Symb_Counter_out1 = to_unsigned(16#1#, 3) ELSE
      Constant6_out1 WHEN Symb_Counter_out1 = to_unsigned(16#2#, 3) ELSE
      Constant7_out1 WHEN Symb_Counter_out1 = to_unsigned(16#3#, 3) ELSE
      Constant8_out1 WHEN Symb_Counter_out1 = to_unsigned(16#4#, 3) ELSE
      Constant9_out1;

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1 <= to_unsigned(16#0#, 4);
      ELSIF enb_1_2_0 = '1' THEN
        Delay1_out1 <= rsBank_1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  rsBank <= std_logic_vector(Delay1_out1);

  rsCount_tmp <= rsCount_1;

  rsCount <= std_logic_vector(rsCount_tmp);

END rtl;

