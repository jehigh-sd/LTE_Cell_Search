-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\zynqRadioHWSWLTEMIBDetectorRFSoC2x2\ltehdlChannelEqualizer\LTE_MIB_H_ip_src_ltehdlChannelEqualizer_Gold_Sequence_Generator.vhd
-- Created: 2022-05-23 17:26:43
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: LTE_MIB_H_ip_src_ltehdlChannelEqualizer_Gold_Sequence_Generator
-- Source Path: ltehdlChannelEqualizer/ cellRefGen/LTE Gold Seq upsampling/Gold Sequence Generator
-- Hierarchy Level: 6
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
LIBRARY work_ltehdlChannelEqualizer;

ENTITY LTE_MIB_H_ip_src_ltehdlChannelEqualizer_Gold_Sequence_Generator IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        Load                              :   IN    std_logic;
        Init                              :   IN    std_logic_vector(30 DOWNTO 0);  -- ufix31
        enable                            :   IN    std_logic;
        Out2                              :   OUT   std_logic;
        Out1                              :   OUT   std_logic
        );
END LTE_MIB_H_ip_src_ltehdlChannelEqualizer_Gold_Sequence_Generator;


ARCHITECTURE rtl OF LTE_MIB_H_ip_src_ltehdlChannelEqualizer_Gold_Sequence_Generator IS

  -- Component Declarations
  COMPONENT LTE_MIB_H_ip_src_ltehdlChannelEqualizer_SetFF
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          D                               :   IN    std_logic;
          Q                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT LTE_MIB_H_ip_src_ltehdlChannelEqualizer_LFSR1
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          Load                            :   IN    std_logic;
          getDimension                    :   IN    std_logic_vector(30 DOWNTO 0);  -- ufix31
          Enable                          :   IN    std_logic;
          Out1                            :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT LTE_MIB_H_ip_src_ltehdlChannelEqualizer_LFSR2
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          Load                            :   IN    std_logic;
          Init                            :   IN    std_logic_vector(30 DOWNTO 0);  -- ufix31
          Enable                          :   IN    std_logic;
          Out1                            :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : LTE_MIB_H_ip_src_ltehdlChannelEqualizer_SetFF
    USE ENTITY work_ltehdlChannelEqualizer.LTE_MIB_H_ip_src_ltehdlChannelEqualizer_SetFF(rtl);

  FOR ALL : LTE_MIB_H_ip_src_ltehdlChannelEqualizer_LFSR1
    USE ENTITY work_ltehdlChannelEqualizer.LTE_MIB_H_ip_src_ltehdlChannelEqualizer_LFSR1(rtl);

  FOR ALL : LTE_MIB_H_ip_src_ltehdlChannelEqualizer_LFSR2
    USE ENTITY work_ltehdlChannelEqualizer.LTE_MIB_H_ip_src_ltehdlChannelEqualizer_LFSR2(rtl);

  -- Signals
  SIGNAL Delay5_reg                       : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay5_out1                      : std_logic;
  SIGNAL SetFF_out1                       : std_logic;
  SIGNAL Logical_Operator6_out1           : std_logic;
  SIGNAL Logical_Operator4_out1           : std_logic;
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Logical_Operator5_out1           : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL Logical_Operator3_out1           : std_logic;
  SIGNAL LFSR1_out1                       : std_logic;  -- ufix1
  SIGNAL Init_unsigned                    : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL Delay4_out1                      : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL LFSR2_out1                       : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1           : std_logic;
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Delay2_ectrl                     : std_logic;
  SIGNAL Delay3_out1                      : std_logic;

BEGIN
  u_SetFF : LTE_MIB_H_ip_src_ltehdlChannelEqualizer_SetFF
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              D => Load,
              Q => SetFF_out1
              );

  u_LFSR1 : LTE_MIB_H_ip_src_ltehdlChannelEqualizer_LFSR1
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              Load => Delay1_out1,
              getDimension => Init,  -- ufix31
              Enable => Logical_Operator3_out1,
              Out1 => LFSR1_out1  -- ufix1
              );

  u_LFSR2 : LTE_MIB_H_ip_src_ltehdlChannelEqualizer_LFSR2
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              Load => Delay1_out1,
              Init => std_logic_vector(Delay4_out1),  -- ufix31
              Enable => Logical_Operator3_out1,
              Out1 => LFSR2_out1  -- ufix1
              );

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay5_reg(0) <= enable;
        Delay5_reg(1) <= Delay5_reg(0);
      END IF;
    END IF;
  END PROCESS Delay5_process;

  Delay5_out1 <= Delay5_reg(1);

  Logical_Operator6_out1 <= Delay5_out1 AND SetFF_out1;

  Logical_Operator4_out1 <=  NOT Load;

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay1_out1 <= Load;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Logical_Operator5_out1 <=  NOT Delay1_out1;

  Logical_Operator1_out1 <= Logical_Operator5_out1 AND (Logical_Operator6_out1 AND Logical_Operator4_out1);

  Logical_Operator3_out1 <= Logical_Operator1_out1 OR Delay1_out1;

  Init_unsigned <= unsigned(Init);

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_out1 <= to_unsigned(16#00000000#, 31);
      ELSIF enb = '1' THEN
        Delay4_out1 <= Init_unsigned;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Logical_Operator2_out1 <= LFSR1_out1 XOR LFSR2_out1;

  
  Delay2_ectrl <= Delay2_out1 WHEN Logical_Operator1_out1 = '0' ELSE
      Logical_Operator2_out1;

  Delay2_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay2_out1 <= Delay2_ectrl;
      END IF;
    END IF;
  END PROCESS Delay2_lowered_process;


  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay3_out1 <= Logical_Operator1_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Out2 <= Delay2_out1;

  Out1 <= Delay3_out1;

END rtl;

