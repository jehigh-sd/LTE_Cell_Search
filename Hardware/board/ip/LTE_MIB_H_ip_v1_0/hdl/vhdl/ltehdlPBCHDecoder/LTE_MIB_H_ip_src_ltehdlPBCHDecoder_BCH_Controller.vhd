-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\zynqRadioHWSWLTEMIBDetectorRFSoC2x2\ltehdlPBCHDecoder\LTE_MIB_H_ip_src_ltehdlPBCHDecoder_BCH_Controller.vhd
-- Created: 2022-05-23 17:26:45
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: LTE_MIB_H_ip_src_ltehdlPBCHDecoder_BCH_Controller
-- Source Path: ltehdlPBCHDecoder/BCH Decoder/BCH Controller
-- Hierarchy Level: 5
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
LIBRARY work_ltehdlPBCHDecoder;

ENTITY LTE_MIB_H_ip_src_ltehdlPBCHDecoder_BCH_Controller IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        data                              :   IN    std_logic;
        ctrl_start                        :   IN    std_logic;  -- record {boolean,boolean,boolean}
        ctrl_end                          :   IN    std_logic;  -- record {boolean,boolean,boolean}
        ctrl_valid                        :   IN    std_logic;  -- record {boolean,boolean,boolean}
        crcErr                            :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        clearReg                          :   IN    std_logic;
        dataOut                           :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
        repeatQPSK                        :   OUT   std_logic;
        MIBDetected                       :   OUT   std_logic;
        restartMIB                        :   OUT   std_logic;
        nfmod4                            :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        cellRefP                          :   OUT   std_logic_vector(2 DOWNTO 0)  -- ufix3
        );
END LTE_MIB_H_ip_src_ltehdlPBCHDecoder_BCH_Controller;


ARCHITECTURE rtl OF LTE_MIB_H_ip_src_ltehdlPBCHDecoder_BCH_Controller IS

  -- Component Declarations
  COMPONENT LTE_MIB_H_ip_src_ltehdlPBCHDecoder_MIB_Data_Buffer
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn                          :   IN    std_logic;
          ctrlIn_start                    :   IN    std_logic;  -- record {boolean,boolean,boolean}
          ctrlIn_end                      :   IN    std_logic;  -- record {boolean,boolean,boolean}
          ctrlIn_valid                    :   IN    std_logic;  -- record {boolean,boolean,boolean}
          dataOut                         :   OUT   std_logic_vector(23 DOWNTO 0)  -- ufix24
          );
  END COMPONENT;

  COMPONENT LTE_MIB_H_ip_src_ltehdlPBCHDecoder_BCHControllerCore
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          ctrlIn_start                    :   IN    std_logic;  -- record {boolean,boolean,boolean}
          ctrlIn_end                      :   IN    std_logic;  -- record {boolean,boolean,boolean}
          ctrlIn_valid                    :   IN    std_logic;  -- record {boolean,boolean,boolean}
          crcmask                         :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          clearReg                        :   IN    std_logic;
          repeat_QPSK                     :   OUT   std_logic;
          MIB_detected                    :   OUT   std_logic;
          restart_MIB                     :   OUT   std_logic;
          nfmod4                          :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          cellrefp                        :   OUT   std_logic_vector(2 DOWNTO 0)  -- ufix3
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_MIB_Data_Buffer
    USE ENTITY work_ltehdlPBCHDecoder.LTE_MIB_H_ip_src_ltehdlPBCHDecoder_MIB_Data_Buffer(rtl);

  FOR ALL : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_BCHControllerCore
    USE ENTITY work_ltehdlPBCHDecoder.LTE_MIB_H_ip_src_ltehdlPBCHDecoder_BCHControllerCore(rtl);

  -- Signals
  SIGNAL dataOut_tmp                      : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL repeat_QPSK                      : std_logic;
  SIGNAL MIB_detected                     : std_logic;
  SIGNAL restart_MIB                      : std_logic;
  SIGNAL nfmod4_1                         : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL cellrefp_1                       : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL stateControl                     : std_logic;
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL enb_gated                        : std_logic;
  SIGNAL Delay8_out1                      : std_logic;
  SIGNAL stateControl_2                   : std_logic;
  SIGNAL delayMatch1_reg                  : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL stateControl_3                   : std_logic;
  SIGNAL enb_gated_1                      : std_logic;
  SIGNAL Delay7_out1                      : std_logic;
  SIGNAL stateControl_5                   : std_logic;
  SIGNAL delayMatch2_reg                  : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL stateControl_6                   : std_logic;
  SIGNAL enb_gated_2                      : std_logic;
  SIGNAL Delay11_out1                     : std_logic;
  SIGNAL nfmod4_unsigned                  : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL stateControl_7                   : std_logic;
  SIGNAL delayMatch3_reg                  : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL stateControl_8                   : std_logic;
  SIGNAL enb_gated_3                      : std_logic;
  SIGNAL Delay14_out1                     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Switch_out1                      : unsigned(1 DOWNTO 0);  -- ufix2

BEGIN
  u_MIB_Data_Buffer : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_MIB_Data_Buffer
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => data,
              ctrlIn_start => ctrl_start,  -- record {boolean,boolean,boolean}
              ctrlIn_end => ctrl_end,  -- record {boolean,boolean,boolean}
              ctrlIn_valid => ctrl_valid,  -- record {boolean,boolean,boolean}
              dataOut => dataOut_tmp  -- ufix24
              );

  u_BCHControllerCore : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_BCHControllerCore
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              ctrlIn_start => ctrl_start,  -- record {boolean,boolean,boolean}
              ctrlIn_end => ctrl_end,  -- record {boolean,boolean,boolean}
              ctrlIn_valid => ctrl_valid,  -- record {boolean,boolean,boolean}
              crcmask => crcErr,  -- uint16
              clearReg => clearReg,
              repeat_QPSK => repeat_QPSK,
              MIB_detected => MIB_detected,
              restart_MIB => restart_MIB,
              nfmod4 => nfmod4_1,  -- ufix2
              cellrefp => cellrefp_1  -- ufix3
              );

  stateControl <= '1';

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch_reg(0) <= stateControl;
        delayMatch_reg(1 TO 41) <= delayMatch_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  stateControl_1 <= delayMatch_reg(41);

  enb_gated <= stateControl_1 AND enb;

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_out1 <= '0';
      ELSIF enb_gated = '1' THEN
        Delay8_out1 <= repeat_QPSK;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  stateControl_2 <= '1';

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch1_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch1_reg(0) <= stateControl_2;
        delayMatch1_reg(1 TO 41) <= delayMatch1_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  stateControl_3 <= delayMatch1_reg(41);

  enb_gated_1 <= stateControl_3 AND enb;

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_out1 <= '0';
      ELSIF enb_gated_1 = '1' THEN
        Delay7_out1 <= MIB_detected;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  stateControl_5 <= '1';

  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch2_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch2_reg(0) <= stateControl_5;
        delayMatch2_reg(1 TO 41) <= delayMatch2_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  stateControl_6 <= delayMatch2_reg(41);

  enb_gated_2 <= stateControl_6 AND enb;

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay11_out1 <= '0';
      ELSIF enb_gated_2 = '1' THEN
        Delay11_out1 <= restart_MIB;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  nfmod4_unsigned <= unsigned(nfmod4_1);

  stateControl_7 <= '1';

  delayMatch3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch3_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch3_reg(0) <= stateControl_7;
        delayMatch3_reg(1 TO 41) <= delayMatch3_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch3_process;

  stateControl_8 <= delayMatch3_reg(41);

  enb_gated_3 <= stateControl_8 AND enb;

  
  Switch_out1 <= Delay14_out1 WHEN MIB_detected = '0' ELSE
      nfmod4_unsigned;

  Delay14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay14_out1 <= to_unsigned(16#0#, 2);
      ELSIF enb_gated_3 = '1' THEN
        Delay14_out1 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS Delay14_process;


  nfmod4 <= std_logic_vector(Delay14_out1);

  dataOut <= dataOut_tmp;

  repeatQPSK <= Delay8_out1;

  MIBDetected <= Delay7_out1;

  restartMIB <= Delay11_out1;

  cellRefP <= cellrefp_1;

END rtl;

