-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\zynqRadioHWSWLTEMIBDetectorRFSoC2x2\ltehdlPBCHDecoder\LTE_MIB_H_ip_src_ltehdlPBCHDecoder_PBCH_Rate_Recovery.vhd
-- Created: 2022-05-23 17:26:45
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: LTE_MIB_H_ip_src_ltehdlPBCHDecoder_PBCH_Rate_Recovery
-- Source Path: ltehdlPBCHDecoder/PBCH Rate Recovery
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
LIBRARY work_ltehdlPBCHDecoder;
USE work.LTE_MIB_H_ip_src_ltehdlPBCHDecoder_ltehdlPBCHDecoder_pac.ALL;

ENTITY LTE_MIB_H_ip_src_ltehdlPBCHDecoder_PBCH_Rate_Recovery IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        data                              :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
        enb_1                             :   IN    std_logic;
        rateRecovered_0                   :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
        rateRecovered_1                   :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
        rateRecovered_2                   :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
        validOut                          :   OUT   std_logic
        );
END LTE_MIB_H_ip_src_ltehdlPBCHDecoder_PBCH_Rate_Recovery;


ARCHITECTURE rtl OF LTE_MIB_H_ip_src_ltehdlPBCHDecoder_PBCH_Rate_Recovery IS

  -- Component Declarations
  COMPONENT LTE_MIB_H_ip_src_ltehdlPBCHDecoder_rateRecovery
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          u1                              :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          enb_1                           :   IN    std_logic;
          y_0                             :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
          y_1                             :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
          y_2                             :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_rateRecovery
    USE ENTITY work_ltehdlPBCHDecoder.LTE_MIB_H_ip_src_ltehdlPBCHDecoder_rateRecovery(rtl);

  -- Signals
  SIGNAL data_signed                      : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL stateControl_2                   : std_logic;
  SIGNAL enb_gated                        : std_logic;
  SIGNAL Delay1_reg                       : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Delay1_out1                      : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL stateControl_3                   : std_logic;
  SIGNAL delayMatch1_reg                  : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL stateControl_4                   : std_logic;
  SIGNAL enb_gated_1                      : std_logic;
  SIGNAL Delay4_reg                       : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL y_0                              : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL y_1                              : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL y_2                              : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL validOut_1                       : std_logic;
  SIGNAL y_0_signed                       : signed(19 DOWNTO 0);  -- sfix20_En17
  SIGNAL stateControl_5                   : std_logic;
  SIGNAL delayMatch2_reg                  : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL stateControl_6                   : std_logic;
  SIGNAL enb_gated_2                      : std_logic;
  SIGNAL Delay2_1_reg                     : vector_of_signed20(0 TO 1);  -- sfix20 [2]
  SIGNAL Delay2_out_1                     : signed(19 DOWNTO 0);  -- sfix20_En17
  SIGNAL y_1_signed                       : signed(19 DOWNTO 0);  -- sfix20_En17
  SIGNAL Delay2_2_reg                     : vector_of_signed20(0 TO 1);  -- sfix20 [2]
  SIGNAL Delay2_out_2                     : signed(19 DOWNTO 0);  -- sfix20_En17
  SIGNAL y_2_signed                       : signed(19 DOWNTO 0);  -- sfix20_En17
  SIGNAL Delay2_3_reg                     : vector_of_signed20(0 TO 1);  -- sfix20 [2]
  SIGNAL Delay2_out_3                     : signed(19 DOWNTO 0);  -- sfix20_En17
  SIGNAL stateControl_7                   : std_logic;
  SIGNAL delayMatch3_reg                  : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL stateControl_8                   : std_logic;
  SIGNAL enb_gated_3                      : std_logic;
  SIGNAL Delay3_reg                       : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay3_out1                      : std_logic;

BEGIN
  u_rateRecovery : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_rateRecovery
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              u1 => std_logic_vector(Delay1_out1),  -- sfix18_En17
              enb_1 => Delay4_out1,
              y_0 => y_0,  -- sfix20_En17
              y_1 => y_1,  -- sfix20_En17
              y_2 => y_2,  -- sfix20_En17
              validOut => validOut_1
              );

  data_signed <= signed(data);

  stateControl_1 <= '1';

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch_reg(0) <= stateControl_1;
        delayMatch_reg(1 TO 41) <= delayMatch_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  stateControl_2 <= delayMatch_reg(41);

  enb_gated <= stateControl_2 AND enb;

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_reg <= (OTHERS => to_signed(16#00000#, 18));
      ELSIF enb_gated = '1' THEN
        Delay1_reg(0) <= data_signed;
        Delay1_reg(1) <= Delay1_reg(0);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(1);

  stateControl_3 <= '1';

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch1_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch1_reg(0) <= stateControl_3;
        delayMatch1_reg(1 TO 41) <= delayMatch1_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  stateControl_4 <= delayMatch1_reg(41);

  enb_gated_1 <= stateControl_4 AND enb;

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_reg <= (OTHERS => '0');
      ELSIF enb_gated_1 = '1' THEN
        Delay4_reg(0) <= enb_1;
        Delay4_reg(1) <= Delay4_reg(0);
      END IF;
    END IF;
  END PROCESS Delay4_process;

  Delay4_out1 <= Delay4_reg(1);

  y_0_signed <= signed(y_0);

  stateControl_5 <= '1';

  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch2_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch2_reg(0) <= stateControl_5;
        delayMatch2_reg(1 TO 41) <= delayMatch2_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  stateControl_6 <= delayMatch2_reg(41);

  enb_gated_2 <= stateControl_6 AND enb;

  Delay2_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_1_reg <= (OTHERS => to_signed(16#00000#, 20));
      ELSIF enb_gated_2 = '1' THEN
        Delay2_1_reg(0) <= y_0_signed;
        Delay2_1_reg(1) <= Delay2_1_reg(0);
      END IF;
    END IF;
  END PROCESS Delay2_1_process;

  Delay2_out_1 <= Delay2_1_reg(1);

  rateRecovered_0 <= std_logic_vector(Delay2_out_1);

  y_1_signed <= signed(y_1);

  Delay2_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_2_reg <= (OTHERS => to_signed(16#00000#, 20));
      ELSIF enb_gated_2 = '1' THEN
        Delay2_2_reg(0) <= y_1_signed;
        Delay2_2_reg(1) <= Delay2_2_reg(0);
      END IF;
    END IF;
  END PROCESS Delay2_2_process;

  Delay2_out_2 <= Delay2_2_reg(1);

  rateRecovered_1 <= std_logic_vector(Delay2_out_2);

  y_2_signed <= signed(y_2);

  Delay2_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_3_reg <= (OTHERS => to_signed(16#00000#, 20));
      ELSIF enb_gated_2 = '1' THEN
        Delay2_3_reg(0) <= y_2_signed;
        Delay2_3_reg(1) <= Delay2_3_reg(0);
      END IF;
    END IF;
  END PROCESS Delay2_3_process;

  Delay2_out_3 <= Delay2_3_reg(1);

  rateRecovered_2 <= std_logic_vector(Delay2_out_3);

  stateControl_7 <= '1';

  delayMatch3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch3_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch3_reg(0) <= stateControl_7;
        delayMatch3_reg(1 TO 41) <= delayMatch3_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch3_process;

  stateControl_8 <= delayMatch3_reg(41);

  enb_gated_3 <= stateControl_8 AND enb;

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_reg <= (OTHERS => '0');
      ELSIF enb_gated_3 = '1' THEN
        Delay3_reg(0) <= validOut_1;
        Delay3_reg(1) <= Delay3_reg(0);
      END IF;
    END IF;
  END PROCESS Delay3_process;

  Delay3_out1 <= Delay3_reg(1);

  validOut <= Delay3_out1;

END rtl;

