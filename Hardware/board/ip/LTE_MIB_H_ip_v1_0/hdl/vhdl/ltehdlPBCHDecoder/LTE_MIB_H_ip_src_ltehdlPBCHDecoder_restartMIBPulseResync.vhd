-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\zynqRadioHWSWLTEMIBDetectorRFSoC2x2\ltehdlPBCHDecoder\LTE_MIB_H_ip_src_ltehdlPBCHDecoder_restartMIBPulseResync.vhd
-- Created: 2022-05-23 17:26:45
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: LTE_MIB_H_ip_src_ltehdlPBCHDecoder_restartMIBPulseResync
-- Source Path: ltehdlPBCHDecoder/restartMIBPulseResync
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY LTE_MIB_H_ip_src_ltehdlPBCHDecoder_restartMIBPulseResync IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        enb_1_2_1                         :   IN    std_logic;
        p                                 :   IN    std_logic;
        q                                 :   OUT   std_logic
        );
END LTE_MIB_H_ip_src_ltehdlPBCHDecoder_restartMIBPulseResync;


ARCHITECTURE rtl OF LTE_MIB_H_ip_src_ltehdlPBCHDecoder_restartMIBPulseResync IS

  -- Signals
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL stateControl_2                   : std_logic;
  SIGNAL enb_gated                        : std_logic;
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Downsample_bypass_reg            : std_logic;  -- ufix1
  SIGNAL Downsample_out1                  : std_logic;
  SIGNAL stateControl_3                   : std_logic;
  SIGNAL delayMatch1_reg                  : std_logic_vector(0 TO 20);  -- ufix1 [21]
  SIGNAL stateControl_4                   : std_logic;
  SIGNAL enb_1_2_0_gated                  : std_logic;
  SIGNAL Delay5_out1                      : std_logic;
  SIGNAL stateControl_5                   : std_logic;
  SIGNAL delayMatch2_reg                  : std_logic_vector(0 TO 20);  -- ufix1 [21]
  SIGNAL stateControl_6                   : std_logic;
  SIGNAL enb_1_2_0_gated_1                : std_logic;
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;

BEGIN
  stateControl_1 <= '1';

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch_reg(0) <= stateControl_1;
        delayMatch_reg(1 TO 41) <= delayMatch_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  stateControl_2 <= delayMatch_reg(41);

  enb_gated <= stateControl_2 AND enb;

  Logical_Operator_out1 <= Delay1_out1 XOR p;

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1 <= '0';
      ELSIF enb_gated = '1' THEN
        Delay1_out1 <= Logical_Operator_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  -- Downsample: Downsample by 2, Sample offset 0 
  -- Downsample bypass register
  Downsample_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Downsample_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Downsample_bypass_reg <= Delay1_out1;
      END IF;
    END IF;
  END PROCESS Downsample_bypass_process;

  
  Downsample_out1 <= Delay1_out1 WHEN enb_1_2_1 = '1' ELSE
      Downsample_bypass_reg;

  stateControl_3 <= '1';

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch1_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        delayMatch1_reg(0) <= stateControl_3;
        delayMatch1_reg(1 TO 20) <= delayMatch1_reg(0 TO 19);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  stateControl_4 <= delayMatch1_reg(20);

  enb_1_2_0_gated <= stateControl_4 AND enb_1_2_0;

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_out1 <= '0';
      ELSIF enb_1_2_0_gated = '1' THEN
        Delay5_out1 <= Downsample_out1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  stateControl_5 <= '1';

  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch2_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        delayMatch2_reg(0) <= stateControl_5;
        delayMatch2_reg(1 TO 20) <= delayMatch2_reg(0 TO 19);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  stateControl_6 <= delayMatch2_reg(20);

  enb_1_2_0_gated_1 <= stateControl_6 AND enb_1_2_0;

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1 <= '0';
      ELSIF enb_1_2_0_gated_1 = '1' THEN
        Delay2_out1 <= Delay5_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Logical_Operator1_out1 <= Delay5_out1 XOR Delay2_out1;

  q <= Logical_Operator1_out1;

END rtl;

