-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\zynqRadioHWSWLTEMIBDetectorRFSoC2x2\ltehdlPBCHDecoder\LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Rounding_Symmetric_Saturation.vhd
-- Created: 2022-05-23 17:26:45
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Rounding_Symmetric_Saturation
-- Source Path: ltehdlPBCHDecoder/BCH Decoder/softBitScalingUnit/Apply Scaling/Rounding Symmetric Saturation
-- Hierarchy Level: 7
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.LTE_MIB_H_ip_src_ltehdlPBCHDecoder_ltehdlPBCHDecoder_pac.ALL;

ENTITY LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Rounding_Symmetric_Saturation IS
  PORT( dataScaled_0                      :   IN    std_logic_vector(29 DOWNTO 0);  -- ufix30
        dataScaled_1                      :   IN    std_logic_vector(29 DOWNTO 0);  -- ufix30
        dataScaled_2                      :   IN    std_logic_vector(29 DOWNTO 0);  -- ufix30
        validIn                           :   IN    std_logic;
        dataInDT_0                        :   IN    std_logic_vector(19 DOWNTO 0);  -- ufix20
        dataInDT_1                        :   IN    std_logic_vector(19 DOWNTO 0);  -- ufix20
        dataInDT_2                        :   IN    std_logic_vector(19 DOWNTO 0);  -- ufix20
        dataOut_0                         :   OUT   std_logic_vector(3 DOWNTO 0);  -- sfix4_En1
        dataOut_1                         :   OUT   std_logic_vector(3 DOWNTO 0);  -- sfix4_En1
        dataOut_2                         :   OUT   std_logic_vector(3 DOWNTO 0)  -- sfix4_En1
        );
END LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Rounding_Symmetric_Saturation;


ARCHITECTURE rtl OF LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Rounding_Symmetric_Saturation IS

  -- Signals
  SIGNAL dataScaled                       : vector_of_signed30(0 TO 2);  -- sfix30_En24 [3]
  SIGNAL dataInDT                         : vector_of_signed20(0 TO 2);  -- sfix20_En17 [3]
  SIGNAL dataOut_3                        : vector_of_signed4(0 TO 2);  -- sfix4_En1 [3]

BEGIN
  dataScaled(0) <= signed(dataScaled_0);
  dataScaled(1) <= signed(dataScaled_1);
  dataScaled(2) <= signed(dataScaled_2);

  dataInDT(0) <= signed(dataInDT_0);
  dataInDT(1) <= signed(dataInDT_1);
  dataInDT(2) <= signed(dataInDT_2);

  Rounding_Symmetric_Saturation_output : PROCESS (dataScaled, validIn)
    VARIABLE dataOut : vector_of_signed4(0 TO 2);
    VARIABLE add_temp : signed(3 DOWNTO 0);
  BEGIN
    add_temp := to_signed(16#0#, 4);
    ------------------------------------------------------------------------------
    -- Constants
    ------------------------------------------------------------------------------
    -- Number of output bits
    -- LSBs to delete relative to original input data
    -- Define data out data type
    -- Lowest possible input value
    -- Lower limit to saturate to
    ------------------------------------------------------------------------------
    -- Calculate output
    ------------------------------------------------------------------------------
    IF validIn = '1' THEN 
      -- Change any instances of the lowest possible input
      -- value to the lower saturation limit.

      FOR k IN 0 TO 2 LOOP
        IF ((dataScaled(k)(29) = '0') AND (dataScaled(k)(28 DOWNTO 26) /= "000")) OR ((dataScaled(k)(29) = '0') AND (dataScaled(k)(26 DOWNTO 23) = "0111")) THEN 
          add_temp := "0111";
        ELSIF (dataScaled(k)(29) = '1') AND (dataScaled(k)(28 DOWNTO 26) /= "111") THEN 
          add_temp := "1000";
        ELSE 
          add_temp := dataScaled(k)(26 DOWNTO 23) + ('0' & (dataScaled(k)(22) AND (( NOT dataScaled(k)(29)) OR (dataScaled(k)(21) OR dataScaled(k)(20) OR dataScaled(k)(19) OR dataScaled(k)(18) OR dataScaled(k)(17) OR dataScaled(k)(16) OR dataScaled(k)(15) OR dataScaled(k)(14) OR dataScaled(k)(13) OR dataScaled(k)(12) OR dataScaled(k)(11) OR dataScaled(k)(10) OR dataScaled(k)(9) OR dataScaled(k)(8) OR dataScaled(k)(7) OR dataScaled(k)(6) OR dataScaled(k)(5) OR dataScaled(k)(4) OR dataScaled(k)(3) OR dataScaled(k)(2) OR dataScaled(k)(1) OR dataScaled(k)(0)))));
        END IF;
        dataOut(k) := add_temp;
        IF add_temp = to_signed(-16#8#, 4) THEN 
          dataOut(k) := to_signed(-16#7#, 4);
        END IF;
      END LOOP;

    ELSE 
      dataOut := (OTHERS => to_signed(16#0#, 4));
    END IF;
    dataOut_3 <= dataOut;
  END PROCESS Rounding_Symmetric_Saturation_output;


  dataOut_0 <= std_logic_vector(dataOut_3(0));

  dataOut_1 <= std_logic_vector(dataOut_3(1));

  dataOut_2 <= std_logic_vector(dataOut_3(2));

END rtl;

