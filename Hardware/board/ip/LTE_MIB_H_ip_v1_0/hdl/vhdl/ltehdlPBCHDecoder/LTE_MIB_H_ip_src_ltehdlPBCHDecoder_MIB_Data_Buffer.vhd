-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\zynqRadioHWSWLTEMIBDetectorRFSoC2x2\ltehdlPBCHDecoder\LTE_MIB_H_ip_src_ltehdlPBCHDecoder_MIB_Data_Buffer.vhd
-- Created: 2022-05-23 17:26:45
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: LTE_MIB_H_ip_src_ltehdlPBCHDecoder_MIB_Data_Buffer
-- Source Path: ltehdlPBCHDecoder/BCH Decoder/BCH Controller/MIB Data Buffer
-- Hierarchy Level: 6
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY LTE_MIB_H_ip_src_ltehdlPBCHDecoder_MIB_Data_Buffer IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn                            :   IN    std_logic;
        ctrlIn_start                      :   IN    std_logic;
        ctrlIn_end                        :   IN    std_logic;
        ctrlIn_valid                      :   IN    std_logic;
        dataOut                           :   OUT   std_logic_vector(23 DOWNTO 0)  -- ufix24
        );
END LTE_MIB_H_ip_src_ltehdlPBCHDecoder_MIB_Data_Buffer;


ARCHITECTURE rtl OF LTE_MIB_H_ip_src_ltehdlPBCHDecoder_MIB_Data_Buffer IS

  -- Signals
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL stateControl_2                   : std_logic;
  SIGNAL enb_gated                        : std_logic;
  SIGNAL dataOut_1                        : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL dBuffer                          : std_logic_vector(0 TO 23);  -- ufix1 [24]
  SIGNAL dBuffer_next                     : std_logic_vector(0 TO 23);  -- ufix1 [24]
  SIGNAL dataOut_bypass                   : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL dataOut_last_value               : unsigned(23 DOWNTO 0);  -- ufix24

BEGIN
  stateControl_1 <= '1';

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch_reg(0) <= stateControl_1;
        delayMatch_reg(1 TO 41) <= delayMatch_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  stateControl_2 <= delayMatch_reg(41);

  enb_gated <= stateControl_2 AND enb;

  MIB_Data_Buffer_process : PROCESS (clk)
    VARIABLE t_1 : INTEGER;
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN

        FOR t_1 IN 0 TO 23 LOOP
          dBuffer(t_1) <= '0';
        END LOOP;

      ELSIF enb_gated = '1' THEN

        FOR t_0 IN 0 TO 23 LOOP
          dBuffer(t_0) <= dBuffer_next(t_0);
        END LOOP;

      END IF;
    END IF;
  END PROCESS MIB_Data_Buffer_process;

  MIB_Data_Buffer_output : PROCESS (ctrlIn_valid, dBuffer, dataIn)
  BEGIN

    FOR t_1 IN 0 TO 23 LOOP
      dBuffer_next(t_1) <= dBuffer(t_1);
    END LOOP;

    IF ctrlIn_valid = '1' THEN 

      FOR t_0 IN 0 TO 22 LOOP
        dBuffer_next(1 + t_0) <= dBuffer(t_0);
      END LOOP;

      dBuffer_next(0) <= dataIn;
    END IF;
    dataOut_1 <= unsigned'(dBuffer(0) & dBuffer(1) & dBuffer(2) & dBuffer(3) & dBuffer(4) & dBuffer(5) & dBuffer(6) & dBuffer(7) & dBuffer(8) & dBuffer(9) & dBuffer(10) & dBuffer(11) & dBuffer(12) & dBuffer(13) & dBuffer(14) & dBuffer(15) & dBuffer(16) & dBuffer(17) & dBuffer(18) & dBuffer(19) & dBuffer(20) & dBuffer(21) & dBuffer(22) & dBuffer(23));
  END PROCESS MIB_Data_Buffer_output;


  out0_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dataOut_last_value <= to_unsigned(16#000000#, 24);
      ELSIF enb_gated = '1' THEN
        dataOut_last_value <= dataOut_bypass;
      END IF;
    END IF;
  END PROCESS out0_bypass_process;


  
  dataOut_bypass <= dataOut_last_value WHEN stateControl_2 = '0' ELSE
      dataOut_1;

  dataOut <= std_logic_vector(dataOut_bypass);

END rtl;

