-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\zynqRadioHWSWLTEMIBDetectorRFSoC2x2\ltehdlPBCHDecoder\LTE_MIB_H_ip_src_ltehdlPBCHDecoder_ConvolutionalDecoderMetricComputer.vhd
-- Created: 2022-05-23 17:26:45
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: LTE_MIB_H_ip_src_ltehdlPBCHDecoder_ConvolutionalDecoderMetricComputer
-- Source Path: 
-- Hierarchy Level: 6
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.LTE_MIB_H_ip_src_ltehdlPBCHDecoder_ltehdlPBCHDecoder_pac.ALL;

ENTITY LTE_MIB_H_ip_src_ltehdlPBCHDecoder_ConvolutionalDecoderMetricComputer IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        varargout_1_0                     :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        varargout_1_1                     :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        varargout_1_2                     :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        varargout_2                       :   IN    std_logic;
        varargout_3                       :   IN    std_logic;
        varargout_4                       :   IN    std_logic;
        varargout_1_0_1                   :   OUT   std_logic;
        varargout_1_1_1                   :   OUT   std_logic;
        varargout_1_2_1                   :   OUT   std_logic;
        varargout_1_3                     :   OUT   std_logic;
        varargout_1_4                     :   OUT   std_logic;
        varargout_1_5                     :   OUT   std_logic;
        varargout_1_6                     :   OUT   std_logic;
        varargout_1_7                     :   OUT   std_logic;
        varargout_1_8                     :   OUT   std_logic;
        varargout_1_9                     :   OUT   std_logic;
        varargout_1_10                    :   OUT   std_logic;
        varargout_1_11                    :   OUT   std_logic;
        varargout_1_12                    :   OUT   std_logic;
        varargout_1_13                    :   OUT   std_logic;
        varargout_1_14                    :   OUT   std_logic;
        varargout_1_15                    :   OUT   std_logic;
        varargout_1_16                    :   OUT   std_logic;
        varargout_1_17                    :   OUT   std_logic;
        varargout_1_18                    :   OUT   std_logic;
        varargout_1_19                    :   OUT   std_logic;
        varargout_1_20                    :   OUT   std_logic;
        varargout_1_21                    :   OUT   std_logic;
        varargout_1_22                    :   OUT   std_logic;
        varargout_1_23                    :   OUT   std_logic;
        varargout_1_24                    :   OUT   std_logic;
        varargout_1_25                    :   OUT   std_logic;
        varargout_1_26                    :   OUT   std_logic;
        varargout_1_27                    :   OUT   std_logic;
        varargout_1_28                    :   OUT   std_logic;
        varargout_1_29                    :   OUT   std_logic;
        varargout_1_30                    :   OUT   std_logic;
        varargout_1_31                    :   OUT   std_logic;
        varargout_1_32                    :   OUT   std_logic;
        varargout_1_33                    :   OUT   std_logic;
        varargout_1_34                    :   OUT   std_logic;
        varargout_1_35                    :   OUT   std_logic;
        varargout_1_36                    :   OUT   std_logic;
        varargout_1_37                    :   OUT   std_logic;
        varargout_1_38                    :   OUT   std_logic;
        varargout_1_39                    :   OUT   std_logic;
        varargout_1_40                    :   OUT   std_logic;
        varargout_1_41                    :   OUT   std_logic;
        varargout_1_42                    :   OUT   std_logic;
        varargout_1_43                    :   OUT   std_logic;
        varargout_1_44                    :   OUT   std_logic;
        varargout_1_45                    :   OUT   std_logic;
        varargout_1_46                    :   OUT   std_logic;
        varargout_1_47                    :   OUT   std_logic;
        varargout_1_48                    :   OUT   std_logic;
        varargout_1_49                    :   OUT   std_logic;
        varargout_1_50                    :   OUT   std_logic;
        varargout_1_51                    :   OUT   std_logic;
        varargout_1_52                    :   OUT   std_logic;
        varargout_1_53                    :   OUT   std_logic;
        varargout_1_54                    :   OUT   std_logic;
        varargout_1_55                    :   OUT   std_logic;
        varargout_1_56                    :   OUT   std_logic;
        varargout_1_57                    :   OUT   std_logic;
        varargout_1_58                    :   OUT   std_logic;
        varargout_1_59                    :   OUT   std_logic;
        varargout_1_60                    :   OUT   std_logic;
        varargout_1_61                    :   OUT   std_logic;
        varargout_1_62                    :   OUT   std_logic;
        varargout_1_63                    :   OUT   std_logic;
        varargout_2_1                     :   OUT   std_logic;
        varargout_3_1                     :   OUT   std_logic;
        varargout_4_1                     :   OUT   std_logic;
        varargout_5                       :   OUT   std_logic_vector(5 DOWNTO 0);  -- ufix6
        varargout_6                       :   OUT   std_logic
        );
END LTE_MIB_H_ip_src_ltehdlPBCHDecoder_ConvolutionalDecoderMetricComputer;


ARCHITECTURE rtl OF LTE_MIB_H_ip_src_ltehdlPBCHDecoder_ConvolutionalDecoderMetricComputer IS

  -- Constants
  CONSTANT nc                             : std_logic_vector(0 TO 23) := 
    ('0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '1', '1', '0', '0', '1', '1', '0', '1', '0', '1', '0', '1',
     '0', '1');  -- boolean [24]
  CONSTANT nc_2                           : vector_of_signed8(0 TO 63) := 
    (to_signed(16#00#, 8), to_signed(16#02#, 8), to_signed(16#04#, 8), to_signed(16#06#, 8), to_signed(16#08#, 8),
     to_signed(16#0A#, 8), to_signed(16#0C#, 8), to_signed(16#0E#, 8), to_signed(16#10#, 8), to_signed(16#12#, 8),
     to_signed(16#14#, 8), to_signed(16#16#, 8), to_signed(16#18#, 8), to_signed(16#1A#, 8), to_signed(16#1C#, 8),
     to_signed(16#1E#, 8), to_signed(16#20#, 8), to_signed(16#22#, 8), to_signed(16#24#, 8), to_signed(16#26#, 8),
     to_signed(16#28#, 8), to_signed(16#2A#, 8), to_signed(16#2C#, 8), to_signed(16#2E#, 8), to_signed(16#30#, 8),
     to_signed(16#32#, 8), to_signed(16#34#, 8), to_signed(16#36#, 8), to_signed(16#38#, 8), to_signed(16#3A#, 8),
     to_signed(16#3C#, 8), to_signed(16#3E#, 8), to_signed(16#00#, 8), to_signed(16#02#, 8), to_signed(16#04#, 8),
     to_signed(16#06#, 8), to_signed(16#08#, 8), to_signed(16#0A#, 8), to_signed(16#0C#, 8), to_signed(16#0E#, 8),
     to_signed(16#10#, 8), to_signed(16#12#, 8), to_signed(16#14#, 8), to_signed(16#16#, 8), to_signed(16#18#, 8),
     to_signed(16#1A#, 8), to_signed(16#1C#, 8), to_signed(16#1E#, 8), to_signed(16#20#, 8), to_signed(16#22#, 8),
     to_signed(16#24#, 8), to_signed(16#26#, 8), to_signed(16#28#, 8), to_signed(16#2A#, 8), to_signed(16#2C#, 8),
     to_signed(16#2E#, 8), to_signed(16#30#, 8), to_signed(16#32#, 8), to_signed(16#34#, 8), to_signed(16#36#, 8),
     to_signed(16#38#, 8), to_signed(16#3A#, 8), to_signed(16#3C#, 8), to_signed(16#3E#, 8));  -- int8 [64]
  CONSTANT nc_0                           : vector_of_signed8(0 TO 63) := 
    (to_signed(16#00#, 8), to_signed(16#04#, 8), to_signed(16#01#, 8), to_signed(16#05#, 8), to_signed(16#06#, 8),
     to_signed(16#02#, 8), to_signed(16#07#, 8), to_signed(16#03#, 8), to_signed(16#07#, 8), to_signed(16#03#, 8),
     to_signed(16#06#, 8), to_signed(16#02#, 8), to_signed(16#01#, 8), to_signed(16#05#, 8), to_signed(16#00#, 8),
     to_signed(16#04#, 8), to_signed(16#03#, 8), to_signed(16#07#, 8), to_signed(16#02#, 8), to_signed(16#06#, 8),
     to_signed(16#05#, 8), to_signed(16#01#, 8), to_signed(16#04#, 8), to_signed(16#00#, 8), to_signed(16#04#, 8),
     to_signed(16#00#, 8), to_signed(16#05#, 8), to_signed(16#01#, 8), to_signed(16#02#, 8), to_signed(16#06#, 8),
     to_signed(16#03#, 8), to_signed(16#07#, 8), to_signed(16#07#, 8), to_signed(16#03#, 8), to_signed(16#06#, 8),
     to_signed(16#02#, 8), to_signed(16#01#, 8), to_signed(16#05#, 8), to_signed(16#00#, 8), to_signed(16#04#, 8),
     to_signed(16#00#, 8), to_signed(16#04#, 8), to_signed(16#01#, 8), to_signed(16#05#, 8), to_signed(16#06#, 8),
     to_signed(16#02#, 8), to_signed(16#07#, 8), to_signed(16#03#, 8), to_signed(16#04#, 8), to_signed(16#00#, 8),
     to_signed(16#05#, 8), to_signed(16#01#, 8), to_signed(16#02#, 8), to_signed(16#06#, 8), to_signed(16#03#, 8),
     to_signed(16#07#, 8), to_signed(16#03#, 8), to_signed(16#07#, 8), to_signed(16#02#, 8), to_signed(16#06#, 8),
     to_signed(16#05#, 8), to_signed(16#01#, 8), to_signed(16#04#, 8), to_signed(16#00#, 8));  -- int8 [64]
  CONSTANT nc_1_1                         : vector_of_signed8(0 TO 63) := 
    (to_signed(16#01#, 8), to_signed(16#03#, 8), to_signed(16#05#, 8), to_signed(16#07#, 8), to_signed(16#09#, 8),
     to_signed(16#0B#, 8), to_signed(16#0D#, 8), to_signed(16#0F#, 8), to_signed(16#11#, 8), to_signed(16#13#, 8),
     to_signed(16#15#, 8), to_signed(16#17#, 8), to_signed(16#19#, 8), to_signed(16#1B#, 8), to_signed(16#1D#, 8),
     to_signed(16#1F#, 8), to_signed(16#21#, 8), to_signed(16#23#, 8), to_signed(16#25#, 8), to_signed(16#27#, 8),
     to_signed(16#29#, 8), to_signed(16#2B#, 8), to_signed(16#2D#, 8), to_signed(16#2F#, 8), to_signed(16#31#, 8),
     to_signed(16#33#, 8), to_signed(16#35#, 8), to_signed(16#37#, 8), to_signed(16#39#, 8), to_signed(16#3B#, 8),
     to_signed(16#3D#, 8), to_signed(16#3F#, 8), to_signed(16#01#, 8), to_signed(16#03#, 8), to_signed(16#05#, 8),
     to_signed(16#07#, 8), to_signed(16#09#, 8), to_signed(16#0B#, 8), to_signed(16#0D#, 8), to_signed(16#0F#, 8),
     to_signed(16#11#, 8), to_signed(16#13#, 8), to_signed(16#15#, 8), to_signed(16#17#, 8), to_signed(16#19#, 8),
     to_signed(16#1B#, 8), to_signed(16#1D#, 8), to_signed(16#1F#, 8), to_signed(16#21#, 8), to_signed(16#23#, 8),
     to_signed(16#25#, 8), to_signed(16#27#, 8), to_signed(16#29#, 8), to_signed(16#2B#, 8), to_signed(16#2D#, 8),
     to_signed(16#2F#, 8), to_signed(16#31#, 8), to_signed(16#33#, 8), to_signed(16#35#, 8), to_signed(16#37#, 8),
     to_signed(16#39#, 8), to_signed(16#3B#, 8), to_signed(16#3D#, 8), to_signed(16#3F#, 8));  -- int8 [64]
  CONSTANT nc_2_1                         : vector_of_signed8(0 TO 63) := 
    (to_signed(16#07#, 8), to_signed(16#03#, 8), to_signed(16#06#, 8), to_signed(16#02#, 8), to_signed(16#01#, 8),
     to_signed(16#05#, 8), to_signed(16#00#, 8), to_signed(16#04#, 8), to_signed(16#00#, 8), to_signed(16#04#, 8),
     to_signed(16#01#, 8), to_signed(16#05#, 8), to_signed(16#06#, 8), to_signed(16#02#, 8), to_signed(16#07#, 8),
     to_signed(16#03#, 8), to_signed(16#04#, 8), to_signed(16#00#, 8), to_signed(16#05#, 8), to_signed(16#01#, 8),
     to_signed(16#02#, 8), to_signed(16#06#, 8), to_signed(16#03#, 8), to_signed(16#07#, 8), to_signed(16#03#, 8),
     to_signed(16#07#, 8), to_signed(16#02#, 8), to_signed(16#06#, 8), to_signed(16#05#, 8), to_signed(16#01#, 8),
     to_signed(16#04#, 8), to_signed(16#00#, 8), to_signed(16#00#, 8), to_signed(16#04#, 8), to_signed(16#01#, 8),
     to_signed(16#05#, 8), to_signed(16#06#, 8), to_signed(16#02#, 8), to_signed(16#07#, 8), to_signed(16#03#, 8),
     to_signed(16#07#, 8), to_signed(16#03#, 8), to_signed(16#06#, 8), to_signed(16#02#, 8), to_signed(16#01#, 8),
     to_signed(16#05#, 8), to_signed(16#00#, 8), to_signed(16#04#, 8), to_signed(16#03#, 8), to_signed(16#07#, 8),
     to_signed(16#02#, 8), to_signed(16#06#, 8), to_signed(16#05#, 8), to_signed(16#01#, 8), to_signed(16#04#, 8),
     to_signed(16#00#, 8), to_signed(16#04#, 8), to_signed(16#00#, 8), to_signed(16#05#, 8), to_signed(16#01#, 8),
     to_signed(16#02#, 8), to_signed(16#06#, 8), to_signed(16#03#, 8), to_signed(16#07#, 8));  -- int8 [64]
  CONSTANT nc_4                           : vector_of_signed8(0 TO 63) := 
    (to_signed(16#00#, 8), to_signed(16#02#, 8), to_signed(16#04#, 8), to_signed(16#06#, 8), to_signed(16#08#, 8),
     to_signed(16#0A#, 8), to_signed(16#0C#, 8), to_signed(16#0E#, 8), to_signed(16#10#, 8), to_signed(16#12#, 8),
     to_signed(16#14#, 8), to_signed(16#16#, 8), to_signed(16#18#, 8), to_signed(16#1A#, 8), to_signed(16#1C#, 8),
     to_signed(16#1E#, 8), to_signed(16#20#, 8), to_signed(16#22#, 8), to_signed(16#24#, 8), to_signed(16#26#, 8),
     to_signed(16#28#, 8), to_signed(16#2A#, 8), to_signed(16#2C#, 8), to_signed(16#2E#, 8), to_signed(16#30#, 8),
     to_signed(16#32#, 8), to_signed(16#34#, 8), to_signed(16#36#, 8), to_signed(16#38#, 8), to_signed(16#3A#, 8),
     to_signed(16#3C#, 8), to_signed(16#3E#, 8), to_signed(16#00#, 8), to_signed(16#02#, 8), to_signed(16#04#, 8),
     to_signed(16#06#, 8), to_signed(16#08#, 8), to_signed(16#0A#, 8), to_signed(16#0C#, 8), to_signed(16#0E#, 8),
     to_signed(16#10#, 8), to_signed(16#12#, 8), to_signed(16#14#, 8), to_signed(16#16#, 8), to_signed(16#18#, 8),
     to_signed(16#1A#, 8), to_signed(16#1C#, 8), to_signed(16#1E#, 8), to_signed(16#20#, 8), to_signed(16#22#, 8),
     to_signed(16#24#, 8), to_signed(16#26#, 8), to_signed(16#28#, 8), to_signed(16#2A#, 8), to_signed(16#2C#, 8),
     to_signed(16#2E#, 8), to_signed(16#30#, 8), to_signed(16#32#, 8), to_signed(16#34#, 8), to_signed(16#36#, 8),
     to_signed(16#38#, 8), to_signed(16#3A#, 8), to_signed(16#3C#, 8), to_signed(16#3E#, 8));  -- int8 [64]
  CONSTANT nc_0_2                         : vector_of_signed8(0 TO 63) := 
    (to_signed(16#00#, 8), to_signed(16#04#, 8), to_signed(16#01#, 8), to_signed(16#05#, 8), to_signed(16#06#, 8),
     to_signed(16#02#, 8), to_signed(16#07#, 8), to_signed(16#03#, 8), to_signed(16#07#, 8), to_signed(16#03#, 8),
     to_signed(16#06#, 8), to_signed(16#02#, 8), to_signed(16#01#, 8), to_signed(16#05#, 8), to_signed(16#00#, 8),
     to_signed(16#04#, 8), to_signed(16#03#, 8), to_signed(16#07#, 8), to_signed(16#02#, 8), to_signed(16#06#, 8),
     to_signed(16#05#, 8), to_signed(16#01#, 8), to_signed(16#04#, 8), to_signed(16#00#, 8), to_signed(16#04#, 8),
     to_signed(16#00#, 8), to_signed(16#05#, 8), to_signed(16#01#, 8), to_signed(16#02#, 8), to_signed(16#06#, 8),
     to_signed(16#03#, 8), to_signed(16#07#, 8), to_signed(16#07#, 8), to_signed(16#03#, 8), to_signed(16#06#, 8),
     to_signed(16#02#, 8), to_signed(16#01#, 8), to_signed(16#05#, 8), to_signed(16#00#, 8), to_signed(16#04#, 8),
     to_signed(16#00#, 8), to_signed(16#04#, 8), to_signed(16#01#, 8), to_signed(16#05#, 8), to_signed(16#06#, 8),
     to_signed(16#02#, 8), to_signed(16#07#, 8), to_signed(16#03#, 8), to_signed(16#04#, 8), to_signed(16#00#, 8),
     to_signed(16#05#, 8), to_signed(16#01#, 8), to_signed(16#02#, 8), to_signed(16#06#, 8), to_signed(16#03#, 8),
     to_signed(16#07#, 8), to_signed(16#03#, 8), to_signed(16#07#, 8), to_signed(16#02#, 8), to_signed(16#06#, 8),
     to_signed(16#05#, 8), to_signed(16#01#, 8), to_signed(16#04#, 8), to_signed(16#00#, 8));  -- int8 [64]
  CONSTANT nc_1_3                         : vector_of_signed8(0 TO 63) := 
    (to_signed(16#01#, 8), to_signed(16#03#, 8), to_signed(16#05#, 8), to_signed(16#07#, 8), to_signed(16#09#, 8),
     to_signed(16#0B#, 8), to_signed(16#0D#, 8), to_signed(16#0F#, 8), to_signed(16#11#, 8), to_signed(16#13#, 8),
     to_signed(16#15#, 8), to_signed(16#17#, 8), to_signed(16#19#, 8), to_signed(16#1B#, 8), to_signed(16#1D#, 8),
     to_signed(16#1F#, 8), to_signed(16#21#, 8), to_signed(16#23#, 8), to_signed(16#25#, 8), to_signed(16#27#, 8),
     to_signed(16#29#, 8), to_signed(16#2B#, 8), to_signed(16#2D#, 8), to_signed(16#2F#, 8), to_signed(16#31#, 8),
     to_signed(16#33#, 8), to_signed(16#35#, 8), to_signed(16#37#, 8), to_signed(16#39#, 8), to_signed(16#3B#, 8),
     to_signed(16#3D#, 8), to_signed(16#3F#, 8), to_signed(16#01#, 8), to_signed(16#03#, 8), to_signed(16#05#, 8),
     to_signed(16#07#, 8), to_signed(16#09#, 8), to_signed(16#0B#, 8), to_signed(16#0D#, 8), to_signed(16#0F#, 8),
     to_signed(16#11#, 8), to_signed(16#13#, 8), to_signed(16#15#, 8), to_signed(16#17#, 8), to_signed(16#19#, 8),
     to_signed(16#1B#, 8), to_signed(16#1D#, 8), to_signed(16#1F#, 8), to_signed(16#21#, 8), to_signed(16#23#, 8),
     to_signed(16#25#, 8), to_signed(16#27#, 8), to_signed(16#29#, 8), to_signed(16#2B#, 8), to_signed(16#2D#, 8),
     to_signed(16#2F#, 8), to_signed(16#31#, 8), to_signed(16#33#, 8), to_signed(16#35#, 8), to_signed(16#37#, 8),
     to_signed(16#39#, 8), to_signed(16#3B#, 8), to_signed(16#3D#, 8), to_signed(16#3F#, 8));  -- int8 [64]
  CONSTANT nc_2_3                         : vector_of_signed8(0 TO 63) := 
    (to_signed(16#07#, 8), to_signed(16#03#, 8), to_signed(16#06#, 8), to_signed(16#02#, 8), to_signed(16#01#, 8),
     to_signed(16#05#, 8), to_signed(16#00#, 8), to_signed(16#04#, 8), to_signed(16#00#, 8), to_signed(16#04#, 8),
     to_signed(16#01#, 8), to_signed(16#05#, 8), to_signed(16#06#, 8), to_signed(16#02#, 8), to_signed(16#07#, 8),
     to_signed(16#03#, 8), to_signed(16#04#, 8), to_signed(16#00#, 8), to_signed(16#05#, 8), to_signed(16#01#, 8),
     to_signed(16#02#, 8), to_signed(16#06#, 8), to_signed(16#03#, 8), to_signed(16#07#, 8), to_signed(16#03#, 8),
     to_signed(16#07#, 8), to_signed(16#02#, 8), to_signed(16#06#, 8), to_signed(16#05#, 8), to_signed(16#01#, 8),
     to_signed(16#04#, 8), to_signed(16#00#, 8), to_signed(16#00#, 8), to_signed(16#04#, 8), to_signed(16#01#, 8),
     to_signed(16#05#, 8), to_signed(16#06#, 8), to_signed(16#02#, 8), to_signed(16#07#, 8), to_signed(16#03#, 8),
     to_signed(16#07#, 8), to_signed(16#03#, 8), to_signed(16#06#, 8), to_signed(16#02#, 8), to_signed(16#01#, 8),
     to_signed(16#05#, 8), to_signed(16#00#, 8), to_signed(16#04#, 8), to_signed(16#03#, 8), to_signed(16#07#, 8),
     to_signed(16#02#, 8), to_signed(16#06#, 8), to_signed(16#05#, 8), to_signed(16#01#, 8), to_signed(16#04#, 8),
     to_signed(16#00#, 8), to_signed(16#04#, 8), to_signed(16#00#, 8), to_signed(16#05#, 8), to_signed(16#01#, 8),
     to_signed(16#02#, 8), to_signed(16#06#, 8), to_signed(16#03#, 8), to_signed(16#07#, 8));  -- int8 [64]

  -- Signals
  SIGNAL tmp                              : std_logic;
  SIGNAL resetIn                          : std_logic;
  SIGNAL resetIn_1                        : std_logic;
  SIGNAL tmp_1                            : std_logic;
  SIGNAL tmp_2                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_3                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_4                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_5                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL obj_metricComputer_validInPipe   : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL tmp_6                            : std_logic;
  SIGNAL obj_metricComputer_validInPipe_1 : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL tmp_7                            : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL tmp_8                            : std_logic;
  SIGNAL tmp_9                            : std_logic;
  SIGNAL tmp_10                           : std_logic;
  SIGNAL oldStateMetrics                  : vector_of_signed10(0 TO 63);  -- sfix10_En1 [64]
  SIGNAL varargout_1                      : vector_of_signed4(0 TO 2);  -- sfix4_En1 [3]
  SIGNAL obj_metricComputer_dataInReg     : vector_of_signed4(0 TO 2);  -- sfix4_En1 [3]
  SIGNAL obj_metricComputer_dataInReg_1   : vector_of_signed4(0 TO 2);  -- sfix4_En1 [3]
  SIGNAL dataIn                           : vector_of_signed4(0 TO 2);  -- sfix4_En1 [3]
  SIGNAL dataIn_1                         : vector_of_signed4(0 TO 2);  -- sfix4_En1 [3]
  SIGNAL tmp_11                           : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL branchMetrics                    : vector_of_signed6(0 TO 7);  -- sfix6_En1 [8]
  SIGNAL branchMetrics_1                  : vector_of_signed6(0 TO 7);  -- sfix6_En1 [8]
  SIGNAL branchMetrics_2                  : vector_of_signed6(0 TO 7);  -- sfix6_En1 [8]
  SIGNAL obj_metricComputer_branchMetrics : vector_of_signed6(0 TO 7);  -- sfix6_En1 [8]
  SIGNAL obj_metricComputer_branchMetrics_1 : vector_of_signed6(0 TO 7);  -- sfix6_En1 [8]
  SIGNAL branchMetrics_3                  : vector_of_signed6(0 TO 7);  -- sfix6_En1 [8]
  SIGNAL branchMetrics_4                  : vector_of_signed6(0 TO 7);  -- sfix6_En1 [8]
  SIGNAL tmp_12                           : vector_of_signed10(0 TO 63);  -- sfix10_En1 [64]
  SIGNAL tmp_13                           : signed(9 DOWNTO 0);  -- sfix10_En1
  SIGNAL obj_metricComputer_stateMetrics  : vector_of_signed10(0 TO 63);  -- sfix10_En1 [64]
  SIGNAL obj_metricComputer_stateMetrics_1 : vector_of_signed10(0 TO 63);  -- sfix10_En1 [64]
  SIGNAL oldStateMetrics_1                : vector_of_signed10(0 TO 63);  -- sfix10_En1 [64]
  SIGNAL obj_metricComputer_stateMetrics_2 : vector_of_signed10(0 TO 63);  -- sfix10_En1 [64]
  SIGNAL tmp_14                           : vector_of_signed10(0 TO 63);  -- sfix10_En1 [64]
  SIGNAL tmp_15                           : vector_of_signed10(0 TO 63);  -- sfix10_En1 [64]
  SIGNAL tmp_16                           : vector_of_signed10(0 TO 63);  -- sfix10_En1 [64]
  SIGNAL oldStateMetrics_2                : vector_of_signed10(0 TO 63);  -- sfix10_En1 [64]
  SIGNAL tmp_17                           : std_logic_vector(0 TO 63);  -- boolean [64]
  SIGNAL obj_metricComputer_decisions     : std_logic_vector(0 TO 63);  -- boolean [64]
  SIGNAL obj_metricComputer_decisions_1   : std_logic_vector(0 TO 63);  -- boolean [64]
  SIGNAL tmp_18                           : std_logic_vector(0 TO 63);  -- boolean [64]
  SIGNAL tmp_19                           : std_logic_vector(0 TO 63);  -- boolean [64]
  SIGNAL tmp_20                           : std_logic_vector(0 TO 63);  -- boolean [64]
  SIGNAL varargout_1_64                   : std_logic_vector(0 TO 63);  -- boolean [64]
  SIGNAL varargout_1_65                   : std_logic_vector(0 TO 63);  -- boolean [64]
  SIGNAL tmp_21                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_22                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_23                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_24                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL obj_metricComputer_startInPipe   : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL tmp_25                           : std_logic;
  SIGNAL obj_metricComputer_startInPipe_1 : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL tmp_26                           : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL tmp_27                           : std_logic;
  SIGNAL obj_metricComputer_startOutPipe  : std_logic;
  SIGNAL tmp_28                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_29                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_30                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_31                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL obj_metricComputer_endInPipe     : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL tmp_32                           : std_logic;
  SIGNAL obj_metricComputer_endInPipe_1   : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL tmp_33                           : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL tmp_34                           : std_logic;
  SIGNAL obj_metricComputer_endOutPipe    : std_logic;
  SIGNAL obj_metricComputer_validOutPipe  : std_logic;
  SIGNAL stateMetricsOut                  : vector_of_signed10(0 TO 63);  -- sfix10_En1 [64]
  SIGNAL stateMetricsOut_1                : vector_of_signed10(0 TO 63);  -- sfix10_En1 [64]
  SIGNAL obj_metricComputer_maxMetrics    : vector_of_signed10(0 TO 63);  -- sfix10_En1 [64]
  SIGNAL obj_metricComputer_maxMetrics_1  : vector_of_signed10(0 TO 63);  -- sfix10_En1 [64]
  SIGNAL obj_metricComputer_maxMetrics_2  : vector_of_signed10(0 TO 63);  -- sfix10_En1 [64]
  SIGNAL tmp_35                           : vector_of_signed10(0 TO 63);  -- sfix10_En1 [64]
  SIGNAL obj_metricComputer_maxStates     : vector_of_unsigned6(0 TO 63);  -- ufix6 [64]
  SIGNAL obj_metricComputer_maxStates_1   : vector_of_unsigned6(0 TO 63);  -- ufix6 [64]
  SIGNAL obj_metricComputer_maxStates_2   : vector_of_unsigned6(0 TO 63);  -- ufix6 [64]
  SIGNAL tmp_36                           : vector_of_unsigned6(0 TO 63);  -- ufix6 [64]
  SIGNAL varargout_5_tmp                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL tmp_37                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_38                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_39                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_40                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL obj_metricComputer_resetInPipe   : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL tmp_41                           : std_logic;
  SIGNAL obj_metricComputer_resetInPipe_1 : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL tmp_42                           : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL resetIn_2                        : std_logic;
  SIGNAL endOut                           : std_logic_vector(0 TO 6);  -- boolean [7]
  SIGNAL endOut_1                         : std_logic_vector(0 TO 6);  -- boolean [7]
  SIGNAL tmp_43                           : std_logic;
  SIGNAL obj_metricComputer_maxValidPipe  : std_logic_vector(0 TO 6);  -- boolean [7]
  SIGNAL obj_metricComputer_maxValidPipe_1 : std_logic_vector(0 TO 6);  -- boolean [7]
  SIGNAL endOut_2                         : std_logic_vector(0 TO 6);  -- boolean [7]
  SIGNAL obj_metricComputer_maxValidPipe_2 : std_logic_vector(0 TO 6);  -- boolean [7]
  SIGNAL tmp_44                           : std_logic_vector(0 TO 6);  -- boolean [7]

BEGIN
  tmp <= varargout_2 AND varargout_4;

  -- HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp54
  resetIn <= '0';

  -- HDL code generation from MATLAB function: SystemCore_stepImpl_trueregionp54
  resetIn_1 <= '1';

  
  tmp_1 <= resetIn WHEN tmp = '0' ELSE
      resetIn_1;

  tmp_2 <= to_signed(16#00000000#, 32);

  tmp_3 <= to_signed(16#00000000#, 32);

  tmp_4 <= to_signed(16#00000000#, 32);

  tmp_5 <= to_signed(16#00000000#, 32);

  tmp_6 <= obj_metricComputer_validInPipe(to_integer(tmp_4 + tmp_5));

  p99obj_metricComputer_validInPipe_output : PROCESS (obj_metricComputer_validInPipe, tmp_2, tmp_3, varargout_4)
  BEGIN
    obj_metricComputer_validInPipe_1 <= obj_metricComputer_validInPipe;
    obj_metricComputer_validInPipe_1(to_integer(tmp_2 + tmp_3)) <= varargout_4;
  END PROCESS p99obj_metricComputer_validInPipe_output;


  p100tmp_output : PROCESS (obj_metricComputer_validInPipe_1, tmp_6)
  BEGIN
    tmp_7 <= obj_metricComputer_validInPipe_1;
    tmp_7(1) <= tmp_6;
  END PROCESS p100tmp_output;


  obj_metricComputer_validInPipe_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_metricComputer_validInPipe <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        obj_metricComputer_validInPipe <= tmp_7;
      END IF;
    END IF;
  END PROCESS obj_metricComputer_validInPipe_reg_process;


  tmp_8 <= obj_metricComputer_validInPipe(1);

  tmp_9 <= '1';

  tmp_10 <= '0';

  oldStateMetrics <= (OTHERS => to_signed(16#000#, 10));

  varargout_1(0) <= signed(varargout_1_0);
  varargout_1(1) <= signed(varargout_1_1);
  varargout_1(2) <= signed(varargout_1_2);

  obj_metricComputer_dataInReg_1 <= varargout_1;

  obj_metricComputer_dataInReg_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_metricComputer_dataInReg <= (OTHERS => to_signed(16#0#, 4));
      ELSIF enb = '1' THEN
        obj_metricComputer_dataInReg <= obj_metricComputer_dataInReg_1;
      END IF;
    END IF;
  END PROCESS obj_metricComputer_dataInReg_reg_process;


  dataIn <= (OTHERS => to_signed(16#0#, 4));

  dataIn_1 <= obj_metricComputer_dataInReg;

  tmp_11 <= to_signed(16#00#, 6);

  branchMetrics <= (OTHERS => to_signed(16#00#, 6));

  branchMetrics_1 <= (OTHERS => to_signed(16#00#, 6));

  p17_output : PROCESS (dataIn_1, tmp_11)
    VARIABLE branchMetrics1 : vector_of_signed6(0 TO 7);
    VARIABLE add_cast : vector_of_signed64(0 TO 2);
    VARIABLE sub_cast : vector_of_signed6(0 TO 2);
    VARIABLE add_cast_0 : vector_of_signed6(0 TO 2);
  BEGIN

    FOR ks IN 0 TO 7 LOOP
      branchMetrics1(ks) := tmp_11;

      FOR kb IN 0 TO 2 LOOP
        add_cast(kb) := resize(to_signed(kb, 32) & '0' & '0' & '0', 64);
        IF nc(to_integer(to_signed(ks, 32) + resize(add_cast(kb), 32))) = '1' THEN 
          add_cast_0(kb) := resize(dataIn_1(kb), 6);
          branchMetrics1(ks) := branchMetrics1(ks) + add_cast_0(kb);
        ELSE 
          sub_cast(kb) := resize(dataIn_1(kb), 6);
          branchMetrics1(ks) := branchMetrics1(ks) - sub_cast(kb);
        END IF;
      END LOOP;

      branchMetrics_2(ks) <= branchMetrics1(ks);
    END LOOP;

  END PROCESS p17_output;


  obj_metricComputer_branchMetrics_1 <= branchMetrics_2;

  obj_metricComputer_branchMetrics_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_metricComputer_branchMetrics <= (OTHERS => to_signed(16#00#, 6));
      ELSIF enb = '1' THEN
        obj_metricComputer_branchMetrics <= obj_metricComputer_branchMetrics_1;
      END IF;
    END IF;
  END PROCESS obj_metricComputer_branchMetrics_reg_process;


  branchMetrics_3 <= (OTHERS => to_signed(16#00#, 6));

  branchMetrics_4 <= obj_metricComputer_branchMetrics;

  -- HDL code generation from MATLAB function: SystemCore_stepImpl
  tmp_12 <= (OTHERS => to_signed(16#000#, 10));

  tmp_13 <= to_signed(16#000#, 10);

  -- HDL code generation from MATLAB function: SystemCore_stepImpl_trueregionp39
  obj_metricComputer_stateMetrics_1 <= (OTHERS => tmp_13);

  -- HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp44_trueregionp1
  oldStateMetrics_1 <= obj_metricComputer_stateMetrics;

  p1_1_output : PROCESS (branchMetrics_4, oldStateMetrics_1)
    VARIABLE newStateMetricA : signed(9 DOWNTO 0);
    VARIABLE newStateMetricB : signed(9 DOWNTO 0);
    VARIABLE t_0 : signed(9 DOWNTO 0);
    VARIABLE add_cast1 : vector_of_signed10(0 TO 63);
    VARIABLE add_cast_01 : vector_of_signed10(0 TO 63);
    VARIABLE sub_temp : vector_of_signed10(0 TO 63);
  BEGIN
    newStateMetricA := to_signed(16#000#, 10);
    newStateMetricB := to_signed(16#000#, 10);
    t_0 := to_signed(16#000#, 10);

    FOR m IN 0 TO 63 LOOP
      add_cast1(m) := resize(branchMetrics_4(to_integer(nc_0(m))), 10);
      newStateMetricA := oldStateMetrics_1(to_integer(nc_2(m))) + add_cast1(m);
      add_cast_01(m) := resize(branchMetrics_4(to_integer(nc_2_1(m))), 10);
      newStateMetricB := oldStateMetrics_1(to_integer(nc_1_1(m))) + add_cast_01(m);
      sub_temp(m) := newStateMetricA - newStateMetricB;
      IF sub_temp(m) >= to_signed(16#000#, 10) THEN 
        t_0 := newStateMetricA;
      ELSE 
        t_0 := newStateMetricB;
      END IF;
      obj_metricComputer_stateMetrics_2(m) <= t_0;
    END LOOP;

  END PROCESS p1_1_output;


  -- HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp44
  
  tmp_14 <= obj_metricComputer_stateMetrics WHEN tmp_8 = '0' ELSE
      obj_metricComputer_stateMetrics_2;

  -- HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp39
  
  tmp_15 <= tmp_14 WHEN tmp_1 = '0' ELSE
      tmp_12;

  
  tmp_16 <= tmp_15 WHEN tmp_1 = '0' ELSE
      obj_metricComputer_stateMetrics_1;

  obj_metricComputer_stateMetrics_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_metricComputer_stateMetrics <= (OTHERS => to_signed(16#000#, 10));
      ELSIF enb = '1' THEN
        obj_metricComputer_stateMetrics <= tmp_16;
      END IF;
    END IF;
  END PROCESS obj_metricComputer_stateMetrics_reg_process;


  -- HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp42_trueregionp1
  oldStateMetrics_2 <= obj_metricComputer_stateMetrics;

  tmp_17 <= (OTHERS => '0');

  p1_3_output : PROCESS (branchMetrics_4, oldStateMetrics_2, tmp_10, tmp_9)
    VARIABLE t_01 : std_logic;
    VARIABLE add_cast2 : vector_of_signed10(0 TO 63);
    VARIABLE add_temp : vector_of_signed10(0 TO 63);
    VARIABLE add_cast_02 : vector_of_signed10(0 TO 63);
    VARIABLE add_temp_0 : vector_of_signed10(0 TO 63);
    VARIABLE sub_temp1 : vector_of_signed10(0 TO 63);
  BEGIN
    t_01 := '0';

    FOR m1 IN 0 TO 63 LOOP
      add_cast2(m1) := resize(branchMetrics_4(to_integer(nc_0_2(m1))), 10);
      add_temp(m1) := oldStateMetrics_2(to_integer(nc_4(m1))) + add_cast2(m1);
      add_cast_02(m1) := resize(branchMetrics_4(to_integer(nc_2_3(m1))), 10);
      add_temp_0(m1) := oldStateMetrics_2(to_integer(nc_1_3(m1))) + add_cast_02(m1);
      sub_temp1(m1) := add_temp(m1) - add_temp_0(m1);
      IF sub_temp1(m1) >= to_signed(16#000#, 10) THEN 
        t_01 := tmp_10;
      ELSE 
        t_01 := tmp_9;
      END IF;
      obj_metricComputer_decisions_1(m1) <= t_01;
    END LOOP;

  END PROCESS p1_3_output;


  -- HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp42
  
  tmp_18 <= obj_metricComputer_decisions WHEN tmp_8 = '0' ELSE
      obj_metricComputer_decisions_1;

  -- HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp36
  
  tmp_19 <= tmp_18 WHEN tmp_1 = '0' ELSE
      tmp_17;

  
  tmp_20 <= tmp_19 WHEN tmp_1 = '0' ELSE
      obj_metricComputer_decisions;

  obj_metricComputer_decisions_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_metricComputer_decisions <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        obj_metricComputer_decisions <= tmp_20;
      END IF;
    END IF;
  END PROCESS obj_metricComputer_decisions_reg_process;


  varargout_1_64 <= obj_metricComputer_decisions;

  varargout_1_65 <= varargout_1_64;

  varargout_1_3 <= varargout_1_65(3);

  varargout_1_4 <= varargout_1_65(4);

  varargout_1_5 <= varargout_1_65(5);

  varargout_1_6 <= varargout_1_65(6);

  varargout_1_7 <= varargout_1_65(7);

  varargout_1_8 <= varargout_1_65(8);

  varargout_1_9 <= varargout_1_65(9);

  varargout_1_10 <= varargout_1_65(10);

  varargout_1_11 <= varargout_1_65(11);

  varargout_1_12 <= varargout_1_65(12);

  varargout_1_13 <= varargout_1_65(13);

  varargout_1_14 <= varargout_1_65(14);

  varargout_1_15 <= varargout_1_65(15);

  varargout_1_16 <= varargout_1_65(16);

  varargout_1_17 <= varargout_1_65(17);

  varargout_1_18 <= varargout_1_65(18);

  varargout_1_19 <= varargout_1_65(19);

  varargout_1_20 <= varargout_1_65(20);

  varargout_1_21 <= varargout_1_65(21);

  varargout_1_22 <= varargout_1_65(22);

  varargout_1_23 <= varargout_1_65(23);

  varargout_1_24 <= varargout_1_65(24);

  varargout_1_25 <= varargout_1_65(25);

  varargout_1_26 <= varargout_1_65(26);

  varargout_1_27 <= varargout_1_65(27);

  varargout_1_28 <= varargout_1_65(28);

  varargout_1_29 <= varargout_1_65(29);

  varargout_1_30 <= varargout_1_65(30);

  varargout_1_31 <= varargout_1_65(31);

  varargout_1_32 <= varargout_1_65(32);

  varargout_1_33 <= varargout_1_65(33);

  varargout_1_34 <= varargout_1_65(34);

  varargout_1_35 <= varargout_1_65(35);

  varargout_1_36 <= varargout_1_65(36);

  varargout_1_37 <= varargout_1_65(37);

  varargout_1_38 <= varargout_1_65(38);

  varargout_1_39 <= varargout_1_65(39);

  varargout_1_40 <= varargout_1_65(40);

  varargout_1_41 <= varargout_1_65(41);

  varargout_1_42 <= varargout_1_65(42);

  varargout_1_43 <= varargout_1_65(43);

  varargout_1_44 <= varargout_1_65(44);

  varargout_1_45 <= varargout_1_65(45);

  varargout_1_46 <= varargout_1_65(46);

  varargout_1_47 <= varargout_1_65(47);

  varargout_1_48 <= varargout_1_65(48);

  varargout_1_49 <= varargout_1_65(49);

  varargout_1_50 <= varargout_1_65(50);

  varargout_1_51 <= varargout_1_65(51);

  varargout_1_52 <= varargout_1_65(52);

  varargout_1_53 <= varargout_1_65(53);

  varargout_1_54 <= varargout_1_65(54);

  varargout_1_55 <= varargout_1_65(55);

  varargout_1_56 <= varargout_1_65(56);

  varargout_1_57 <= varargout_1_65(57);

  varargout_1_58 <= varargout_1_65(58);

  varargout_1_59 <= varargout_1_65(59);

  varargout_1_60 <= varargout_1_65(60);

  varargout_1_61 <= varargout_1_65(61);

  varargout_1_62 <= varargout_1_65(62);

  varargout_1_63 <= varargout_1_65(63);

  tmp_21 <= to_signed(16#00000000#, 32);

  tmp_22 <= to_signed(16#00000000#, 32);

  tmp_23 <= to_signed(16#00000000#, 32);

  tmp_24 <= to_signed(16#00000000#, 32);

  tmp_25 <= obj_metricComputer_startInPipe(to_integer(tmp_23 + tmp_24));

  p83obj_metricComputer_startInPipe_output : PROCESS (obj_metricComputer_startInPipe, tmp_21, tmp_22, varargout_2)
  BEGIN
    obj_metricComputer_startInPipe_1 <= obj_metricComputer_startInPipe;
    obj_metricComputer_startInPipe_1(to_integer(tmp_21 + tmp_22)) <= varargout_2;
  END PROCESS p83obj_metricComputer_startInPipe_output;


  p84tmp_output : PROCESS (obj_metricComputer_startInPipe_1, tmp_25)
  BEGIN
    tmp_26 <= obj_metricComputer_startInPipe_1;
    tmp_26(1) <= tmp_25;
  END PROCESS p84tmp_output;


  obj_metricComputer_startInPipe_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_metricComputer_startInPipe <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        obj_metricComputer_startInPipe <= tmp_26;
      END IF;
    END IF;
  END PROCESS obj_metricComputer_startInPipe_reg_process;


  tmp_27 <= obj_metricComputer_startInPipe(1);

  obj_metricComputer_startOutPipe_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_metricComputer_startOutPipe <= '0';
      ELSIF enb = '1' THEN
        obj_metricComputer_startOutPipe <= tmp_27;
      END IF;
    END IF;
  END PROCESS obj_metricComputer_startOutPipe_reg_process;


  tmp_28 <= to_signed(16#00000000#, 32);

  tmp_29 <= to_signed(16#00000000#, 32);

  tmp_30 <= to_signed(16#00000000#, 32);

  tmp_31 <= to_signed(16#00000000#, 32);

  tmp_32 <= obj_metricComputer_endInPipe(to_integer(tmp_30 + tmp_31));

  p91obj_metricComputer_endInPipe_output : PROCESS (obj_metricComputer_endInPipe, tmp_28, tmp_29, varargout_3)
  BEGIN
    obj_metricComputer_endInPipe_1 <= obj_metricComputer_endInPipe;
    obj_metricComputer_endInPipe_1(to_integer(tmp_28 + tmp_29)) <= varargout_3;
  END PROCESS p91obj_metricComputer_endInPipe_output;


  p92tmp_output : PROCESS (obj_metricComputer_endInPipe_1, tmp_32)
  BEGIN
    tmp_33 <= obj_metricComputer_endInPipe_1;
    tmp_33(1) <= tmp_32;
  END PROCESS p92tmp_output;


  obj_metricComputer_endInPipe_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_metricComputer_endInPipe <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        obj_metricComputer_endInPipe <= tmp_33;
      END IF;
    END IF;
  END PROCESS obj_metricComputer_endInPipe_reg_process;


  tmp_34 <= obj_metricComputer_endInPipe(1);

  obj_metricComputer_endOutPipe_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_metricComputer_endOutPipe <= '0';
      ELSIF enb = '1' THEN
        obj_metricComputer_endOutPipe <= tmp_34;
      END IF;
    END IF;
  END PROCESS obj_metricComputer_endOutPipe_reg_process;


  obj_metricComputer_validOutPipe_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_metricComputer_validOutPipe <= '0';
      ELSIF enb = '1' THEN
        obj_metricComputer_validOutPipe <= tmp_8;
      END IF;
    END IF;
  END PROCESS obj_metricComputer_validOutPipe_reg_process;


  stateMetricsOut <= (OTHERS => to_signed(16#000#, 10));

  stateMetricsOut_1 <= obj_metricComputer_stateMetrics;

  -- HDL code generation from MATLAB function: SystemCore_stepImpl_trueregionp25
  obj_metricComputer_maxMetrics_1 <= stateMetricsOut_1;

  -- HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp25
  p1_6_output : PROCESS (obj_metricComputer_maxMetrics)
    VARIABLE obj_metricComputer_maxMetrics1 : vector_of_signed10(0 TO 63);
    VARIABLE cast : vector_of_signed64(0 TO 31);
    VARIABLE add_cast3 : vector_of_signed64(0 TO 31);
    VARIABLE sub_temp2 : vector_of_signed10(0 TO 31);
    VARIABLE add_cast_03 : vector_of_signed64(0 TO 31);
    VARIABLE cast_0 : vector_of_signed64(0 TO 31);
  BEGIN
    obj_metricComputer_maxMetrics1 := obj_metricComputer_maxMetrics;

    FOR k IN 0 TO 31 LOOP
      cast(k) := resize(to_signed(k, 32) & '0', 64);
      add_cast3(k) := resize(to_signed(k, 32) & '0', 64);
      sub_temp2(k) := obj_metricComputer_maxMetrics1(to_integer(resize(cast(k), 31))) - obj_metricComputer_maxMetrics1(to_integer(resize(add_cast3(k), 32) + 1));
      IF sub_temp2(k) >= to_signed(16#000#, 10) THEN 
        cast_0(k) := resize(to_signed(k, 32) & '0', 64);
        obj_metricComputer_maxMetrics1(k) := obj_metricComputer_maxMetrics1(to_integer(resize(cast_0(k), 31)));
      ELSE 
        add_cast_03(k) := resize(to_signed(k, 32) & '0', 64);
        obj_metricComputer_maxMetrics1(k) := obj_metricComputer_maxMetrics1(to_integer(resize(add_cast_03(k), 32) + 1));
      END IF;
    END LOOP;

    obj_metricComputer_maxMetrics_2 <= obj_metricComputer_maxMetrics1;
  END PROCESS p1_6_output;


  
  tmp_35 <= obj_metricComputer_maxMetrics_2 WHEN obj_metricComputer_endOutPipe = '0' ELSE
      obj_metricComputer_maxMetrics_1;

  obj_metricComputer_maxMetrics_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_metricComputer_maxMetrics <= (OTHERS => to_signed(16#000#, 10));
      ELSIF enb = '1' THEN
        obj_metricComputer_maxMetrics <= tmp_35;
      END IF;
    END IF;
  END PROCESS obj_metricComputer_maxMetrics_reg_process;


  -- HDL code generation from MATLAB function: SystemCore_stepImpl_trueregionp30

  obj_metricComputer_maxStates_1_gen: FOR k1 IN 0 TO 63 GENERATE
    obj_metricComputer_maxStates_1(k1) <= unsigned(to_signed(k1, 32)(5 DOWNTO 0));
  END GENERATE obj_metricComputer_maxStates_1_gen;


  -- HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp30
  p1_8_output : PROCESS (obj_metricComputer_maxMetrics, obj_metricComputer_maxStates)
    VARIABLE obj_metricComputer_maxMetrics2 : vector_of_signed10(0 TO 63);
    VARIABLE obj_metricComputer_maxStates1 : vector_of_unsigned6(0 TO 63);
    VARIABLE cast1 : vector_of_signed64(0 TO 31);
    VARIABLE add_cast4 : vector_of_signed64(0 TO 31);
    VARIABLE sub_temp3 : vector_of_signed10(0 TO 31);
    VARIABLE add_cast_04 : vector_of_signed64(0 TO 31);
    VARIABLE cast_01 : vector_of_signed64(0 TO 31);
    VARIABLE add_cast_1 : vector_of_signed64(0 TO 31);
    VARIABLE cast_1 : vector_of_signed64(0 TO 31);
  BEGIN
    obj_metricComputer_maxMetrics2 := obj_metricComputer_maxMetrics;
    obj_metricComputer_maxStates1 := obj_metricComputer_maxStates;

    FOR k2 IN 0 TO 31 LOOP
      cast1(k2) := resize(to_signed(k2, 32) & '0', 64);
      add_cast4(k2) := resize(to_signed(k2, 32) & '0', 64);
      sub_temp3(k2) := obj_metricComputer_maxMetrics2(to_integer(resize(cast1(k2), 31))) - obj_metricComputer_maxMetrics2(to_integer(resize(add_cast4(k2), 32) + 1));
      IF sub_temp3(k2) >= to_signed(16#000#, 10) THEN 
        cast_01(k2) := resize(to_signed(k2, 32) & '0', 64);
        obj_metricComputer_maxMetrics2(k2) := obj_metricComputer_maxMetrics2(to_integer(resize(cast_01(k2), 31)));
        cast_1(k2) := resize(to_signed(k2, 32) & '0', 64);
        obj_metricComputer_maxStates1(k2) := obj_metricComputer_maxStates1(to_integer(resize(cast_1(k2), 31)));
      ELSE 
        add_cast_04(k2) := resize(to_signed(k2, 32) & '0', 64);
        obj_metricComputer_maxMetrics2(k2) := obj_metricComputer_maxMetrics2(to_integer(resize(add_cast_04(k2), 32) + 1));
        add_cast_1(k2) := resize(to_signed(k2, 32) & '0', 64);
        obj_metricComputer_maxStates1(k2) := obj_metricComputer_maxStates1(to_integer(resize(add_cast_1(k2), 32) + 1));
      END IF;
    END LOOP;

    obj_metricComputer_maxStates_2 <= obj_metricComputer_maxStates1;
  END PROCESS p1_8_output;


  
  tmp_36 <= obj_metricComputer_maxStates_2 WHEN obj_metricComputer_endOutPipe = '0' ELSE
      obj_metricComputer_maxStates_1;

  obj_metricComputer_maxStates_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_metricComputer_maxStates <= (OTHERS => to_unsigned(16#00#, 6));
      ELSIF enb = '1' THEN
        obj_metricComputer_maxStates <= tmp_36;
      END IF;
    END IF;
  END PROCESS obj_metricComputer_maxStates_reg_process;


  varargout_5_tmp <= obj_metricComputer_maxStates(0);

  varargout_5 <= std_logic_vector(varargout_5_tmp);

  tmp_37 <= to_signed(16#00000000#, 32);

  tmp_38 <= to_signed(16#00000000#, 32);

  tmp_39 <= to_signed(16#00000000#, 32);

  tmp_40 <= to_signed(16#00000000#, 32);

  tmp_41 <= obj_metricComputer_resetInPipe(to_integer(tmp_39 + tmp_40));

  p107obj_metricComputer_resetInPipe_output : PROCESS (obj_metricComputer_resetInPipe, tmp_1, tmp_37, tmp_38)
  BEGIN
    obj_metricComputer_resetInPipe_1 <= obj_metricComputer_resetInPipe;
    obj_metricComputer_resetInPipe_1(to_integer(tmp_37 + tmp_38)) <= tmp_1;
  END PROCESS p107obj_metricComputer_resetInPipe_output;


  p108tmp_output : PROCESS (obj_metricComputer_resetInPipe_1, tmp_41)
  BEGIN
    tmp_42 <= obj_metricComputer_resetInPipe_1;
    tmp_42(1) <= tmp_41;
  END PROCESS p108tmp_output;


  obj_metricComputer_resetInPipe_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_metricComputer_resetInPipe <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        obj_metricComputer_resetInPipe <= tmp_42;
      END IF;
    END IF;
  END PROCESS obj_metricComputer_resetInPipe_reg_process;


  resetIn_2 <= obj_metricComputer_resetInPipe(1);

  endOut <= (OTHERS => '0');

  -- HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp21
  p3endOut_output : PROCESS (endOut, obj_metricComputer_endOutPipe)
  BEGIN
    endOut_1 <= endOut;
    endOut_1(0) <= obj_metricComputer_endOutPipe;
  END PROCESS p3endOut_output;


  tmp_43 <= '0';

  -- HDL code generation from MATLAB function: SystemCore_stepImpl_trueregionp21
  obj_metricComputer_maxValidPipe_1 <= (OTHERS => tmp_43);

  p2_2_output : PROCESS (endOut_1, obj_metricComputer_maxValidPipe)
  BEGIN
    endOut_2 <= endOut_1;
    endOut_2(1 TO 6) <= obj_metricComputer_maxValidPipe(0 TO 5);
  END PROCESS p2_2_output;


  obj_metricComputer_maxValidPipe_2 <= endOut_2;

  
  tmp_44 <= obj_metricComputer_maxValidPipe_2 WHEN resetIn_2 = '0' ELSE
      obj_metricComputer_maxValidPipe_1;

  obj_metricComputer_maxValidPipe_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_metricComputer_maxValidPipe <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        obj_metricComputer_maxValidPipe <= tmp_44;
      END IF;
    END IF;
  END PROCESS obj_metricComputer_maxValidPipe_reg_process;


  varargout_6 <= obj_metricComputer_maxValidPipe(6);

  varargout_1_0_1 <= varargout_1_65(0);

  varargout_1_1_1 <= varargout_1_65(1);

  varargout_1_2_1 <= varargout_1_65(2);

  varargout_2_1 <= obj_metricComputer_startOutPipe;

  varargout_3_1 <= obj_metricComputer_endOutPipe;

  varargout_4_1 <= obj_metricComputer_validOutPipe;

END rtl;

