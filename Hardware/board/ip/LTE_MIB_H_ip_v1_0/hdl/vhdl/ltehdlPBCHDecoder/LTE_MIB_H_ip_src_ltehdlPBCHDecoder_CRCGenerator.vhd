-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\zynqRadioHWSWLTEMIBDetectorRFSoC2x2\ltehdlPBCHDecoder\LTE_MIB_H_ip_src_ltehdlPBCHDecoder_CRCGenerator.vhd
-- Created: 2022-05-23 17:26:45
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: LTE_MIB_H_ip_src_ltehdlPBCHDecoder_CRCGenerator
-- Source Path: ltehdlPBCHDecoder/BCH Decoder/CRC Decoder/CRCGenerator
-- Hierarchy Level: 6
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
LIBRARY work_ltehdlPBCHDecoder;

ENTITY LTE_MIB_H_ip_src_ltehdlPBCHDecoder_CRCGenerator IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn                            :   IN    std_logic;
        startIn                           :   IN    std_logic;  -- ufix1
        endIn                             :   IN    std_logic;  -- ufix1
        validIn                           :   IN    std_logic;  -- ufix1
        dataOut                           :   OUT   std_logic;
        startOut                          :   OUT   std_logic;  -- ufix1
        endOut                            :   OUT   std_logic;  -- ufix1
        validOut                          :   OUT   std_logic  -- ufix1
        );
END LTE_MIB_H_ip_src_ltehdlPBCHDecoder_CRCGenerator;


ARCHITECTURE rtl OF LTE_MIB_H_ip_src_ltehdlPBCHDecoder_CRCGenerator IS

  -- Component Declarations
  COMPONENT LTE_MIB_H_ip_src_ltehdlPBCHDecoder_CRCGenControl
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          startIn                         :   IN    std_logic;  -- ufix1
          endIn                           :   IN    std_logic;  -- ufix1
          validIn                         :   IN    std_logic;  -- ufix1
          startOut                        :   OUT   std_logic;  -- ufix1
          processMsg                      :   OUT   std_logic;  -- ufix1
          padZero                         :   OUT   std_logic;  -- ufix1
          outputCRC                       :   OUT   std_logic;  -- ufix1
          endOut                          :   OUT   std_logic;  -- ufix1
          validOut                        :   OUT   std_logic;  -- ufix1
          regClr                          :   OUT   std_logic;  -- ufix1
          counter                         :   OUT   std_logic_vector(3 DOWNTO 0);  -- ufix4
          counter_outputCRC               :   OUT   std_logic_vector(3 DOWNTO 0)  -- ufix4
          );
  END COMPONENT;

  COMPONENT LTE_MIB_H_ip_src_ltehdlPBCHDecoder_CRCGenCompute
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          datainReg                       :   IN    std_logic;
          validIn                         :   IN    std_logic;  -- ufix1
          processMsg                      :   IN    std_logic;  -- ufix1
          padZero                         :   IN    std_logic;  -- ufix1
          counter                         :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          regClr                          :   IN    std_logic;  -- ufix1
          crcChecksum_0                   :   OUT   std_logic;  -- ufix1
          crcChecksum_1                   :   OUT   std_logic;  -- ufix1
          crcChecksum_2                   :   OUT   std_logic;  -- ufix1
          crcChecksum_3                   :   OUT   std_logic;  -- ufix1
          crcChecksum_4                   :   OUT   std_logic;  -- ufix1
          crcChecksum_5                   :   OUT   std_logic;  -- ufix1
          crcChecksum_6                   :   OUT   std_logic;  -- ufix1
          crcChecksum_7                   :   OUT   std_logic;  -- ufix1
          crcChecksum_8                   :   OUT   std_logic;  -- ufix1
          crcChecksum_9                   :   OUT   std_logic;  -- ufix1
          crcChecksum_10                  :   OUT   std_logic;  -- ufix1
          crcChecksum_11                  :   OUT   std_logic;  -- ufix1
          crcChecksum_12                  :   OUT   std_logic;  -- ufix1
          crcChecksum_13                  :   OUT   std_logic;  -- ufix1
          crcChecksum_14                  :   OUT   std_logic;  -- ufix1
          crcChecksum_15                  :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_CRCGenControl
    USE ENTITY work_ltehdlPBCHDecoder.LTE_MIB_H_ip_src_ltehdlPBCHDecoder_CRCGenControl(rtl);

  FOR ALL : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_CRCGenCompute
    USE ENTITY work_ltehdlPBCHDecoder.LTE_MIB_H_ip_src_ltehdlPBCHDecoder_CRCGenCompute(rtl);

  -- Signals
  SIGNAL tstartout                        : std_logic;  -- ufix1
  SIGNAL processMsg                       : std_logic;  -- ufix1
  SIGNAL padZero                          : std_logic;  -- ufix1
  SIGNAL outputCRC                        : std_logic;  -- ufix1
  SIGNAL lastfout                         : std_logic;  -- ufix1
  SIGNAL validdata                        : std_logic;  -- ufix1
  SIGNAL regClr                           : std_logic;  -- ufix1
  SIGNAL counter                          : std_logic_vector(3 DOWNTO 0);  -- ufix4
  SIGNAL counter_opcrc                    : std_logic_vector(3 DOWNTO 0);  -- ufix4
  SIGNAL const0                           : std_logic;  -- ufix1
  SIGNAL msgenb                           : std_logic;  -- ufix1
  SIGNAL datainReg                        : std_logic;
  SIGNAL alpha_reg                        : std_logic_vector(0 TO 15);  -- ufix1 [16]
  SIGNAL dataBuffer                       : std_logic;  -- ufix1
  SIGNAL counter_opcrc_unsigned           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL crcCheckSum_0                    : std_logic;  -- ufix1
  SIGNAL crcCheckSum_1                    : std_logic;  -- ufix1
  SIGNAL crcCheckSum_2                    : std_logic;  -- ufix1
  SIGNAL crcCheckSum_3                    : std_logic;  -- ufix1
  SIGNAL crcCheckSum_4                    : std_logic;  -- ufix1
  SIGNAL crcCheckSum_5                    : std_logic;  -- ufix1
  SIGNAL crcCheckSum_6                    : std_logic;  -- ufix1
  SIGNAL crcCheckSum_7                    : std_logic;  -- ufix1
  SIGNAL crcCheckSum_8                    : std_logic;  -- ufix1
  SIGNAL crcCheckSum_9                    : std_logic;  -- ufix1
  SIGNAL crcCheckSum_10                   : std_logic;  -- ufix1
  SIGNAL crcCheckSum_11                   : std_logic;  -- ufix1
  SIGNAL crcCheckSum_12                   : std_logic;  -- ufix1
  SIGNAL crcCheckSum_13                   : std_logic;  -- ufix1
  SIGNAL crcCheckSum_14                   : std_logic;  -- ufix1
  SIGNAL crcCheckSum_15                   : std_logic;  -- ufix1
  SIGNAL crcOut                           : std_logic;  -- ufix1
  SIGNAL msgcrc                           : std_logic;  -- ufix1
  SIGNAL tdataout                         : std_logic;  -- ufix1
  SIGNAL tstartoutGated                   : std_logic;  -- ufix1

BEGIN
  u_Controlsignal_inst : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_CRCGenControl
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              startIn => startIn,  -- ufix1
              endIn => endIn,  -- ufix1
              validIn => validIn,  -- ufix1
              startOut => tstartout,  -- ufix1
              processMsg => processMsg,  -- ufix1
              padZero => padZero,  -- ufix1
              outputCRC => outputCRC,  -- ufix1
              endOut => lastfout,  -- ufix1
              validOut => validdata,  -- ufix1
              regClr => regClr,  -- ufix1
              counter => counter,  -- ufix4
              counter_outputCRC => counter_opcrc  -- ufix4
              );

  -- Select CRC output bits
  -- 
  -- Select CRC output bits
  -- 
  -- Select CRC output bits
  -- 
  -- Select CRC output bits
  -- 
  -- Select CRC output bits
  -- 
  -- Select CRC output bits
  -- 
  -- Select CRC output bits
  -- 
  -- Select CRC output bits
  -- 
  -- Select CRC output bits
  -- 
  -- Select CRC output bits
  -- 
  -- Select CRC output bits
  -- 
  -- Select CRC output bits
  -- 
  -- Select CRC output bits
  -- 
  -- Select CRC output bits
  -- 
  -- Select CRC output bits
  -- 
  -- Select CRC output bits
  u_ComputeCRC_inst : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_CRCGenCompute
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              datainReg => datainReg,
              validIn => validIn,  -- ufix1
              processMsg => processMsg,  -- ufix1
              padZero => padZero,  -- ufix1
              counter => counter,  -- ufix4
              regClr => regClr,  -- ufix1
              crcChecksum_0 => crcCheckSum_0,  -- ufix1
              crcChecksum_1 => crcCheckSum_1,  -- ufix1
              crcChecksum_2 => crcCheckSum_2,  -- ufix1
              crcChecksum_3 => crcCheckSum_3,  -- ufix1
              crcChecksum_4 => crcCheckSum_4,  -- ufix1
              crcChecksum_5 => crcCheckSum_5,  -- ufix1
              crcChecksum_6 => crcCheckSum_6,  -- ufix1
              crcChecksum_7 => crcCheckSum_7,  -- ufix1
              crcChecksum_8 => crcCheckSum_8,  -- ufix1
              crcChecksum_9 => crcCheckSum_9,  -- ufix1
              crcChecksum_10 => crcCheckSum_10,  -- ufix1
              crcChecksum_11 => crcCheckSum_11,  -- ufix1
              crcChecksum_12 => crcCheckSum_12,  -- ufix1
              crcChecksum_13 => crcCheckSum_13,  -- ufix1
              crcChecksum_14 => crcCheckSum_14,  -- ufix1
              crcChecksum_15 => crcCheckSum_15  -- ufix1
              );

  -- Constant Zero
  const0 <= '0';

  msgenb <= processMsg OR padZero;

  datainput_register_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        datainReg <= '0';
      ELSIF enb = '1' THEN
        datainReg <= dataIn;
      END IF;
    END IF;
  END PROCESS datainput_register_process;


  -- Buffer Input Data
  c_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        alpha_reg <= (OTHERS => '0');
      ELSIF enb = '1' AND enb = '1' AND msgenb = '1' THEN
        alpha_reg(0) <= datainReg;
        alpha_reg(1 TO 15) <= alpha_reg(0 TO 14);
      END IF;
    END IF;
  END PROCESS c_process;

  dataBuffer <= alpha_reg(15);

  counter_opcrc_unsigned <= unsigned(counter_opcrc);

  
  crcOut <= crcCheckSum_0 WHEN counter_opcrc_unsigned = to_unsigned(16#0#, 4) ELSE
      crcCheckSum_1 WHEN counter_opcrc_unsigned = to_unsigned(16#1#, 4) ELSE
      crcCheckSum_2 WHEN counter_opcrc_unsigned = to_unsigned(16#2#, 4) ELSE
      crcCheckSum_3 WHEN counter_opcrc_unsigned = to_unsigned(16#3#, 4) ELSE
      crcCheckSum_4 WHEN counter_opcrc_unsigned = to_unsigned(16#4#, 4) ELSE
      crcCheckSum_5 WHEN counter_opcrc_unsigned = to_unsigned(16#5#, 4) ELSE
      crcCheckSum_6 WHEN counter_opcrc_unsigned = to_unsigned(16#6#, 4) ELSE
      crcCheckSum_7 WHEN counter_opcrc_unsigned = to_unsigned(16#7#, 4) ELSE
      crcCheckSum_8 WHEN counter_opcrc_unsigned = to_unsigned(16#8#, 4) ELSE
      crcCheckSum_9 WHEN counter_opcrc_unsigned = to_unsigned(16#9#, 4) ELSE
      crcCheckSum_10 WHEN counter_opcrc_unsigned = to_unsigned(16#A#, 4) ELSE
      crcCheckSum_11 WHEN counter_opcrc_unsigned = to_unsigned(16#B#, 4) ELSE
      crcCheckSum_12 WHEN counter_opcrc_unsigned = to_unsigned(16#C#, 4) ELSE
      crcCheckSum_13 WHEN counter_opcrc_unsigned = to_unsigned(16#D#, 4) ELSE
      crcCheckSum_14 WHEN counter_opcrc_unsigned = to_unsigned(16#E#, 4) ELSE
      crcCheckSum_15;

  
  msgcrc <= dataBuffer WHEN outputCRC = '0' ELSE
      crcOut;

  -- Output data and CRC CheckSum
  
  tdataout <= const0 WHEN validdata = '0' ELSE
      msgcrc;

  -- Data output register
  dataOut_register_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dataOut <= '0';
      ELSIF enb = '1' THEN
        dataOut <= tdataout;
      END IF;
    END IF;
  END PROCESS dataOut_register_process;


  tstartoutGated <= tstartout AND validdata;

  -- startOut output register
  startOut_register_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        startOut <= '0';
      ELSIF enb = '1' THEN
        startOut <= tstartoutGated;
      END IF;
    END IF;
  END PROCESS startOut_register_process;


  -- endOut output register
  endout_register_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        endOut <= '0';
      ELSIF enb = '1' THEN
        endOut <= lastfout;
      END IF;
    END IF;
  END PROCESS endout_register_process;


  -- validOut output register
  validout_register_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        validOut <= '0';
      ELSIF enb = '1' THEN
        validOut <= validdata;
      END IF;
    END IF;
  END PROCESS validout_register_process;


END rtl;

