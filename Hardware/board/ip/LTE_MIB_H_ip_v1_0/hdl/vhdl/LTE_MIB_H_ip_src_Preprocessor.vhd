-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\zynqRadioHWSWLTEMIBDetectorRFSoC2x2\LTE_MIB_H_ip_src_Preprocessor.vhd
-- Created: 2022-05-23 17:26:55
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: LTE_MIB_H_ip_src_Preprocessor
-- Source Path: zynqRadioHWSWLTEMIBDetectorRFSoC2x2/LTE_MIB_HDL/Preprocessor
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.LTE_MIB_H_ip_src_LTE_MIB_HDL_pac.ALL;

ENTITY LTE_MIB_H_ip_src_Preprocessor IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        enb_1_2_1                         :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        enb_1_32_0                        :   IN    std_logic;
        enb_1_32_1                        :   IN    std_logic;
        I_In                              :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
        Q_In                              :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
        I_validIn                         :   IN    std_logic;
        Q_validIn                         :   IN    std_logic;
        startIn                           :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        dataSel                           :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        startSel                          :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        dataOut_re                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        dataOut_im                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        startOut                          :   OUT   std_logic
        );
END LTE_MIB_H_ip_src_Preprocessor;


ARCHITECTURE rtl OF LTE_MIB_H_ip_src_Preprocessor IS

  -- Component Declarations
  COMPONENT LTE_MIB_H_ip_src_Test_Data_Generator
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          enb_1_32_0                      :   IN    std_logic;
          enb_1_32_1                      :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          dataOut_im                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          startOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT LTE_MIB_H_ip_src_Vector_Decimator
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataI_in                        :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
          dataQ_in                        :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
          validIn_I                       :   IN    std_logic;
          validIn_Q                       :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          dataOut_im                      :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En15
          );
  END COMPONENT;

  COMPONENT LTE_MIB_H_ip_src_Data_Conditioner
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          In1_re                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          In1_im                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          Out1_re                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          Out1_im                         :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En15
          );
  END COMPONENT;

  COMPONENT LTE_MIB_H_ip_src_Start_Pulse_Generator
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          startIn                         :   IN    std_logic;
          startOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT LTE_MIB_H_ip_src_Data_Start
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          pulseIn                         :   IN    std_logic;
          pulseOut                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : LTE_MIB_H_ip_src_Test_Data_Generator
    USE ENTITY work.LTE_MIB_H_ip_src_Test_Data_Generator(rtl);

  FOR ALL : LTE_MIB_H_ip_src_Vector_Decimator
    USE ENTITY work.LTE_MIB_H_ip_src_Vector_Decimator(rtl);

  FOR ALL : LTE_MIB_H_ip_src_Data_Conditioner
    USE ENTITY work.LTE_MIB_H_ip_src_Data_Conditioner(rtl);

  FOR ALL : LTE_MIB_H_ip_src_Start_Pulse_Generator
    USE ENTITY work.LTE_MIB_H_ip_src_Start_Pulse_Generator(rtl);

  FOR ALL : LTE_MIB_H_ip_src_Data_Start
    USE ENTITY work.LTE_MIB_H_ip_src_Data_Start(rtl);

  -- Signals
  SIGNAL dataSel_signed                   : signed(31 DOWNTO 0);  -- int32
  SIGNAL FixedPoint_Conversion2_out1      : std_logic;
  SIGNAL delayMatch1_reg                  : std_logic_vector(0 TO 31);  -- ufix1 [32]
  SIGNAL FixedPoint_Conversion2_out1_1    : std_logic;
  SIGNAL Test_Data_Generator_out1_re      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Test_Data_Generator_out1_im      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Test_Data_Generator_out2         : std_logic;
  SIGNAL Test_Data_Generator_out1_re_signed : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Test_Data_Generator_out1_im_signed : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Vector_Decimator_out1_re         : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Vector_Decimator_out1_im         : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Vector_Decimator_out1_re_signed  : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Vector_Decimator_out1_im_signed  : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL delayMatch_reg_re                : vector_of_signed16(0 TO 31);  -- sfix16_En15 [32]
  SIGNAL delayMatch_reg_im                : vector_of_signed16(0 TO 31);  -- sfix16_En15 [32]
  SIGNAL Vector_Decimator_out1_re_1       : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Vector_Decimator_out1_im_1       : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL dataIn_re                        : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL dataIn_im                        : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Data_Conditioner_out1_re         : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Data_Conditioner_out1_im         : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL startSel_signed                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL FixedPoint_Conversion5_out1      : std_logic;
  SIGNAL startIn_signed                   : signed(31 DOWNTO 0);  -- int32
  SIGNAL FixedPoint_Conversion1_out1      : std_logic;
  SIGNAL Start_Pulse_Generator_out1       : std_logic;
  SIGNAL Switch1_out1                     : std_logic;
  SIGNAL Data_Start_out1                  : std_logic;

BEGIN
  u_Test_Data_Generator : LTE_MIB_H_ip_src_Test_Data_Generator
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              enb_1_32_0 => enb_1_32_0,
              enb_1_32_1 => enb_1_32_1,
              dataOut_re => Test_Data_Generator_out1_re,  -- sfix16_En15
              dataOut_im => Test_Data_Generator_out1_im,  -- sfix16_En15
              startOut => Test_Data_Generator_out2
              );

  u_Vector_Decimator : LTE_MIB_H_ip_src_Vector_Decimator
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataI_in => I_In,  -- ufix128
              dataQ_in => Q_In,  -- ufix128
              validIn_I => I_validIn,
              validIn_Q => Q_validIn,
              dataOut_re => Vector_Decimator_out1_re,  -- sfix16_En15
              dataOut_im => Vector_Decimator_out1_im  -- sfix16_En15
              );

  u_Data_Conditioner : LTE_MIB_H_ip_src_Data_Conditioner
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              enb_1_2_0 => enb_1_2_0,
              enb_1_1_1 => enb_1_1_1,
              In1_re => std_logic_vector(dataIn_re),  -- sfix16_En15
              In1_im => std_logic_vector(dataIn_im),  -- sfix16_En15
              Out1_re => Data_Conditioner_out1_re,  -- sfix16_En15
              Out1_im => Data_Conditioner_out1_im  -- sfix16_En15
              );

  u_Start_Pulse_Generator : LTE_MIB_H_ip_src_Start_Pulse_Generator
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              startIn => FixedPoint_Conversion1_out1,
              startOut => Start_Pulse_Generator_out1
              );

  u_Data_Start : LTE_MIB_H_ip_src_Data_Start
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              enb_1_2_0 => enb_1_2_0,
              enb_1_2_1 => enb_1_2_1,
              pulseIn => Switch1_out1,
              pulseOut => Data_Start_out1
              );

  dataSel_signed <= signed(dataSel);

  
  FixedPoint_Conversion2_out1 <= '1' WHEN dataSel_signed /= to_signed(0, 32) ELSE
      '0';

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch1_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch1_reg(0) <= FixedPoint_Conversion2_out1;
        delayMatch1_reg(1 TO 31) <= delayMatch1_reg(0 TO 30);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  FixedPoint_Conversion2_out1_1 <= delayMatch1_reg(31);

  Test_Data_Generator_out1_re_signed <= signed(Test_Data_Generator_out1_re);

  Test_Data_Generator_out1_im_signed <= signed(Test_Data_Generator_out1_im);

  Vector_Decimator_out1_re_signed <= signed(Vector_Decimator_out1_re);

  Vector_Decimator_out1_im_signed <= signed(Vector_Decimator_out1_im);

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch_reg_re <= (OTHERS => to_signed(16#0000#, 16));
        delayMatch_reg_im <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        delayMatch_reg_im(0) <= Vector_Decimator_out1_im_signed;
        delayMatch_reg_im(1 TO 31) <= delayMatch_reg_im(0 TO 30);
        delayMatch_reg_re(0) <= Vector_Decimator_out1_re_signed;
        delayMatch_reg_re(1 TO 31) <= delayMatch_reg_re(0 TO 30);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  Vector_Decimator_out1_re_1 <= delayMatch_reg_re(31);
  Vector_Decimator_out1_im_1 <= delayMatch_reg_im(31);

  
  dataIn_re <= Test_Data_Generator_out1_re_signed WHEN FixedPoint_Conversion2_out1_1 = '0' ELSE
      Vector_Decimator_out1_re_1;
  
  dataIn_im <= Test_Data_Generator_out1_im_signed WHEN FixedPoint_Conversion2_out1_1 = '0' ELSE
      Vector_Decimator_out1_im_1;

  startSel_signed <= signed(startSel);

  
  FixedPoint_Conversion5_out1 <= '1' WHEN startSel_signed /= to_signed(0, 32) ELSE
      '0';

  startIn_signed <= signed(startIn);

  
  FixedPoint_Conversion1_out1 <= '1' WHEN startIn_signed /= to_signed(0, 32) ELSE
      '0';

  
  Switch1_out1 <= Test_Data_Generator_out2 WHEN FixedPoint_Conversion5_out1 = '0' ELSE
      Start_Pulse_Generator_out1;

  dataOut_re <= Data_Conditioner_out1_re;

  dataOut_im <= Data_Conditioner_out1_im;

  startOut <= Data_Start_out1;

END rtl;

