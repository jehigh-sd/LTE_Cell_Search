-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\zynqRadioHWSWLTEMIBDetectorRFSoC2x2\LTE_MIB_H_ip_src_LTE_MIB_HDL.vhd
-- Created: 2022-05-23 17:26:55
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1.6276e-08
-- Target subsystem base rate: 1.6276e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1.6276e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ncellid                       ce_out        1.6276e-08
-- tddmode                       ce_out        1.6276e-08
-- freqest                       ce_out        1.6276e-08
-- celldetected                  ce_out        1.6276e-08
-- cellsearchdone                ce_out        1.6276e-08
-- NDLRB                         ce_out        1.6276e-08
-- PHICH                         ce_out        1.6276e-08
-- ng                            ce_out        1.6276e-08
-- nframe                        ce_out        1.6276e-08
-- cellrefip                     ce_out        1.6276e-08
-- mibdetected                   ce_out        1.6276e-08
-- miberror                      ce_out        1.6276e-08
-- rxdatai_ready                 ce_out        1.6276e-08
-- rxdataq_ready                 ce_out        1.6276e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: LTE_MIB_H_ip_src_LTE_MIB_HDL
-- Source Path: zynqRadioHWSWLTEMIBDetectorRFSoC2x2/LTE_MIB_HDL
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY LTE_MIB_H_ip_src_LTE_MIB_HDL IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        rxdatai_in                        :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
        rxdataq_in                        :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
        rxdatai_valid                     :   IN    std_logic;
        rxdataq_valid                     :   IN    std_logic;
        start_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        extdatasel_in                     :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        ce_out                            :   OUT   std_logic;
        ncellid                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
        tddmode                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
        freqest                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
        celldetected                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
        cellsearchdone                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
        NDLRB                             :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
        PHICH                             :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
        ng                                :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
        nframe                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
        cellrefip                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
        mibdetected                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
        miberror                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
        rxdatai_ready                     :   OUT   std_logic;
        rxdataq_ready                     :   OUT   std_logic
        );
END LTE_MIB_H_ip_src_LTE_MIB_HDL;


ARCHITECTURE rtl OF LTE_MIB_H_ip_src_LTE_MIB_HDL IS

  -- Component Declarations
  COMPONENT LTE_MIB_H_ip_src_LTE_MIB_HDL_tc
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_1_1                       :   OUT   std_logic;
          enb_1_2_0                       :   OUT   std_logic;
          enb_1_2_1                       :   OUT   std_logic;
          enb_1_32_0                      :   OUT   std_logic;
          enb_1_32_1                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT LTE_MIB_H_ip_src_Preprocessor
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          enb_1_32_0                      :   IN    std_logic;
          enb_1_32_1                      :   IN    std_logic;
          I_In                            :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
          Q_In                            :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
          I_validIn                       :   IN    std_logic;
          Q_validIn                       :   IN    std_logic;
          startIn                         :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
          dataSel                         :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
          startSel                        :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
          dataOut_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          dataOut_im                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          startOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT LTE_MIB_H_ip_src_HDL_LTE_MIB_Recovery
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          startIn                         :   IN    std_logic;
          NCellID                         :   OUT   std_logic_vector(8 DOWNTO 0);  -- ufix9
          TDDMode                         :   OUT   std_logic;
          freqEst                         :   OUT   std_logic_vector(13 DOWNTO 0);  -- sfix14
          cellDetected                    :   OUT   std_logic;
          cellSearchDone                  :   OUT   std_logic;
          NDLRB                           :   OUT   std_logic_vector(6 DOWNTO 0);  -- ufix7
          PHICH                           :   OUT   std_logic;
          Ng                              :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          NFrame                          :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
          CellRefP                        :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
          mibDetected                     :   OUT   std_logic;
          mibError                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT LTE_MIB_H_ip_src_Postprocessor
    PORT( In1                             :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
          In2                             :   IN    std_logic;
          In3                             :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14
          In4                             :   IN    std_logic;
          In5                             :   IN    std_logic;
          In6                             :   IN    std_logic_vector(6 DOWNTO 0);  -- ufix7
          In7                             :   IN    std_logic;
          In8                             :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          In9                             :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          In10                            :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          In11                            :   IN    std_logic;
          In12                            :   IN    std_logic;
          Out1                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
          Out2                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
          Out3                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
          Out4                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
          Out5                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
          Out6                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
          Out7                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
          Out8                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
          Out9                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
          Out10                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
          Out11                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
          Out12                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
          Out13                           :   OUT   std_logic;
          Out14                           :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : LTE_MIB_H_ip_src_LTE_MIB_HDL_tc
    USE ENTITY work.LTE_MIB_H_ip_src_LTE_MIB_HDL_tc(rtl);

  FOR ALL : LTE_MIB_H_ip_src_Preprocessor
    USE ENTITY work.LTE_MIB_H_ip_src_Preprocessor(rtl);

  FOR ALL : LTE_MIB_H_ip_src_HDL_LTE_MIB_Recovery
    USE ENTITY work.LTE_MIB_H_ip_src_HDL_LTE_MIB_Recovery(rtl);

  FOR ALL : LTE_MIB_H_ip_src_Postprocessor
    USE ENTITY work.LTE_MIB_H_ip_src_Postprocessor(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_2_0                        : std_logic;
  SIGNAL enb_1_2_1                        : std_logic;
  SIGNAL enb_1_1_1                        : std_logic;
  SIGNAL enb_1_32_0                       : std_logic;
  SIGNAL enb_1_32_1                       : std_logic;
  SIGNAL Preprocessor_out1_re             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Preprocessor_out1_im             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Preprocessor_out2                : std_logic;
  SIGNAL Preprocessor_out1_re_signed      : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Preprocessor_out1_im_signed      : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL HDL_LTE_MIB_Recovery1_bypass_reg_re : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL HDL_LTE_MIB_Recovery1_bypass_reg_im : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Preprocessor_out1_re_1           : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Preprocessor_out1_im_1           : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL NCellID_1                        : std_logic_vector(8 DOWNTO 0);  -- ufix9
  SIGNAL TDDMode_1                        : std_logic;
  SIGNAL HDL_LTE_MIB_Recovery_out3        : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL PSSDetected                      : std_logic;
  SIGNAL HDL_LTE_MIB_Recovery_out5        : std_logic;
  SIGNAL HDL_LTE_MIB_Recovery_out6        : std_logic_vector(6 DOWNTO 0);  -- ufix7
  SIGNAL HDL_LTE_MIB_Recovery_out7        : std_logic;
  SIGNAL HDL_LTE_MIB_Recovery_out8        : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL HDL_LTE_MIB_Recovery_out9        : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL HDL_LTE_MIB_Recovery_out10       : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL HDL_LTE_MIB_Recovery_out11       : std_logic;
  SIGNAL HDL_LTE_MIB_Recovery_out12       : std_logic;
  SIGNAL Postprocessor_out1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Postprocessor_out2               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Postprocessor_out3               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Postprocessor_out4               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Postprocessor_out5               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Postprocessor_out6               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Postprocessor_out7               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Postprocessor_out8               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Postprocessor_out9               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Postprocessor_out10              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Postprocessor_out11              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Postprocessor_out12              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Postprocessor_out13              : std_logic;
  SIGNAL Postprocessor_out14              : std_logic;
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL Postprocessor_out13_1            : std_logic;
  SIGNAL delayMatch1_reg                  : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL Postprocessor_out14_1            : std_logic;

BEGIN
  u_LTE_MIB_HDL_tc : LTE_MIB_H_ip_src_LTE_MIB_HDL_tc
    PORT MAP( clk => clk,
              reset_x => reset_x,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              enb_1_2_0 => enb_1_2_0,
              enb_1_2_1 => enb_1_2_1,
              enb_1_32_0 => enb_1_32_0,
              enb_1_32_1 => enb_1_32_1
              );

  u_Preprocessor : LTE_MIB_H_ip_src_Preprocessor
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              enb_1_2_0 => enb_1_2_0,
              enb_1_2_1 => enb_1_2_1,
              enb_1_1_1 => enb_1_1_1,
              enb_1_32_0 => enb_1_32_0,
              enb_1_32_1 => enb_1_32_1,
              I_In => rxdatai_in,  -- ufix128
              Q_In => rxdataq_in,  -- ufix128
              I_validIn => rxdatai_valid,
              Q_validIn => rxdataq_valid,
              startIn => start_in,  -- int32
              dataSel => extdatasel_in,  -- int32
              startSel => extdatasel_in,  -- int32
              dataOut_re => Preprocessor_out1_re,  -- sfix16_En15
              dataOut_im => Preprocessor_out1_im,  -- sfix16_En15
              startOut => Preprocessor_out2
              );

  u_HDL_LTE_MIB_Recovery : LTE_MIB_H_ip_src_HDL_LTE_MIB_Recovery
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              enb_1_2_0 => enb_1_2_0,
              enb_1_2_1 => enb_1_2_1,
              dataIn_re => std_logic_vector(Preprocessor_out1_re_1),  -- sfix16_En15
              dataIn_im => std_logic_vector(Preprocessor_out1_im_1),  -- sfix16_En15
              startIn => Preprocessor_out2,
              NCellID => NCellID_1,  -- ufix9
              TDDMode => TDDMode_1,
              freqEst => HDL_LTE_MIB_Recovery_out3,  -- sfix14
              cellDetected => PSSDetected,
              cellSearchDone => HDL_LTE_MIB_Recovery_out5,
              NDLRB => HDL_LTE_MIB_Recovery_out6,  -- ufix7
              PHICH => HDL_LTE_MIB_Recovery_out7,
              Ng => HDL_LTE_MIB_Recovery_out8,  -- ufix2
              NFrame => HDL_LTE_MIB_Recovery_out9,  -- ufix10
              CellRefP => HDL_LTE_MIB_Recovery_out10,  -- ufix3
              mibDetected => HDL_LTE_MIB_Recovery_out11,
              mibError => HDL_LTE_MIB_Recovery_out12
              );

  u_Postprocessor : LTE_MIB_H_ip_src_Postprocessor
    PORT MAP( In1 => NCellID_1,  -- ufix9
              In2 => TDDMode_1,
              In3 => HDL_LTE_MIB_Recovery_out3,  -- sfix14
              In4 => PSSDetected,
              In5 => HDL_LTE_MIB_Recovery_out5,
              In6 => HDL_LTE_MIB_Recovery_out6,  -- ufix7
              In7 => HDL_LTE_MIB_Recovery_out7,
              In8 => HDL_LTE_MIB_Recovery_out8,  -- ufix2
              In9 => HDL_LTE_MIB_Recovery_out9,  -- ufix10
              In10 => HDL_LTE_MIB_Recovery_out10,  -- ufix3
              In11 => HDL_LTE_MIB_Recovery_out11,
              In12 => HDL_LTE_MIB_Recovery_out12,
              Out1 => Postprocessor_out1,  -- int32
              Out2 => Postprocessor_out2,  -- int32
              Out3 => Postprocessor_out3,  -- int32
              Out4 => Postprocessor_out4,  -- int32
              Out5 => Postprocessor_out5,  -- int32
              Out6 => Postprocessor_out6,  -- int32
              Out7 => Postprocessor_out7,  -- int32
              Out8 => Postprocessor_out8,  -- int32
              Out9 => Postprocessor_out9,  -- int32
              Out10 => Postprocessor_out10,  -- int32
              Out11 => Postprocessor_out11,  -- int32
              Out12 => Postprocessor_out12,  -- int32
              Out13 => Postprocessor_out13,
              Out14 => Postprocessor_out14
              );

  Preprocessor_out1_re_signed <= signed(Preprocessor_out1_re);

  Preprocessor_out1_im_signed <= signed(Preprocessor_out1_im);

  HDL_LTE_MIB_Recovery1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HDL_LTE_MIB_Recovery1_bypass_reg_re <= to_signed(16#0000#, 16);
        HDL_LTE_MIB_Recovery1_bypass_reg_im <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_1 = '1' THEN
        HDL_LTE_MIB_Recovery1_bypass_reg_im <= Preprocessor_out1_im_signed;
        HDL_LTE_MIB_Recovery1_bypass_reg_re <= Preprocessor_out1_re_signed;
      END IF;
    END IF;
  END PROCESS HDL_LTE_MIB_Recovery1_bypass_process;

  
  Preprocessor_out1_re_1 <= Preprocessor_out1_re_signed WHEN enb_1_2_1 = '1' ELSE
      HDL_LTE_MIB_Recovery1_bypass_reg_re;
  
  Preprocessor_out1_im_1 <= Preprocessor_out1_im_signed WHEN enb_1_2_1 = '1' ELSE
      HDL_LTE_MIB_Recovery1_bypass_reg_im;

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch_reg(0) <= Postprocessor_out13;
        delayMatch_reg(1 TO 41) <= delayMatch_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  Postprocessor_out13_1 <= delayMatch_reg(41);

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch1_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch1_reg(0) <= Postprocessor_out14;
        delayMatch1_reg(1 TO 41) <= delayMatch1_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  Postprocessor_out14_1 <= delayMatch1_reg(41);

  ce_out <= enb_1_1_1;

  ncellid <= Postprocessor_out1;

  tddmode <= Postprocessor_out2;

  freqest <= Postprocessor_out3;

  celldetected <= Postprocessor_out4;

  cellsearchdone <= Postprocessor_out5;

  NDLRB <= Postprocessor_out6;

  PHICH <= Postprocessor_out7;

  ng <= Postprocessor_out8;

  nframe <= Postprocessor_out9;

  cellrefip <= Postprocessor_out10;

  mibdetected <= Postprocessor_out11;

  miberror <= Postprocessor_out12;

  rxdatai_ready <= Postprocessor_out13_1;

  rxdataq_ready <= Postprocessor_out14_1;

END rtl;

