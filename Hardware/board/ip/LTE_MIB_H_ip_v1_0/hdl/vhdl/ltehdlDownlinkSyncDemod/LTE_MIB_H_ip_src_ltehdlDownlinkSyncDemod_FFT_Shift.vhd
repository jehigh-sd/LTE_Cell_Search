-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\zynqRadioHWSWLTEMIBDetectorRFSoC2x2\ltehdlDownlinkSyncDemod\LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_FFT_Shift.vhd
-- Created: 2022-05-23 17:26:44
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_FFT_Shift
-- Source Path: ltehdlDownlinkSyncDemod/OFDM Demodulation/FFT Shift
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_FFT_Shift IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        dataIn_im                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        validIn                           :   IN    std_logic;
        reset                             :   IN    std_logic;
        dataOut_re                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        dataOut_im                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        validOut                          :   OUT   std_logic
        );
END LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_FFT_Shift;


ARCHITECTURE rtl OF LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_FFT_Shift IS

  -- Signals
  SIGNAL counter_ctrl_const_out           : std_logic;
  SIGNAL counter_ctrl_delay_out           : std_logic;
  SIGNAL counter_Initial_Val_out          : std_logic;  -- ufix1
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 20);  -- ufix1 [21]
  SIGNAL reset_1                          : std_logic;
  SIGNAL count_step                       : std_logic;  -- ufix1
  SIGNAL count_from                       : std_logic;  -- ufix1
  SIGNAL count_reset                      : std_logic;  -- ufix1
  SIGNAL counter_out1                     : std_logic;  -- ufix1
  SIGNAL count                            : std_logic;  -- ufix1
  SIGNAL need_to_wrap                     : std_logic;
  SIGNAL count_value                      : std_logic;  -- ufix1
  SIGNAL count_1                          : std_logic;  -- ufix1
  SIGNAL count_2                          : std_logic;  -- ufix1
  SIGNAL counter_out                      : std_logic;  -- ufix1
  SIGNAL dataIn_re_signed                 : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL dataIn_im_signed                 : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Gain_cast                        : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL Gain_cast_1                      : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL Gain_cast_2                      : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Gain_cast_3                      : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL Gain_cast_4                      : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL Gain_cast_5                      : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Gain_out1_re                     : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Gain_out1_im                     : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Switch_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Switch_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay_out1_re                    : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay_out1_im                    : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay1_out1                      : std_logic;

BEGIN
  -- Output toggles between 
  -- zero and one 

  counter_ctrl_const_out <= '1';

  counter_ctrl_delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        counter_ctrl_delay_out <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        counter_ctrl_delay_out <= counter_ctrl_const_out;
      END IF;
    END IF;
  END PROCESS counter_ctrl_delay_process;


  counter_Initial_Val_out <= '1';

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        delayMatch_reg(0) <= reset;
        delayMatch_reg(1 TO 20) <= delayMatch_reg(0 TO 19);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  reset_1 <= delayMatch_reg(20);

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = -1
  --  count to value  = 0
  count_step <= '1';

  count_from <= '1';

  count_reset <= '1';

  count <= counter_out1 XOR count_step;

  
  need_to_wrap <= '1' WHEN counter_out1 = '0' ELSE
      '0';

  
  count_value <= count WHEN need_to_wrap = '0' ELSE
      count_from;

  
  count_1 <= counter_out1 WHEN validIn = '0' ELSE
      count_value;

  
  count_2 <= count_1 WHEN reset_1 = '0' ELSE
      count_reset;

  counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        counter_out <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        counter_out <= count_2;
      END IF;
    END IF;
  END PROCESS counter_process;


  
  counter_out1 <= counter_Initial_Val_out WHEN counter_ctrl_delay_out = '0' ELSE
      counter_out;

  dataIn_re_signed <= signed(dataIn_re);

  dataIn_im_signed <= signed(dataIn_im);

  Gain_cast <= resize(dataIn_re_signed, 17);
  Gain_cast_1 <=  - (Gain_cast);
  Gain_cast_2 <= resize(Gain_cast_1, 18);
  Gain_out1_re <= Gain_cast_2(15 DOWNTO 0);
  Gain_cast_3 <= resize(dataIn_im_signed, 17);
  Gain_cast_4 <=  - (Gain_cast_3);
  Gain_cast_5 <= resize(Gain_cast_4, 18);
  Gain_out1_im <= Gain_cast_5(15 DOWNTO 0);

  
  Switch_out1_re <= Gain_out1_re WHEN counter_out1 = '0' ELSE
      dataIn_re_signed;
  
  Switch_out1_im <= Gain_out1_im WHEN counter_out1 = '0' ELSE
      dataIn_im_signed;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_out1_re <= to_signed(16#0000#, 16);
        Delay_out1_im <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        Delay_out1_re <= Switch_out1_re;
        Delay_out1_im <= Switch_out1_im;
      END IF;
    END IF;
  END PROCESS Delay_process;


  dataOut_re <= std_logic_vector(Delay_out1_re);

  dataOut_im <= std_logic_vector(Delay_out1_im);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Delay1_out1 <= validIn;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  validOut <= Delay1_out1;

END rtl;

