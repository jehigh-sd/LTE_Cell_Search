-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\zynqRadioHWSWLTEMIBDetectorRFSoC2x2\ltehdlDownlinkSyncDemod\LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_Quadrant_Mapper.vhd
-- Created: 2022-05-23 17:26:44
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_Quadrant_Mapper
-- Source Path: ltehdlDownlinkSyncDemod/FrequencyEstimation/Rect2Polar/HDL_CMA_core/Quadrant_Mapper
-- Hierarchy Level: 6
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_Quadrant_Mapper IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        xin                               :   IN    std_logic_vector(24 DOWNTO 0);  -- ufix25
        yin                               :   IN    std_logic_vector(24 DOWNTO 0);  -- ufix25
        xout                              :   OUT   std_logic_vector(24 DOWNTO 0);  -- ufix25
        yout                              :   OUT   std_logic_vector(24 DOWNTO 0);  -- ufix25
        QA_Control                        :   OUT   std_logic_vector(2 DOWNTO 0)  -- ufix3
        );
END LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_Quadrant_Mapper;


ARCHITECTURE rtl OF LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_Quadrant_Mapper IS

  -- Signals
  SIGNAL xin_signed                       : signed(24 DOWNTO 0);  -- sfix25_En23
  SIGNAL abs_y                            : signed(25 DOWNTO 0);  -- sfix26_En23
  SIGNAL abs_cast                         : signed(25 DOWNTO 0);  -- sfix26_En23
  SIGNAL xAbs                             : signed(24 DOWNTO 0);  -- sfix25_En23
  SIGNAL xAbsReg                          : signed(24 DOWNTO 0);  -- sfix25_En23
  SIGNAL yin_signed                       : signed(24 DOWNTO 0);  -- sfix25_En23
  SIGNAL abs_y_1                          : signed(25 DOWNTO 0);  -- sfix26_En23
  SIGNAL abs_cast_1                       : signed(25 DOWNTO 0);  -- sfix26_En23
  SIGNAL yAbs                             : signed(24 DOWNTO 0);  -- sfix25_En23
  SIGNAL yAbsReg                          : signed(24 DOWNTO 0);  -- sfix25_En23
  SIGNAL relop_relop1                     : std_logic;
  SIGNAL xout_1                           : signed(24 DOWNTO 0);  -- sfix25_En23
  SIGNAL yout_1                           : signed(24 DOWNTO 0);  -- sfix25_En23
  SIGNAL in1reg                           : signed(24 DOWNTO 0);  -- sfix25_En23
  SIGNAL zeros                            : signed(24 DOWNTO 0);  -- sfix25_En23
  SIGNAL relop_relop1_1                   : std_logic;
  SIGNAL in2reg                           : signed(24 DOWNTO 0);  -- sfix25_En23
  SIGNAL relop_relop1_2                   : std_logic;
  SIGNAL qcControl                        : unsigned(2 DOWNTO 0);  -- ufix3

BEGIN
  xin_signed <= signed(xin);

  abs_cast <= resize(xin_signed, 26);
  
  abs_y <=  - (abs_cast) WHEN xin_signed < to_signed(16#0000000#, 25) ELSE
      resize(xin_signed, 26);
  xAbs <= abs_y(24 DOWNTO 0);

  DelayxAbs_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        xAbsReg <= to_signed(16#0000000#, 25);
      ELSIF enb = '1' THEN
        xAbsReg <= xAbs;
      END IF;
    END IF;
  END PROCESS DelayxAbs_process;


  yin_signed <= signed(yin);

  abs_cast_1 <= resize(yin_signed, 26);
  
  abs_y_1 <=  - (abs_cast_1) WHEN yin_signed < to_signed(16#0000000#, 25) ELSE
      resize(yin_signed, 26);
  yAbs <= abs_y_1(24 DOWNTO 0);

  DelayyAbs_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        yAbsReg <= to_signed(16#0000000#, 25);
      ELSIF enb = '1' THEN
        yAbsReg <= yAbs;
      END IF;
    END IF;
  END PROCESS DelayyAbs_process;


  
  relop_relop1 <= '1' WHEN xAbsReg > yAbsReg ELSE
      '0';

  
  xout_1 <= yAbsReg WHEN relop_relop1 = '0' ELSE
      xAbsReg;

  xout <= std_logic_vector(xout_1);

  
  yout_1 <= xAbsReg WHEN relop_relop1 = '0' ELSE
      yAbsReg;

  yout <= std_logic_vector(yout_1);

  Delayin1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        in1reg <= to_signed(16#0000000#, 25);
      ELSIF enb = '1' THEN
        in1reg <= xin_signed;
      END IF;
    END IF;
  END PROCESS Delayin1_process;


  zeros <= to_signed(16#0000000#, 25);

  
  relop_relop1_1 <= '1' WHEN in1reg < zeros ELSE
      '0';

  Delayin2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        in2reg <= to_signed(16#0000000#, 25);
      ELSIF enb = '1' THEN
        in2reg <= yin_signed;
      END IF;
    END IF;
  END PROCESS Delayin2_process;


  
  relop_relop1_2 <= '1' WHEN in2reg < zeros ELSE
      '0';

  qcControl <= unsigned'(relop_relop1 & relop_relop1_1 & relop_relop1_2);

  QA_Control <= std_logic_vector(qcControl);

END rtl;

