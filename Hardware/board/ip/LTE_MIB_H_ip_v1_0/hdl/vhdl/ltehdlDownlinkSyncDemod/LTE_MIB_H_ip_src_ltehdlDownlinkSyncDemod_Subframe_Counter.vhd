-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\zynqRadioHWSWLTEMIBDetectorRFSoC2x2\ltehdlDownlinkSyncDemod\LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_Subframe_Counter.vhd
-- Created: 2022-05-23 17:26:44
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_Subframe_Counter
-- Source Path: ltehdlDownlinkSyncDemod/Subframe Counter
-- Hierarchy Level: 3
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_Subframe_Counter IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        validIn                           :   IN    std_logic;
        reset                             :   IN    std_logic;
        subframe                          :   OUT   std_logic_vector(3 DOWNTO 0)  -- ufix4
        );
END LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_Subframe_Counter;


ARCHITECTURE rtl OF LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_Subframe_Counter IS

  -- Signals
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 20);  -- ufix1 [21]
  SIGNAL reset_1                          : std_logic;
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL delayMatch1_reg                  : std_logic_vector(0 TO 20);  -- ufix1 [21]
  SIGNAL stateControl_2                   : std_logic;
  SIGNAL enb_1_2_0_gated                  : std_logic;
  SIGNAL subframe_1                       : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL reg_sampleCount                  : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL reg_subframeCount                : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL reg_sampleCount_next             : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL reg_subframeCount_next           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL subframe_bypass                  : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL subframe_last_value              : unsigned(3 DOWNTO 0);  -- ufix4

BEGIN
  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        delayMatch_reg(0) <= reset;
        delayMatch_reg(1 TO 20) <= delayMatch_reg(0 TO 19);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  reset_1 <= delayMatch_reg(20);

  stateControl_1 <= '1';

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch1_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        delayMatch1_reg(0) <= stateControl_1;
        delayMatch1_reg(1 TO 20) <= delayMatch1_reg(0 TO 19);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  stateControl_2 <= delayMatch1_reg(20);

  enb_1_2_0_gated <= stateControl_2 AND enb_1_2_0;

  Subframe_Counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        reg_sampleCount <= to_unsigned(16#0000#, 15);
        reg_subframeCount <= to_unsigned(16#0#, 4);
      ELSIF enb_1_2_0_gated = '1' THEN
        reg_sampleCount <= reg_sampleCount_next;
        reg_subframeCount <= reg_subframeCount_next;
      END IF;
    END IF;
  END PROCESS Subframe_Counter_process;

  Subframe_Counter_output : PROCESS (reg_sampleCount, reg_subframeCount, reset_1, validIn)
  BEGIN
    -- Each subframe consists of 14 OFDM symbols, each containing 2048 samples. 
    -- Sample count tracks samples # within each subframe.
    -- There are 10 subframes within a frame.
    -- Assign outputs
    -- Initialize next states
    reg_sampleCount_next <= reg_sampleCount;
    reg_subframeCount_next <= reg_subframeCount;
    -- Counters for keeping track of samples and symbols within each slot
    IF reset_1 = '1' THEN 
      reg_sampleCount_next <= to_unsigned(16#0000#, 15);
      reg_subframeCount_next <= to_unsigned(16#0#, 4);
    ELSIF validIn = '1' THEN 
      IF reg_sampleCount < to_unsigned(16#6FFF#, 15) THEN 
        reg_sampleCount_next <= reg_sampleCount + to_unsigned(16#0001#, 15);
      ELSE 
        -- last sample of subframe
        reg_sampleCount_next <= to_unsigned(16#0000#, 15);
        IF reg_subframeCount < to_unsigned(16#9#, 4) THEN 
          reg_subframeCount_next <= reg_subframeCount + to_unsigned(16#1#, 4);
        ELSE 
          -- last subframe of frame
          reg_subframeCount_next <= to_unsigned(16#0#, 4);
        END IF;
      END IF;
    END IF;
    -- Update register with next values
    subframe_1 <= reg_subframeCount;
  END PROCESS Subframe_Counter_output;


  out0_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        subframe_last_value <= to_unsigned(16#0#, 4);
      ELSIF enb_1_2_0_gated = '1' THEN
        subframe_last_value <= subframe_bypass;
      END IF;
    END IF;
  END PROCESS out0_bypass_process;


  
  subframe_bypass <= subframe_last_value WHEN stateControl_2 = '0' ELSE
      subframe_1;

  subframe <= std_logic_vector(subframe_bypass);

END rtl;

