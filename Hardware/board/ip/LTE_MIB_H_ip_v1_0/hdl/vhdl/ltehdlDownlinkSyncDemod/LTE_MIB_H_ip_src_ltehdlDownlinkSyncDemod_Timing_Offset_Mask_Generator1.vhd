-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\zynqRadioHWSWLTEMIBDetectorRFSoC2x2\ltehdlDownlinkSyncDemod\LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_Timing_Offset_Mask_Generator1.vhd
-- Created: 2022-05-23 17:26:44
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_Timing_Offset_Mask_Generator1
-- Source Path: ltehdlDownlinkSyncDemod/Timing Offset Mask Generator1
-- Hierarchy Level: 3
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_Timing_Offset_Mask_Generator1 IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        validIn                           :   IN    std_logic;
        timingOffset                      :   IN    std_logic_vector(18 DOWNTO 0);  -- ufix19
        timingOffsetValid                 :   IN    std_logic;
        start                             :   IN    std_logic;
        validOut                          :   OUT   std_logic
        );
END LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_Timing_Offset_Mask_Generator1;


ARCHITECTURE rtl OF LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_Timing_Offset_Mask_Generator1 IS

  -- Signals
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 20);  -- ufix1 [21]
  SIGNAL start_1                          : std_logic;
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL delayMatch1_reg                  : std_logic_vector(0 TO 20);  -- ufix1 [21]
  SIGNAL stateControl_2                   : std_logic;
  SIGNAL enb_1_2_0_gated                  : std_logic;
  SIGNAL in1_unsigned                     : unsigned(18 DOWNTO 0);  -- ufix19
  SIGNAL validOut_1                       : std_logic;
  SIGNAL reg_timingReference              : unsigned(18 DOWNTO 0);  -- ufix19
  SIGNAL reg_state                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL reg_validOut                     : std_logic;
  SIGNAL reg_timingReference_next         : unsigned(18 DOWNTO 0);  -- ufix19
  SIGNAL reg_state_next                   : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL reg_validOut_next                : std_logic;
  SIGNAL validOut_2                       : std_logic;
  SIGNAL validOut_last_value              : std_logic;

BEGIN
  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        delayMatch_reg(0) <= start;
        delayMatch_reg(1 TO 20) <= delayMatch_reg(0 TO 19);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  start_1 <= delayMatch_reg(20);

  stateControl_1 <= '1';

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch1_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        delayMatch1_reg(0) <= stateControl_1;
        delayMatch1_reg(1 TO 20) <= delayMatch1_reg(0 TO 19);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  stateControl_2 <= delayMatch1_reg(20);

  enb_1_2_0_gated <= stateControl_2 AND enb_1_2_0;

  in1_unsigned <= unsigned(timingOffset);

  Timing_Offset_Mask_Generator1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        reg_timingReference <= to_unsigned(16#00000#, 19);
        reg_state <= to_unsigned(16#0#, 2);
        reg_validOut <= '0';
      ELSIF enb_1_2_0_gated = '1' THEN
        reg_timingReference <= reg_timingReference_next;
        reg_state <= reg_state_next;
        reg_validOut <= reg_validOut_next;
      END IF;
    END IF;
  END PROCESS Timing_Offset_Mask_Generator1_process;

  Timing_Offset_Mask_Generator1_output : PROCESS (in1_unsigned, reg_state, reg_timingReference, reg_validOut, start_1,
       timingOffsetValid, validIn)
  BEGIN
    -- Search state definitions
    -- Assign outputs
    -- Update states
    reg_timingReference_next <= reg_timingReference;
    reg_state_next <= reg_state;
    reg_validOut_next <= reg_validOut;
    -- Timing reference, runs continuously.
    -- Aligned with input samples.
    IF validIn = '1' THEN 
      IF reg_timingReference >= to_unsigned(16#4AFFF#, 19) THEN 
        reg_timingReference_next <= to_unsigned(16#00000#, 19);
      ELSE 
        reg_timingReference_next <= reg_timingReference + to_unsigned(16#00001#, 19);
      END IF;
    END IF;
    -- State machine
    IF start_1 = '1' THEN 
      reg_state_next <= to_unsigned(16#1#, 2);
    ELSE 
      CASE reg_state IS
        WHEN "01" =>
          IF timingOffsetValid = '1' THEN 
            reg_state_next <= to_unsigned(16#2#, 2);
          END IF;
          reg_validOut_next <= '0';
        WHEN "10" =>
          IF in1_unsigned = reg_timingReference THEN 
            reg_state_next <= to_unsigned(16#3#, 2);
            reg_validOut_next <= validIn;
          ELSE 
            reg_validOut_next <= '0';
          END IF;
        WHEN "11" =>
          reg_validOut_next <= validIn;
        WHEN OTHERS => 
          -- includes IDLE
          reg_validOut_next <= '0';
      END CASE;
    END IF;
    validOut_1 <= reg_validOut;
  END PROCESS Timing_Offset_Mask_Generator1_output;


  out0_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        validOut_last_value <= '0';
      ELSIF enb_1_2_0_gated = '1' THEN
        validOut_last_value <= validOut_2;
      END IF;
    END IF;
  END PROCESS out0_bypass_process;


  
  validOut_2 <= validOut_last_value WHEN stateControl_2 = '0' ELSE
      validOut_1;

  validOut <= validOut_2;

END rtl;

