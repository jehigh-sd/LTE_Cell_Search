-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\zynqRadioHWSWLTEMIBDetectorRFSoC2x2\ltehdlDownlinkSyncDemod\LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_SSS_Searcher.vhd
-- Created: 2022-05-23 17:26:44
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_SSS_Searcher
-- Source Path: ltehdlDownlinkSyncDemod/Sync Signal Search/SSS Searcher
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
LIBRARY work_ltehdlDownlinkSyncDemod;

ENTITY LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_SSS_Searcher IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        startBuffering                    :   IN    std_logic;
        PSSEndTimingOffset                :   IN    std_logic_vector(14 DOWNTO 0);  -- ufix15
        NCellID2                          :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        PSSDetected                       :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        dataIn_im                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        validIn                           :   IN    std_logic;
        NCellID                           :   OUT   std_logic_vector(8 DOWNTO 0);  -- ufix9
        done                              :   OUT   std_logic;
        success                           :   OUT   std_logic;
        timingOffset                      :   OUT   std_logic_vector(14 DOWNTO 0);  -- ufix15
        TDD                               :   OUT   std_logic
        );
END LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_SSS_Searcher;


ARCHITECTURE rtl OF LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_SSS_Searcher IS

  -- Component Declarations
  COMPONENT LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_SSS_Search_Controller
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          startBuffering                  :   IN    std_logic;
          PSSEndTimingOffset              :   IN    std_logic_vector(14 DOWNTO 0);  -- ufix15
          PSSDetected                     :   IN    std_logic;
          validIn                         :   IN    std_logic;
          modeDone                        :   IN    std_logic;
          SSSFound                        :   IN    std_logic;
          addr                            :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
          wrEn                            :   OUT   std_logic;
          rdEn                            :   OUT   std_logic;
          duplexMode                      :   OUT   std_logic;  -- ufix1
          SSSPSSPhaseAligned              :   OUT   std_logic;
          done                            :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_SinglePortRAM_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          din_re                          :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          din_im                          :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          addr                            :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          we                              :   IN    std_logic;
          dout_re                         :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          dout_im                         :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_FFT_HDL_Optimized_block
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          validIn                         :   IN    std_logic;
          syncReset                       :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
          dataOut_im                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_Max_Likelihood_SSS
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          NCellID2                        :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          validIn                         :   IN    std_logic;
          duplexMode                      :   IN    std_logic;  -- ufix1
          NCellID                         :   OUT   std_logic_vector(8 DOWNTO 0);  -- ufix9
          halfFrameIndicator              :   OUT   std_logic;
          TDD                             :   OUT   std_logic;
          success                         :   OUT   std_logic;
          modeDone                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_Determine_Frame_Timing
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enable                          :   IN    std_logic;
          PSSTimingOffset                 :   IN    std_logic_vector(14 DOWNTO 0);  -- ufix15
          TDD                             :   IN    std_logic;
          halfFrameIndicator              :   IN    std_logic;
          SSSPSSPhaseAligned              :   IN    std_logic;
          timingOffset                    :   OUT   std_logic_vector(14 DOWNTO 0)  -- ufix15
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_SSS_Search_Controller
    USE ENTITY work_ltehdlDownlinkSyncDemod.LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_SSS_Search_Controller(rtl);

  FOR ALL : LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_SinglePortRAM_generic
    USE ENTITY work_ltehdlDownlinkSyncDemod.LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_SinglePortRAM_generic(rtl);

  FOR ALL : LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_FFT_HDL_Optimized_block
    USE ENTITY work_ltehdlDownlinkSyncDemod.LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_FFT_HDL_Optimized_block(rtl);

  FOR ALL : LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_Max_Likelihood_SSS
    USE ENTITY work_ltehdlDownlinkSyncDemod.LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_Max_Likelihood_SSS(rtl);

  FOR ALL : LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_Determine_Frame_Timing
    USE ENTITY work_ltehdlDownlinkSyncDemod.LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_Determine_Frame_Timing(rtl);

  -- Signals
  SIGNAL dataIn_re_signed                 : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL dataIn_im_signed                 : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL dataIn_re_1                      : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL dataIn_im_1                      : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay3_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay3_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL validIn_1                        : std_logic;
  SIGNAL stateControl                     : std_logic;
  SIGNAL delayMatch3_reg                  : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL enb_gated                        : std_logic;
  SIGNAL stateControl_2                   : std_logic;
  SIGNAL delayMatch2_reg                  : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL stateControl_3                   : std_logic;
  SIGNAL enb_gated_1                      : std_logic;
  SIGNAL stateControl_4                   : std_logic;
  SIGNAL delayMatch1_reg                  : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL stateControl_5                   : std_logic;
  SIGNAL enb_gated_2                      : std_logic;
  SIGNAL stateControl_7                   : std_logic;
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL stateControl_8                   : std_logic;
  SIGNAL enb_gated_3                      : std_logic;
  SIGNAL duplexMode                       : std_logic;  -- ufix1
  SIGNAL Delay12_out1                     : std_logic;  -- ufix1
  SIGNAL rdEn                             : std_logic;
  SIGNAL RAMValidOut                      : std_logic;
  SIGNAL success_1                        : std_logic;
  SIGNAL success_2                        : std_logic;
  SIGNAL SSSFound                         : std_logic;
  SIGNAL modeDone                         : std_logic;
  SIGNAL modeDone_1                       : std_logic;
  SIGNAL modeDone_2                       : std_logic;
  SIGNAL addr                             : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL wrEn                             : std_logic;
  SIGNAL SSSPSSPhaseAligned               : std_logic;
  SIGNAL done_1                           : std_logic;
  SIGNAL RAMDataOut_re                    : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL RAMDataOut_im                    : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL FFTDataOut_re                    : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL FFTDataOut_im                    : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL FFTValidOut                      : std_logic;
  SIGNAL NCellID_1                        : std_logic_vector(8 DOWNTO 0);  -- ufix9
  SIGNAL halfFrameIndicator               : std_logic;
  SIGNAL TDD_1                            : std_logic;
  SIGNAL NCellID_2                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL NCellID_tmp                      : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL done_2                           : std_logic;
  SIGNAL success_3                        : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL halfFrameIndicator_1             : std_logic;
  SIGNAL SSSPSSPhaseAligned_1             : std_logic;
  SIGNAL timingOffset_tmp                 : std_logic_vector(14 DOWNTO 0);  -- ufix15
  SIGNAL TDD_2                            : std_logic;

BEGIN
  -- Introduce a 1 cycle delay to the data stream. This means that the PSS searcher outputs are advanced 1 cycle relative 
  -- to the the data stream, and simplifies the SSS state machine by giving it one cycle to respond to PSSDetected and 
  -- entering the WAITING_FOR_PSS_END state

  u_SSS_Search_Controller : LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_SSS_Search_Controller
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              startBuffering => startBuffering,
              PSSEndTimingOffset => PSSEndTimingOffset,  -- ufix15
              PSSDetected => PSSDetected,
              validIn => validIn_1,
              modeDone => modeDone_2,
              SSSFound => SSSFound,
              addr => addr,  -- ufix10
              wrEn => wrEn,
              rdEn => rdEn,
              duplexMode => duplexMode,  -- ufix1
              SSSPSSPhaseAligned => SSSPSSPhaseAligned,
              done => done_1
              );

  u_Single_Port_RAM_System : LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_SinglePortRAM_generic
    GENERIC MAP( AddrWidth => 10,
                 DataWidth => 16
                 )
    PORT MAP( clk => clk,
              enb => enb,
              din_re => std_logic_vector(Delay3_out1_re),
              din_im => std_logic_vector(Delay3_out1_im),
              addr => addr,
              we => wrEn,
              dout_re => RAMDataOut_re,
              dout_im => RAMDataOut_im
              );

  u_FFT_HDL_Optimized : LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_FFT_HDL_Optimized_block
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn_re => RAMDataOut_re,  -- ufix16
              dataIn_im => RAMDataOut_im,  -- ufix16
              validIn => RAMValidOut,
              syncReset => startBuffering,
              dataOut_re => FFTDataOut_re,  -- ufix16
              dataOut_im => FFTDataOut_im,  -- ufix16
              validOut => FFTValidOut
              );

  u_Max_Likelihood_SSS : LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_Max_Likelihood_SSS
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              reset => startBuffering,
              NCellID2 => NCellID2,  -- ufix2
              dataIn_re => FFTDataOut_re,  -- sfix16_En15
              dataIn_im => FFTDataOut_im,  -- sfix16_En15
              validIn => FFTValidOut,
              duplexMode => Delay12_out1,  -- ufix1
              NCellID => NCellID_1,  -- ufix9
              halfFrameIndicator => halfFrameIndicator,
              TDD => TDD_1,
              success => success_1,
              modeDone => modeDone
              );

  u_Determine_Frame_Timing : LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_Determine_Frame_Timing
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              reset => startBuffering,
              enable => Logical_Operator_out1,
              PSSTimingOffset => PSSEndTimingOffset,  -- ufix15
              TDD => TDD_1,
              halfFrameIndicator => halfFrameIndicator_1,
              SSSPSSPhaseAligned => SSSPSSPhaseAligned_1,
              timingOffset => timingOffset_tmp  -- ufix15
              );

  dataIn_re_signed <= signed(dataIn_re);

  dataIn_im_signed <= signed(dataIn_im);

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dataIn_re_1 <= to_signed(16#0000#, 16);
        dataIn_im_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        dataIn_re_1 <= dataIn_re_signed;
        dataIn_im_1 <= dataIn_im_signed;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1_re <= to_signed(16#0000#, 16);
        Delay3_out1_im <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay3_out1_re <= dataIn_re_1;
        Delay3_out1_im <= dataIn_im_1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        validIn_1 <= '0';
      ELSIF enb = '1' THEN
        validIn_1 <= validIn;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  stateControl <= '1';

  delayMatch3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch3_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch3_reg(0) <= stateControl;
        delayMatch3_reg(1 TO 41) <= delayMatch3_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch3_process;

  stateControl_1 <= delayMatch3_reg(41);

  enb_gated <= stateControl_1 AND enb;

  stateControl_2 <= '1';

  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch2_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch2_reg(0) <= stateControl_2;
        delayMatch2_reg(1 TO 41) <= delayMatch2_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  stateControl_3 <= delayMatch2_reg(41);

  enb_gated_1 <= stateControl_3 AND enb;

  stateControl_4 <= '1';

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch1_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch1_reg(0) <= stateControl_4;
        delayMatch1_reg(1 TO 41) <= delayMatch1_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  stateControl_5 <= delayMatch1_reg(41);

  enb_gated_2 <= stateControl_5 AND enb;

  stateControl_7 <= '1';

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch_reg(0) <= stateControl_7;
        delayMatch_reg(1 TO 41) <= delayMatch_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  stateControl_8 <= delayMatch_reg(41);

  enb_gated_3 <= stateControl_8 AND enb;

  Delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay12_out1 <= '0';
      ELSIF enb_gated_3 = '1' THEN
        Delay12_out1 <= duplexMode;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        RAMValidOut <= '0';
      ELSIF enb_gated_2 = '1' THEN
        RAMValidOut <= rdEn;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  success_2 <= success_1;

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        SSSFound <= '0';
      ELSIF enb_gated_1 = '1' THEN
        SSSFound <= success_2;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  modeDone_1 <= modeDone;

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        modeDone_2 <= '0';
      ELSIF enb_gated = '1' THEN
        modeDone_2 <= modeDone_1;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  NCellID_2 <= unsigned(NCellID_1);

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        NCellID_tmp <= to_unsigned(16#000#, 9);
      ELSIF enb = '1' THEN
        NCellID_tmp <= NCellID_2;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  NCellID <= std_logic_vector(NCellID_tmp);

  done_2 <= done_1;

  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        done <= '0';
      ELSIF enb = '1' THEN
        done <= done_2;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  success_3 <= success_1;

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        success <= '0';
      ELSIF enb = '1' THEN
        success <= success_3;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  Logical_Operator_out1 <= success_3 AND done_2;

  halfFrameIndicator_1 <= halfFrameIndicator;

  SSSPSSPhaseAligned_1 <= SSSPSSPhaseAligned;

  TDD_2 <= TDD_1;

  Delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        TDD <= '0';
      ELSIF enb = '1' THEN
        TDD <= TDD_2;
      END IF;
    END IF;
  END PROCESS Delay13_process;


  timingOffset <= timingOffset_tmp;

END rtl;

