-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\zynqRadioHWSWLTEMIBDetectorRFSoC2x2\LTE_MIB_H_ip.vhd
-- Created: 2022-05-23 17:29:03
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: -1
-- Target subsystem base rate: -1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: LTE_MIB_H_ip
-- Source Path: LTE_MIB_H_ip
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY LTE_MIB_H_ip IS
  PORT( IPCORE_CLK                        :   IN    std_logic;  -- ufix1
        IPCORE_RESETN                     :   IN    std_logic;  -- ufix1
        AXI4_Stream_I_Slave_TDATA         :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
        AXI4_Stream_I_Slave_TVALID        :   IN    std_logic;  -- ufix1
        AXI4_Stream_Q_Slave_TDATA         :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
        AXI4_Stream_Q_Slave_TVALID        :   IN    std_logic;  -- ufix1
        AXI4_Lite_ACLK                    :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARESETN                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_AWADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_AWVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_WDATA                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_WSTRB                   :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        AXI4_Lite_WVALID                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_BREADY                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_ARVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_RREADY                  :   IN    std_logic;  -- ufix1
        AXI4_Stream_I_Slave_TREADY        :   OUT   std_logic;  -- ufix1
        AXI4_Stream_Q_Slave_TREADY        :   OUT   std_logic;  -- ufix1
        AXI4_Lite_AWREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_WREADY                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_BRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_BVALID                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_ARREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_RDATA                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_RRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_RVALID                  :   OUT   std_logic  -- ufix1
        );
END LTE_MIB_H_ip;


ARCHITECTURE rtl OF LTE_MIB_H_ip IS

  -- Component Declarations
  COMPONENT LTE_MIB_H_ip_axi4_stream_q_slave
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          AXI4_Stream_Q_Slave_TDATA       :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
          AXI4_Stream_Q_Slave_TVALID      :   IN    std_logic;  -- ufix1
          user_ready                      :   IN    std_logic;  -- ufix1
          AXI4_Stream_Q_Slave_TREADY      :   OUT   std_logic;  -- ufix1
          user_data                       :   OUT   std_logic_vector(127 DOWNTO 0);  -- ufix128
          user_valid                      :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT LTE_MIB_H_ip_reset_sync
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_in                        :   IN    std_logic;  -- ufix1
          reset_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT LTE_MIB_H_ip_axi_lite
    PORT( reset_x                         :   IN    std_logic;
          AXI4_Lite_ACLK                  :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARESETN               :   IN    std_logic;  -- ufix1
          AXI4_Lite_AWADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_AWVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_WDATA                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_WSTRB                 :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          AXI4_Lite_WVALID                :   IN    std_logic;  -- ufix1
          AXI4_Lite_BREADY                :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_ARVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_RREADY                :   IN    std_logic;  -- ufix1
          read_ip_timestamp               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_ncellid                    :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          read_tddmode                    :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          read_freqest                    :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          read_celldetected               :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          read_cellsearchdone             :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          read_NDLRB                      :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          read_PHICH                      :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          read_ng                         :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          read_nframe                     :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          read_cellrefip                  :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          read_mibdetected                :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          read_miberror                   :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          AXI4_Lite_AWREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_WREADY                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_BRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_BVALID                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_ARREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_RDATA                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_RRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_RVALID                :   OUT   std_logic;  -- ufix1
          write_axi_enable                :   OUT   std_logic;  -- ufix1
          write_extdatasel_in             :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32
          write_start_in                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32
          reset_internal                  :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT LTE_MIB_H_ip_dut
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_x                         :   IN    std_logic;
          dut_enable                      :   IN    std_logic;  -- ufix1
          rxdatai_in                      :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
          rxdataq_in                      :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
          rxdatai_valid                   :   IN    std_logic;  -- ufix1
          rxdataq_valid                   :   IN    std_logic;  -- ufix1
          start_in                        :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          extdatasel_in                   :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          ce_out                          :   OUT   std_logic;  -- ufix1
          ncellid                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32
          tddmode                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32
          freqest                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32
          celldetected                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32
          cellsearchdone                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32
          NDLRB                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32
          PHICH                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32
          ng                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32
          nframe                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32
          cellrefip                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32
          mibdetected                     :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32
          miberror                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32
          rxdatai_ready                   :   OUT   std_logic;  -- ufix1
          rxdataq_ready                   :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT LTE_MIB_H_ip_axi4_stream_i_slave
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          AXI4_Stream_I_Slave_TDATA       :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
          AXI4_Stream_I_Slave_TVALID      :   IN    std_logic;  -- ufix1
          user_ready                      :   IN    std_logic;  -- ufix1
          AXI4_Stream_I_Slave_TREADY      :   OUT   std_logic;  -- ufix1
          user_data                       :   OUT   std_logic_vector(127 DOWNTO 0);  -- ufix128
          user_valid                      :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : LTE_MIB_H_ip_axi4_stream_q_slave
    USE ENTITY work.LTE_MIB_H_ip_axi4_stream_q_slave(rtl);

  FOR ALL : LTE_MIB_H_ip_reset_sync
    USE ENTITY work.LTE_MIB_H_ip_reset_sync(rtl);

  FOR ALL : LTE_MIB_H_ip_axi_lite
    USE ENTITY work.LTE_MIB_H_ip_axi_lite(rtl);

  FOR ALL : LTE_MIB_H_ip_dut
    USE ENTITY work.LTE_MIB_H_ip_dut(rtl);

  FOR ALL : LTE_MIB_H_ip_axi4_stream_i_slave
    USE ENTITY work.LTE_MIB_H_ip_axi4_stream_i_slave(rtl);

  -- Signals
  SIGNAL reset_x                          : std_logic;
  SIGNAL ip_timestamp                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reset_cm                         : std_logic;  -- ufix1
  SIGNAL const_1_1                        : std_logic;  -- ufix1
  SIGNAL rxdataq_ready_sig                : std_logic;  -- ufix1
  SIGNAL top_user_data                    : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL top_user_valid                   : std_logic;  -- ufix1
  SIGNAL reset_internal                   : std_logic;  -- ufix1
  SIGNAL reset_before_sync                : std_logic;  -- ufix1
  SIGNAL ncellid_sig                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL tddmode_sig                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL freqest_sig                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL celldetected_sig                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL cellsearchdone_sig               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL NDLRB_sig                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL PHICH_sig                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL ng_sig                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL nframe_sig                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL cellrefip_sig                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL mibdetected_sig                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL miberror_sig                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4_Lite_BRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL AXI4_Lite_RDATA_tmp              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4_Lite_RRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL write_axi_enable                 : std_logic;  -- ufix1
  SIGNAL write_extdatasel_in              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_start_in                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL top_user_data_1                  : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL top_user_valid_1                 : std_logic;  -- ufix1
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL rxdatai_ready_sig                : std_logic;  -- ufix1

BEGIN
  u_LTE_MIB_H_ip_axi4_stream_q_slave_inst : LTE_MIB_H_ip_axi4_stream_q_slave
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_x => reset_x,
              enb => const_1_1,
              AXI4_Stream_Q_Slave_TDATA => AXI4_Stream_Q_Slave_TDATA,  -- ufix128
              AXI4_Stream_Q_Slave_TVALID => AXI4_Stream_Q_Slave_TVALID,  -- ufix1
              user_ready => rxdataq_ready_sig,  -- ufix1
              AXI4_Stream_Q_Slave_TREADY => AXI4_Stream_Q_Slave_TREADY,  -- ufix1
              user_data => top_user_data,  -- ufix128
              user_valid => top_user_valid  -- ufix1
              );

  u_LTE_MIB_H_ip_reset_sync_inst : LTE_MIB_H_ip_reset_sync
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_in => reset_before_sync,  -- ufix1
              reset_out => reset_x
              );

  u_LTE_MIB_H_ip_axi_lite_inst : LTE_MIB_H_ip_axi_lite
    PORT MAP( reset_x => reset_x,
              AXI4_Lite_ACLK => AXI4_Lite_ACLK,  -- ufix1
              AXI4_Lite_ARESETN => AXI4_Lite_ARESETN,  -- ufix1
              AXI4_Lite_AWADDR => AXI4_Lite_AWADDR,  -- ufix16
              AXI4_Lite_AWVALID => AXI4_Lite_AWVALID,  -- ufix1
              AXI4_Lite_WDATA => AXI4_Lite_WDATA,  -- ufix32
              AXI4_Lite_WSTRB => AXI4_Lite_WSTRB,  -- ufix4
              AXI4_Lite_WVALID => AXI4_Lite_WVALID,  -- ufix1
              AXI4_Lite_BREADY => AXI4_Lite_BREADY,  -- ufix1
              AXI4_Lite_ARADDR => AXI4_Lite_ARADDR,  -- ufix16
              AXI4_Lite_ARVALID => AXI4_Lite_ARVALID,  -- ufix1
              AXI4_Lite_RREADY => AXI4_Lite_RREADY,  -- ufix1
              read_ip_timestamp => std_logic_vector(ip_timestamp),  -- ufix32
              read_ncellid => ncellid_sig,  -- sfix32
              read_tddmode => tddmode_sig,  -- sfix32
              read_freqest => freqest_sig,  -- sfix32
              read_celldetected => celldetected_sig,  -- sfix32
              read_cellsearchdone => cellsearchdone_sig,  -- sfix32
              read_NDLRB => NDLRB_sig,  -- sfix32
              read_PHICH => PHICH_sig,  -- sfix32
              read_ng => ng_sig,  -- sfix32
              read_nframe => nframe_sig,  -- sfix32
              read_cellrefip => cellrefip_sig,  -- sfix32
              read_mibdetected => mibdetected_sig,  -- sfix32
              read_miberror => miberror_sig,  -- sfix32
              AXI4_Lite_AWREADY => AXI4_Lite_AWREADY,  -- ufix1
              AXI4_Lite_WREADY => AXI4_Lite_WREADY,  -- ufix1
              AXI4_Lite_BRESP => AXI4_Lite_BRESP_tmp,  -- ufix2
              AXI4_Lite_BVALID => AXI4_Lite_BVALID,  -- ufix1
              AXI4_Lite_ARREADY => AXI4_Lite_ARREADY,  -- ufix1
              AXI4_Lite_RDATA => AXI4_Lite_RDATA_tmp,  -- ufix32
              AXI4_Lite_RRESP => AXI4_Lite_RRESP_tmp,  -- ufix2
              AXI4_Lite_RVALID => AXI4_Lite_RVALID,  -- ufix1
              write_axi_enable => write_axi_enable,  -- ufix1
              write_extdatasel_in => write_extdatasel_in,  -- sfix32
              write_start_in => write_start_in,  -- sfix32
              reset_internal => reset_internal  -- ufix1
              );

  u_LTE_MIB_H_ip_dut_inst : LTE_MIB_H_ip_dut
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_x => reset_x,
              dut_enable => write_axi_enable,  -- ufix1
              rxdatai_in => top_user_data_1,  -- ufix128
              rxdataq_in => top_user_data,  -- ufix128
              rxdatai_valid => top_user_valid_1,  -- ufix1
              rxdataq_valid => top_user_valid,  -- ufix1
              start_in => write_start_in,  -- sfix32
              extdatasel_in => write_extdatasel_in,  -- sfix32
              ce_out => ce_out_sig,  -- ufix1
              ncellid => ncellid_sig,  -- sfix32
              tddmode => tddmode_sig,  -- sfix32
              freqest => freqest_sig,  -- sfix32
              celldetected => celldetected_sig,  -- sfix32
              cellsearchdone => cellsearchdone_sig,  -- sfix32
              NDLRB => NDLRB_sig,  -- sfix32
              PHICH => PHICH_sig,  -- sfix32
              ng => ng_sig,  -- sfix32
              nframe => nframe_sig,  -- sfix32
              cellrefip => cellrefip_sig,  -- sfix32
              mibdetected => mibdetected_sig,  -- sfix32
              miberror => miberror_sig,  -- sfix32
              rxdatai_ready => rxdatai_ready_sig,  -- ufix1
              rxdataq_ready => rxdataq_ready_sig  -- ufix1
              );

  u_LTE_MIB_H_ip_axi4_stream_i_slave_inst : LTE_MIB_H_ip_axi4_stream_i_slave
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_x => reset_x,
              enb => const_1_1,
              AXI4_Stream_I_Slave_TDATA => AXI4_Stream_I_Slave_TDATA,  -- ufix128
              AXI4_Stream_I_Slave_TVALID => AXI4_Stream_I_Slave_TVALID,  -- ufix1
              user_ready => rxdatai_ready_sig,  -- ufix1
              AXI4_Stream_I_Slave_TREADY => AXI4_Stream_I_Slave_TREADY,  -- ufix1
              user_data => top_user_data_1,  -- ufix128
              user_valid => top_user_valid_1  -- ufix1
              );

  ip_timestamp <= unsigned'(X"83712A70");

  reset_cm <=  NOT IPCORE_RESETN;

  const_1_1 <= '1';

  reset_before_sync <= reset_cm OR reset_internal;

  AXI4_Lite_BRESP <= AXI4_Lite_BRESP_tmp;

  AXI4_Lite_RDATA <= AXI4_Lite_RDATA_tmp;

  AXI4_Lite_RRESP <= AXI4_Lite_RRESP_tmp;

END rtl;

