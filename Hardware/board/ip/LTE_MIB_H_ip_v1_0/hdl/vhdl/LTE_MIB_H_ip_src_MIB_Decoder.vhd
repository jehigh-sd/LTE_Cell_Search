-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\zynqRadioHWSWLTEMIBDetectorRFSoC2x2\LTE_MIB_H_ip_src_MIB_Decoder.vhd
-- Created: 2022-05-23 17:26:55
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: LTE_MIB_H_ip_src_MIB_Decoder
-- Source Path: zynqRadioHWSWLTEMIBDetectorRFSoC2x2/LTE_MIB_HDL/HDL LTE MIB Recovery/MIB Decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
LIBRARY work_ltehdlChannelEqualizer;
LIBRARY work_ltehdlPBCHDecoder;
LIBRARY work_ltehdlPBCHIndexing;
LIBRARY work_ltehdlResourceGrid;

ENTITY LTE_MIB_H_ip_src_MIB_Decoder IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        enb_1_2_1                         :   IN    std_logic;
        NcellID                           :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
        PSSDetected                       :   IN    std_logic;
        Nsubframe                         :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        OFDMdata_gridData_re              :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        OFDMdata_gridData_im              :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        OFDMdata_gridDataValid            :   IN    std_logic;
        restart                           :   IN    std_logic;
        NDLRB                             :   OUT   std_logic_vector(6 DOWNTO 0);  -- ufix7
        PHICH                             :   OUT   std_logic;
        Ng                                :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        NFrame                            :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
        CellRefP                          :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
        mibDetected                       :   OUT   std_logic;
        mibError                          :   OUT   std_logic
        );
END LTE_MIB_H_ip_src_MIB_Decoder;


ARCHITECTURE rtl OF LTE_MIB_H_ip_src_MIB_Decoder IS

  -- Component Declarations
  COMPONENT LTE_MIB_H_ip_src_Detect_Rise_Positive
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT LTE_MIB_H_ip_src_Detect_Rise_Positive1
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ltehdlPBCHIndexing
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          cellID                          :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
          start                           :   IN    std_logic;
          addr_rd_addr                    :   OUT   std_logic_vector(10 DOWNTO 0);  -- ufix11
          addr_rd_bank                    :   OUT   std_logic_vector(3 DOWNTO 0);  -- ufix4
          addr_rd_en                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ltehdlResourceGrid
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          rst                             :   IN    std_logic;
          OFDMdata_gridData_re            :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          OFDMdata_gridData_im            :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          OFDMdata_gridDataValid          :   IN    std_logic;
          writeSubframe                   :   IN    std_logic;
          NcellID                         :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
          NDLRB                           :   IN    std_logic_vector(6 DOWNTO 0);  -- ufix7
          rd_bus_rd_addr                  :   IN    std_logic_vector(10 DOWNTO 0);  -- ufix11
          rd_bus_rd_bank                  :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          rd_bus_rd_en                    :   IN    std_logic;
          gridData_gridData_re            :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          gridData_gridData_im            :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          gridData_gridDataValid          :   OUT   std_logic;
          hestReadAddr                    :   OUT   std_logic_vector(10 DOWNTO 0);  -- ufix11
          gridWriteDone                   :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ltehdlChannelEqualizer
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          cellDetected                    :   IN    std_logic;
          NCellID                         :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
          NSubframe                       :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          NDLRB                           :   IN    std_logic_vector(6 DOWNTO 0);  -- ufix7
          gridData_gridData_re            :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          gridData_gridData_im            :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          gridData_gridDataValid          :   IN    std_logic;
          hestRdAddr                      :   IN    std_logic_vector(10 DOWNTO 0);  -- ufix11
          gridWriteDone                   :   IN    std_logic;
          eqSymbols_eqSymbols_re          :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          eqSymbols_eqSymbols_im          :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          eqSymbols_eqSymbolsValid        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ltehdlPBCHDecoder
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          NCellID                         :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
          symbols_eqSymbols_re            :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          symbols_eqSymbols_im            :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          symbols_eqSymbolsValid          :   IN    std_logic;
          enableDecoder                   :   IN    std_logic;
          clearOutputReg                  :   IN    std_logic;
          NDLRB                           :   OUT   std_logic_vector(6 DOWNTO 0);  -- ufix7
          PHICH                           :   OUT   std_logic;
          Ng                              :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          NFrame                          :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
          CellRefP                        :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
          MIBDetected                     :   OUT   std_logic;
          MIBError                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : LTE_MIB_H_ip_src_Detect_Rise_Positive
    USE ENTITY work.LTE_MIB_H_ip_src_Detect_Rise_Positive(rtl);

  FOR ALL : LTE_MIB_H_ip_src_Detect_Rise_Positive1
    USE ENTITY work.LTE_MIB_H_ip_src_Detect_Rise_Positive1(rtl);

  FOR ALL : ltehdlPBCHIndexing
    USE ENTITY work_ltehdlPBCHIndexing.LTE_MIB_H_ip_src_ltehdlPBCHIndexing_ltehdlPBCHIndexing(rtl);

  FOR ALL : ltehdlResourceGrid
    USE ENTITY work_ltehdlResourceGrid.LTE_MIB_H_ip_src_ltehdlResourceGrid_ltehdlResourceGrid(rtl);

  FOR ALL : ltehdlChannelEqualizer
    USE ENTITY work_ltehdlChannelEqualizer.LTE_MIB_H_ip_src_ltehdlChannelEqualizer_ltehdlChannelEqualizer(rtl);

  FOR ALL : ltehdlPBCHDecoder
    USE ENTITY work_ltehdlPBCHDecoder.LTE_MIB_H_ip_src_ltehdlPBCHDecoder_ltehdlPBCHDecoder(rtl);

  -- Signals
  SIGNAL Detect_Rise_Positive1_out1       : std_logic;
  SIGNAL PBCH_Indexing_out1_rd_addr       : std_logic_vector(10 DOWNTO 0);  -- ufix11
  SIGNAL PBCH_Indexing_out1_rd_bank       : std_logic_vector(3 DOWNTO 0);  -- ufix4
  SIGNAL PBCH_Indexing_out1_rd_en         : std_logic;
  SIGNAL Detect_Rise_Positive_out1        : std_logic;
  SIGNAL Compare_To_Constant1_out1        : std_logic;
  SIGNAL Delay1_out1_rd_en                : std_logic;
  SIGNAL Resource_Grid_Memory_out1_gridData_re : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Resource_Grid_Memory_out1_gridData_im : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Resource_Grid_Memory_out1_gridDataValid : std_logic;
  SIGNAL Resource_Grid_Memory_out2        : std_logic_vector(10 DOWNTO 0);  -- ufix11
  SIGNAL Resource_Grid_Memory_out3        : std_logic;
  SIGNAL eqSymb_eqSymbols_re              : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL eqSymb_eqSymbols_im              : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL eqSymb_eqSymbolsValid            : std_logic;
  SIGNAL Constant_out1                    : std_logic;
  SIGNAL OR_out1                          : std_logic;
  SIGNAL PBCH_Decoder_out1                : std_logic_vector(6 DOWNTO 0);  -- ufix7
  SIGNAL PBCH_Decoder_out2                : std_logic;
  SIGNAL PBCH_Decoder_out3                : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL PBCH_Decoder_out4                : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL PBCH_Decoder_out5                : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL PBCH_Decoder_out6                : std_logic;
  SIGNAL PBCH_Decoder_out7                : std_logic;
  SIGNAL NCellID_5                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL NCellID_6                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL subFrameNum_1                    : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Constant2_out1_2                 : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL subFrameNum_2                    : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL NCellID_7                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL NCellID_8                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 20);  -- ufix1 [21]
  SIGNAL stateControl_2                   : std_logic;
  SIGNAL enb_1_2_0_gated                  : std_logic;
  SIGNAL PBCH_Indexing_out1_rd_bank_unsigned : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Delay1_out1_rd_bank_1            : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL PBCH_Indexing_out1_rd_addr_unsigned : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Delay1_out1_rd_addr_1            : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL delayMatch1_reg                  : std_logic_vector(0 TO 20);  -- ufix1 [21]
  SIGNAL restart_1                        : std_logic;

BEGIN
  -- DECODING
  -- 
  -- INDEXING
  -- 
  -- GRID

  u_Detect_Rise_Positive : LTE_MIB_H_ip_src_Detect_Rise_Positive
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              U => PSSDetected,
              Y => Detect_Rise_Positive_out1
              );

  u_Detect_Rise_Positive1 : LTE_MIB_H_ip_src_Detect_Rise_Positive1
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              U => Resource_Grid_Memory_out3,
              Y => Detect_Rise_Positive1_out1
              );

  u_PBCH_Indexing : ltehdlPBCHIndexing
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              cellID => std_logic_vector(NCellID_8),  -- ufix9
              start => Detect_Rise_Positive1_out1,
              addr_rd_addr => PBCH_Indexing_out1_rd_addr,  -- ufix11
              addr_rd_bank => PBCH_Indexing_out1_rd_bank,  -- ufix4
              addr_rd_en => PBCH_Indexing_out1_rd_en
              );

  u_Resource_Grid_Memory : ltehdlResourceGrid
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              rst => Detect_Rise_Positive_out1,
              OFDMdata_gridData_re => OFDMdata_gridData_re,  -- sfix16_En15
              OFDMdata_gridData_im => OFDMdata_gridData_im,  -- sfix16_En15
              OFDMdata_gridDataValid => OFDMdata_gridDataValid,
              writeSubframe => Compare_To_Constant1_out1,
              NcellID => std_logic_vector(NCellID_7),  -- ufix9
              NDLRB => std_logic_vector(Constant2_out1_2),  -- ufix7
              rd_bus_rd_addr => std_logic_vector(Delay1_out1_rd_addr_1),  -- ufix11
              rd_bus_rd_bank => std_logic_vector(Delay1_out1_rd_bank_1),  -- ufix4
              rd_bus_rd_en => Delay1_out1_rd_en,
              gridData_gridData_re => Resource_Grid_Memory_out1_gridData_re,  -- sfix16_En15
              gridData_gridData_im => Resource_Grid_Memory_out1_gridData_im,  -- sfix16_En15
              gridData_gridDataValid => Resource_Grid_Memory_out1_gridDataValid,
              hestReadAddr => Resource_Grid_Memory_out2,  -- ufix11
              gridWriteDone => Resource_Grid_Memory_out3
              );

  u_Channel_Equalization : ltehdlChannelEqualizer
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              enb_1_2_0 => enb_1_2_0,
              enb_1_2_1 => enb_1_2_1,
              cellDetected => Detect_Rise_Positive_out1,
              NCellID => std_logic_vector(NCellID_6),  -- ufix9
              NSubframe => std_logic_vector(subFrameNum_1),  -- ufix4
              NDLRB => std_logic_vector(Constant2_out1_2),  -- ufix7
              gridData_gridData_re => Resource_Grid_Memory_out1_gridData_re,  -- sfix16_En15
              gridData_gridData_im => Resource_Grid_Memory_out1_gridData_im,  -- sfix16_En15
              gridData_gridDataValid => Resource_Grid_Memory_out1_gridDataValid,
              hestRdAddr => Resource_Grid_Memory_out2,  -- ufix11
              gridWriteDone => Resource_Grid_Memory_out3,
              eqSymbols_eqSymbols_re => eqSymb_eqSymbols_re,  -- sfix18_En17
              eqSymbols_eqSymbols_im => eqSymb_eqSymbols_im,  -- sfix18_En17
              eqSymbols_eqSymbolsValid => eqSymb_eqSymbolsValid
              );

  u_PBCH_Decoder : ltehdlPBCHDecoder
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              enb_1_2_0 => enb_1_2_0,
              enb_1_2_1 => enb_1_2_1,
              NCellID => std_logic_vector(NCellID_5),  -- ufix9
              symbols_eqSymbols_re => eqSymb_eqSymbols_re,  -- sfix18_En17
              symbols_eqSymbols_im => eqSymb_eqSymbols_im,  -- sfix18_En17
              symbols_eqSymbolsValid => eqSymb_eqSymbolsValid,
              enableDecoder => Constant_out1,
              clearOutputReg => OR_out1,
              NDLRB => PBCH_Decoder_out1,  -- ufix7
              PHICH => PBCH_Decoder_out2,
              Ng => PBCH_Decoder_out3,  -- ufix2
              NFrame => PBCH_Decoder_out4,  -- ufix10
              CellRefP => PBCH_Decoder_out5,  -- ufix3
              MIBDetected => PBCH_Decoder_out6,
              MIBError => PBCH_Decoder_out7
              );

  NCellID_5 <= unsigned(NcellID);

  NCellID_6 <= unsigned(NcellID);

  subFrameNum_1 <= unsigned(Nsubframe);

  Constant2_out1_2 <= to_unsigned(16#06#, 7);

  subFrameNum_2 <= unsigned(Nsubframe);

  
  Compare_To_Constant1_out1 <= '1' WHEN subFrameNum_2 = to_unsigned(16#0#, 4) ELSE
      '0';

  NCellID_7 <= unsigned(NcellID);

  NCellID_8 <= unsigned(NcellID);

  stateControl_1 <= '1';

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        delayMatch_reg(0) <= stateControl_1;
        delayMatch_reg(1 TO 20) <= delayMatch_reg(0 TO 19);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  stateControl_2 <= delayMatch_reg(20);

  enb_1_2_0_gated <= stateControl_2 AND enb_1_2_0;

  c_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1_rd_en <= '0';
      ELSIF enb_1_2_0_gated = '1' THEN
        Delay1_out1_rd_en <= PBCH_Indexing_out1_rd_en;
      END IF;
    END IF;
  END PROCESS c_process;


  PBCH_Indexing_out1_rd_bank_unsigned <= unsigned(PBCH_Indexing_out1_rd_bank);

  c_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1_rd_bank_1 <= to_unsigned(16#0#, 4);
      ELSIF enb_1_2_0_gated = '1' THEN
        Delay1_out1_rd_bank_1 <= PBCH_Indexing_out1_rd_bank_unsigned;
      END IF;
    END IF;
  END PROCESS c_1_process;


  PBCH_Indexing_out1_rd_addr_unsigned <= unsigned(PBCH_Indexing_out1_rd_addr);

  c_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1_rd_addr_1 <= to_unsigned(16#000#, 11);
      ELSIF enb_1_2_0_gated = '1' THEN
        Delay1_out1_rd_addr_1 <= PBCH_Indexing_out1_rd_addr_unsigned;
      END IF;
    END IF;
  END PROCESS c_2_process;


  Constant_out1 <= '1';

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch1_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        delayMatch1_reg(0) <= restart;
        delayMatch1_reg(1 TO 20) <= delayMatch1_reg(0 TO 19);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  restart_1 <= delayMatch1_reg(20);

  OR_out1 <= Detect_Rise_Positive_out1 OR restart_1;

  NDLRB <= PBCH_Decoder_out1;

  PHICH <= PBCH_Decoder_out2;

  Ng <= PBCH_Decoder_out3;

  NFrame <= PBCH_Decoder_out4;

  CellRefP <= PBCH_Decoder_out5;

  mibDetected <= PBCH_Decoder_out6;

  mibError <= PBCH_Decoder_out7;

END rtl;

