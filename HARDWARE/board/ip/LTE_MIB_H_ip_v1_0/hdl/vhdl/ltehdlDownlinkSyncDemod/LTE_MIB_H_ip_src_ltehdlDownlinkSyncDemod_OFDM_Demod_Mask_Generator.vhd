-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\zynqRadioHWSWLTEMIBDetectorRFSoC2x2\ltehdlDownlinkSyncDemod\LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_OFDM_Demod_Mask_Generator.vhd
-- Created: 2022-05-23 17:26:44
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_OFDM_Demod_Mask_Generator
-- Source Path: ltehdlDownlinkSyncDemod/OFDM Demodulation/OFDM Demod Mask Generator
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_OFDM_Demod_Mask_Generator IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        validIn                           :   IN    std_logic;
        reset                             :   IN    std_logic;
        validOut                          :   OUT   std_logic
        );
END LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_OFDM_Demod_Mask_Generator;


ARCHITECTURE rtl OF LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_OFDM_Demod_Mask_Generator IS

  -- Signals
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 20);  -- ufix1 [21]
  SIGNAL reset_1                          : std_logic;
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL delayMatch1_reg                  : std_logic_vector(0 TO 20);  -- ufix1 [21]
  SIGNAL stateControl_2                   : std_logic;
  SIGNAL enb_1_2_0_gated                  : std_logic;
  SIGNAL validOut_1                       : std_logic;
  SIGNAL reg_sampleCount                  : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL reg_symbolCount                  : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL reg_validOut                     : std_logic;
  SIGNAL reg_sampleCount_next             : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL reg_symbolCount_next             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL reg_validOut_next                : std_logic;
  SIGNAL validOut_2                       : std_logic;
  SIGNAL validOut_last_value              : std_logic;

BEGIN
  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        delayMatch_reg(0) <= reset;
        delayMatch_reg(1 TO 20) <= delayMatch_reg(0 TO 19);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  reset_1 <= delayMatch_reg(20);

  stateControl_1 <= '1';

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch1_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        delayMatch1_reg(0) <= stateControl_1;
        delayMatch1_reg(1 TO 20) <= delayMatch1_reg(0 TO 19);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  stateControl_2 <= delayMatch1_reg(20);

  enb_1_2_0_gated <= stateControl_2 AND enb_1_2_0;

  OFDM_Demod_Mask_Generator_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        reg_sampleCount <= to_unsigned(16#000#, 12);
        reg_symbolCount <= to_unsigned(16#0#, 3);
        reg_validOut <= '0';
      ELSIF enb_1_2_0_gated = '1' THEN
        reg_sampleCount <= reg_sampleCount_next;
        reg_symbolCount <= reg_symbolCount_next;
        reg_validOut <= reg_validOut_next;
      END IF;
    END IF;
  END PROCESS OFDM_Demod_Mask_Generator_process;

  OFDM_Demod_Mask_Generator_output : PROCESS (reg_sampleCount, reg_symbolCount, reg_validOut, reset_1, validIn)
    VARIABLE Lcp : unsigned(11 DOWNTO 0);
    VARIABLE Lsym : unsigned(11 DOWNTO 0);
  BEGIN
    -- length of cyclic prefix 0
    -- length of cyclic prefixes 1 to 6
    -- length of useful part of each symbol
    -- number of symbols per slot
    -- Assign outputs
    -- Initialize next states
    reg_sampleCount_next <= reg_sampleCount;
    reg_symbolCount_next <= reg_symbolCount;
    -- Determine current CP length
    IF reg_symbolCount = to_unsigned(16#0#, 3) THEN 
      Lcp := to_unsigned(16#0A0#, 12);
      Lsym := to_unsigned(16#8A0#, 12);
    ELSE 
      Lcp := to_unsigned(16#090#, 12);
      Lsym := to_unsigned(16#890#, 12);
    END IF;
    -- Counters for keeping track of samples and symbols within each slot
    IF reset_1 = '1' THEN 
      reg_sampleCount_next <= to_unsigned(16#000#, 12);
      reg_symbolCount_next <= to_unsigned(16#0#, 3);
    ELSIF validIn = '1' THEN 
      IF resize(reg_sampleCount, 13) < (resize(Lsym, 13) - to_unsigned(16#0001#, 13)) THEN 
        reg_sampleCount_next <= reg_sampleCount + to_unsigned(16#001#, 12);
      ELSE 
        -- last sample of symbol
        reg_sampleCount_next <= to_unsigned(16#000#, 12);
        IF reg_symbolCount < to_unsigned(16#6#, 3) THEN 
          reg_symbolCount_next <= reg_symbolCount + to_unsigned(16#1#, 3);
        ELSE 
          -- last sample of slot
          reg_symbolCount_next <= to_unsigned(16#0#, 3);
        END IF;
      END IF;
    END IF;
    -- next validOut value
    IF reg_sampleCount < Lcp THEN 
      reg_validOut_next <= '0';
    ELSE 
      reg_validOut_next <= validIn;
    END IF;
    -- Update register with next values
    validOut_1 <= reg_validOut;
  END PROCESS OFDM_Demod_Mask_Generator_output;


  out0_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        validOut_last_value <= '0';
      ELSIF enb_1_2_0_gated = '1' THEN
        validOut_last_value <= validOut_2;
      END IF;
    END IF;
  END PROCESS out0_bypass_process;


  
  validOut_2 <= validOut_last_value WHEN stateControl_2 = '0' ELSE
      validOut_1;

  validOut <= validOut_2;

END rtl;

