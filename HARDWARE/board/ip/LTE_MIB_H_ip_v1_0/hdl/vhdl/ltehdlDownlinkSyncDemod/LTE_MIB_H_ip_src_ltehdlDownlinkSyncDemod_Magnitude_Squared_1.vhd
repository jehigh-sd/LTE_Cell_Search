-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\zynqRadioHWSWLTEMIBDetectorRFSoC2x2\ltehdlDownlinkSyncDemod\LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_Magnitude_Squared_1.vhd
-- Created: 2022-05-23 17:26:44
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_Magnitude_Squared_1
-- Source Path: ltehdlDownlinkSyncDemod/Sync Signal Search/SSS Searcher/Max Likelihood SSS/SSS_Dot_Product/Magnitude 
-- Squared 
-- Hierarchy Level: 7
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_ltehdlDownlinkSyncDemod_pac.ALL;

ENTITY LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_Magnitude_Squared_1 IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        dataIn_im                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        dataOut                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En30
        );
END LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_Magnitude_Squared_1;


ARCHITECTURE rtl OF LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_Magnitude_Squared_1 IS

  -- Signals
  SIGNAL dataIn_re_signed                 : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL dataIn_im_signed                 : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL stateControl                     : std_logic;
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL enb_gated                        : std_logic;
  SIGNAL Delay3_reg                       : vector_of_signed16(0 TO 1);  -- sfix16 [2]
  SIGNAL Delay3_out1                      : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Product4_out1                    : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL stateControl_3                   : std_logic;
  SIGNAL delayMatch1_reg                  : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL stateControl_4                   : std_logic;
  SIGNAL enb_gated_1                      : std_logic;
  SIGNAL Delay1_reg                       : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL Delay1_out1                      : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL stateControl_5                   : std_logic;
  SIGNAL delayMatch2_reg                  : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL stateControl_6                   : std_logic;
  SIGNAL enb_gated_2                      : std_logic;
  SIGNAL Delay4_reg                       : vector_of_signed16(0 TO 1);  -- sfix16 [2]
  SIGNAL Delay4_out1                      : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Product5_out1                    : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL stateControl_7                   : std_logic;
  SIGNAL delayMatch3_reg                  : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL stateControl_8                   : std_logic;
  SIGNAL enb_gated_3                      : std_logic;
  SIGNAL Delay2_reg                       : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL Delay2_out1                      : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Add_out1                         : signed(31 DOWNTO 0);  -- sfix32_En30

BEGIN
  dataIn_re_signed <= signed(dataIn_re);

  stateControl <= '1';

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch_reg(0) <= stateControl;
        delayMatch_reg(1 TO 41) <= delayMatch_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  stateControl_1 <= delayMatch_reg(41);

  enb_gated <= stateControl_1 AND enb;

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb_gated = '1' THEN
        Delay3_reg(0) <= dataIn_re_signed;
        Delay3_reg(1) <= Delay3_reg(0);
      END IF;
    END IF;
  END PROCESS Delay3_process;

  Delay3_out1 <= Delay3_reg(1);

  Product4_out1 <= Delay3_out1 * Delay3_out1;

  stateControl_3 <= '1';

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch1_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch1_reg(0) <= stateControl_3;
        delayMatch1_reg(1 TO 41) <= delayMatch1_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  stateControl_4 <= delayMatch1_reg(41);

  enb_gated_1 <= stateControl_4 AND enb;

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_reg <= (OTHERS => to_signed(0, 32));
      ELSIF enb_gated_1 = '1' THEN
        Delay1_reg(0) <= Product4_out1;
        Delay1_reg(1) <= Delay1_reg(0);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(1);

  dataIn_im_signed <= signed(dataIn_im);

  stateControl_5 <= '1';

  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch2_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch2_reg(0) <= stateControl_5;
        delayMatch2_reg(1 TO 41) <= delayMatch2_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  stateControl_6 <= delayMatch2_reg(41);

  enb_gated_2 <= stateControl_6 AND enb;

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb_gated_2 = '1' THEN
        Delay4_reg(0) <= dataIn_im_signed;
        Delay4_reg(1) <= Delay4_reg(0);
      END IF;
    END IF;
  END PROCESS Delay4_process;

  Delay4_out1 <= Delay4_reg(1);

  Product5_out1 <= Delay4_out1 * Delay4_out1;

  stateControl_7 <= '1';

  delayMatch3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch3_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch3_reg(0) <= stateControl_7;
        delayMatch3_reg(1 TO 41) <= delayMatch3_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch3_process;

  stateControl_8 <= delayMatch3_reg(41);

  enb_gated_3 <= stateControl_8 AND enb;

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_reg <= (OTHERS => to_signed(0, 32));
      ELSIF enb_gated_3 = '1' THEN
        Delay2_reg(0) <= Product5_out1;
        Delay2_reg(1) <= Delay2_reg(0);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1 <= Delay2_reg(1);

  Add_out1 <= Delay1_out1 + Delay2_out1;

  dataOut <= std_logic_vector(Add_out1);

END rtl;

