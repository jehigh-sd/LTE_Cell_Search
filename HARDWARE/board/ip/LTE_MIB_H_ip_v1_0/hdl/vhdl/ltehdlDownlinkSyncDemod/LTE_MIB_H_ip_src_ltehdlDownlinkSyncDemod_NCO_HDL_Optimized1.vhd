-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\zynqRadioHWSWLTEMIBDetectorRFSoC2x2\ltehdlDownlinkSyncDemod\LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_NCO_HDL_Optimized1.vhd
-- Created: 2022-05-23 17:26:44
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_NCO_HDL_Optimized1
-- Source Path: ltehdlDownlinkSyncDemod/Frequency Correction 16x/NCO HDL Optimized1
-- Hierarchy Level: 4
-- 
-- NCO
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
LIBRARY work_ltehdlDownlinkSyncDemod;

ENTITY LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_NCO_HDL_Optimized1 IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        inc                               :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        validIn                           :   IN    std_logic;
        complexexp_re                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
        complexexp_im                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
        validOut                          :   OUT   std_logic
        );
END LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_NCO_HDL_Optimized1;


ARCHITECTURE rtl OF LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_NCO_HDL_Optimized1 IS

  -- Component Declarations
  COMPONENT LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_DitherGen
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          validIn                         :   IN    std_logic;
          dither                          :   OUT   std_logic_vector(10 DOWNTO 0)  -- ufix11
          );
  END COMPONENT;

  COMPONENT LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_WaveformGen
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          phaseIdx                        :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          exp_re                          :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
          exp_im                          :   OUT   std_logic_vector(15 DOWNTO 0)  -- ufix16
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_DitherGen
    USE ENTITY work_ltehdlDownlinkSyncDemod.LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_DitherGen(rtl);

  FOR ALL : LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_WaveformGen
    USE ENTITY work_ltehdlDownlinkSyncDemod.LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_WaveformGen(rtl);

  -- Signals
  SIGNAL outsel_reg_reg                   : std_logic_vector(0 TO 4);  -- ufix1 [5]
  SIGNAL outsel                           : std_logic;
  SIGNAL outzero_re                       : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL outzero_im                       : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL const0                           : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL inc_signed                       : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL pInc                             : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL validPInc                        : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL accphase_reg                     : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL addpInc                          : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL pOffset                          : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL accoffset                        : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL accoffsete_reg                   : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL dither                           : std_logic_vector(10 DOWNTO 0);  -- ufix11
  SIGNAL dither_unsigned                  : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL casteddither                     : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL dither_reg                       : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL accumulator                      : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL accQuantized                     : unsigned(13 DOWNTO 0);  -- ufix14_E11
  SIGNAL outs_re                          : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL outs_im                          : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL outs_re_signed                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL outs_im_signed                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL validouts_re                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL validouts_im                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL complexexp_re_tmp                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL complexexp_im_tmp                : signed(15 DOWNTO 0);  -- sfix16_En14

BEGIN
  u_dither_inst : LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_DitherGen
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              validIn => validIn,
              dither => dither  -- ufix11
              );

  u_Wave_inst : LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_WaveformGen
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              phaseIdx => std_logic_vector(accQuantized),  -- ufix14
              exp_re => outs_re,  -- ufix16
              exp_im => outs_im  -- ufix16
              );

  outsel_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        outsel_reg_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        outsel_reg_reg(0) <= validIn;
        outsel_reg_reg(1 TO 4) <= outsel_reg_reg(0 TO 3);
      END IF;
    END IF;
  END PROCESS outsel_reg_process;

  outsel <= outsel_reg_reg(4);

  outzero_re <= to_signed(16#0000#, 16);
  outzero_im <= to_signed(16#0000#, 16);

  -- Constant Zero
  const0 <= to_signed(16#0000000#, 25);

  inc_signed <= signed(inc);

  pInc <= resize(inc_signed, 25);

  
  validPInc <= const0 WHEN validIn = '0' ELSE
      pInc;

  -- Add phase increment
  addpInc <= accphase_reg + validPInc;

  -- Phase increment accumulator register
  AccPhaseRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        accphase_reg <= to_signed(16#0000000#, 25);
      ELSIF enb_1_2_0 = '1' THEN
        accphase_reg <= addpInc;
      END IF;
    END IF;
  END PROCESS AccPhaseRegister_process;


  pOffset <= to_signed(16#0000000#, 25);

  -- Add phase offset
  accoffset <= accphase_reg + pOffset;

  -- Phase offset accumulator register
  AccOffsetRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        accoffsete_reg <= to_signed(16#0000000#, 25);
      ELSIF enb_1_2_0 = '1' THEN
        accoffsete_reg <= accoffset;
      END IF;
    END IF;
  END PROCESS AccOffsetRegister_process;


  dither_unsigned <= unsigned(dither);

  casteddither <= signed(resize(dither_unsigned, 25));

  -- Dither input register
  DitherRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dither_reg <= to_signed(16#0000000#, 25);
      ELSIF enb_1_2_0 = '1' THEN
        dither_reg <= casteddither;
      END IF;
    END IF;
  END PROCESS DitherRegister_process;


  -- Add dither
  accumulator <= accoffsete_reg + dither_reg;

  -- Phase quantization
  accQuantized <= unsigned(accumulator(24 DOWNTO 11));

  outs_re_signed <= signed(outs_re);

  outs_im_signed <= signed(outs_im);

  
  validouts_re <= outzero_re WHEN outsel = '0' ELSE
      outs_re_signed;
  
  validouts_im <= outzero_im WHEN outsel = '0' ELSE
      outs_im_signed;

  -- Output register
  OutputRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        complexexp_re_tmp <= to_signed(16#0000#, 16);
        complexexp_im_tmp <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        complexexp_re_tmp <= validouts_re;
        complexexp_im_tmp <= validouts_im;
      END IF;
    END IF;
  END PROCESS OutputRegister_process;


  complexexp_re <= std_logic_vector(complexexp_re_tmp);

  complexexp_im <= std_logic_vector(complexexp_im_tmp);

  -- validOut register
  validOut_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        validOut <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        validOut <= outsel;
      END IF;
    END IF;
  END PROCESS validOut_reg_process;


END rtl;

