-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\zynqRadioHWSWLTEMIBDetectorRFSoC2x2\ltehdlDownlinkSyncDemod\LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_FirRdyLogic.vhd
-- Created: 2022-05-23 17:26:43
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_FirRdyLogic
-- Source Path: ltehdlDownlinkSyncDemod/Decimation Filters/CIC Compensation Decimator/Discrete FIR Filter/FirRdyLogic
-- Hierarchy Level: 6
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_FirRdyLogic IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        dataIn_im                         :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        validIn                           :   IN    std_logic;
        dinSM_re                          :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
        dinSM_im                          :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
        dinVldSM                          :   OUT   std_logic
        );
END LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_FirRdyLogic;


ARCHITECTURE rtl OF LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_FirRdyLogic IS

  -- Functions
  -- HDLCODER_TO_STDLOGIC 
  FUNCTION hdlcoder_to_stdlogic(arg: boolean) RETURN std_logic IS
  BEGIN
    IF arg THEN
      RETURN '1';
    ELSE
      RETURN '0';
    END IF;
  END FUNCTION;


  -- Signals
  SIGNAL dataIn_re_signed                 : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL dataIn_im_signed                 : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL firRdy_xdin_re                   : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL firRdy_xdin_im                   : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL firRdy_xdinVld                   : std_logic;
  SIGNAL firRdy_state                     : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL firRdy_readyReg                  : std_logic;
  SIGNAL firRdy_count                     : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL firRdy_xdin_next_re              : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL firRdy_xdin_next_im              : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL firRdy_xdinVld_next              : std_logic;
  SIGNAL firRdy_state_next                : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL firRdy_readyReg_next             : std_logic;
  SIGNAL firRdy_count_next                : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL readySM                          : std_logic;
  SIGNAL dinSM_re_tmp                     : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL dinSM_im_tmp                     : signed(15 DOWNTO 0);  -- sfix16_En15

BEGIN
  dataIn_re_signed <= signed(dataIn_re);

  dataIn_im_signed <= signed(dataIn_im);

  -- rdyLogic
  firRdy_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        firRdy_state <= to_unsigned(16#0#, 3);
        firRdy_xdin_re <= to_signed(16#0000#, 16);
        firRdy_xdin_im <= to_signed(16#0000#, 16);
        firRdy_xdinVld <= '0';
        firRdy_readyReg <= '1';
        firRdy_count <= to_unsigned(16#0#, 4);
      ELSIF enb = '1' THEN
        firRdy_xdin_re <= firRdy_xdin_next_re;
        firRdy_xdin_im <= firRdy_xdin_next_im;
        firRdy_xdinVld <= firRdy_xdinVld_next;
        firRdy_state <= firRdy_state_next;
        firRdy_readyReg <= firRdy_readyReg_next;
        firRdy_count <= firRdy_count_next;
      END IF;
    END IF;
  END PROCESS firRdy_process;

  firRdy_output : PROCESS (dataIn_im_signed, dataIn_re_signed, firRdy_count, firRdy_readyReg,
       firRdy_state, firRdy_xdinVld, firRdy_xdin_im, firRdy_xdin_re, validIn)
    VARIABLE out2 : std_logic;
  BEGIN
    firRdy_xdin_next_re <= firRdy_xdin_re;
    firRdy_xdin_next_im <= firRdy_xdin_im;
    firRdy_xdinVld_next <= firRdy_xdinVld;
    firRdy_state_next <= firRdy_state;
    firRdy_readyReg_next <= firRdy_readyReg;
    firRdy_count_next <= firRdy_count;
    CASE firRdy_state IS
      WHEN "000" =>
        dinSM_re_tmp <= dataIn_re_signed;
        dinSM_im_tmp <= dataIn_im_signed;
        out2 := validIn;
        firRdy_state_next <= to_unsigned(16#0#, 3);
        firRdy_readyReg_next <= '1';
        firRdy_xdin_next_re <= to_signed(16#0000#, 16);
        firRdy_xdin_next_im <= to_signed(16#0000#, 16);
        firRdy_xdinVld_next <= '0';
        IF validIn = '1' THEN 
          firRdy_state_next <= to_unsigned(16#1#, 3);
          firRdy_readyReg_next <= '0';
        END IF;
      WHEN "001" =>
        dinSM_re_tmp <= to_signed(16#0000#, 16);
        dinSM_im_tmp <= to_signed(16#0000#, 16);
        out2 := '0';
        firRdy_state_next <= to_unsigned(16#3#, 3);
        IF validIn = '1' THEN 
          firRdy_state_next <= to_unsigned(16#2#, 3);
          firRdy_xdin_next_re <= dataIn_re_signed;
          firRdy_xdin_next_im <= dataIn_im_signed;
          firRdy_xdinVld_next <= '1';
        END IF;
      WHEN "010" =>
        dinSM_re_tmp <= to_signed(16#0000#, 16);
        dinSM_im_tmp <= to_signed(16#0000#, 16);
        out2 := '0';
        firRdy_state_next <= to_unsigned(16#2#, 3);
        IF firRdy_count = to_unsigned(16#F#, 4) THEN 
          firRdy_state_next <= to_unsigned(16#4#, 3);
        END IF;
        firRdy_readyReg_next <= '0';
      WHEN "011" =>
        IF firRdy_count = to_unsigned(16#F#, 4) THEN 
          firRdy_readyReg_next <= '1';
          firRdy_state_next <= to_unsigned(16#0#, 3);
        END IF;
        dinSM_re_tmp <= to_signed(16#0000#, 16);
        dinSM_im_tmp <= to_signed(16#0000#, 16);
        out2 := '0';
      WHEN "100" =>
        firRdy_state_next <= to_unsigned(16#3#, 3);
        dinSM_re_tmp <= firRdy_xdin_re;
        dinSM_im_tmp <= firRdy_xdin_im;
        out2 := firRdy_xdinVld;
        firRdy_xdin_next_re <= dataIn_re_signed;
        firRdy_xdin_next_im <= dataIn_im_signed;
        firRdy_xdinVld_next <= validIn;
      WHEN OTHERS => 
        dinSM_re_tmp <= to_signed(16#0000#, 16);
        dinSM_im_tmp <= to_signed(16#0000#, 16);
        out2 := '0';
        firRdy_state_next <= to_unsigned(16#0#, 3);
        firRdy_xdin_next_re <= to_signed(16#0000#, 16);
        firRdy_xdin_next_im <= to_signed(16#0000#, 16);
        firRdy_xdinVld_next <= '0';
        firRdy_readyReg_next <= '1';
    END CASE;
    IF ((validIn OR hdlcoder_to_stdlogic(firRdy_count > to_unsigned(16#0#, 4))) OR out2) = '1' THEN 
      IF firRdy_count = to_unsigned(16#F#, 4) THEN 
        firRdy_count_next <= to_unsigned(16#0#, 4);
      ELSE 
        firRdy_count_next <= firRdy_count + to_unsigned(16#1#, 4);
      END IF;
    END IF;
    readySM <= firRdy_readyReg;
    dinVldSM <= out2;
  END PROCESS firRdy_output;


  dinSM_re <= std_logic_vector(dinSM_re_tmp);

  dinSM_im <= std_logic_vector(dinSM_im_tmp);

END rtl;

