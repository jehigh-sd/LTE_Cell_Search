-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\zynqRadioHWSWLTEMIBDetectorRFSoC2x2\ltehdlDownlinkSyncDemod\LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_AngleAtMaximum.vhd
-- Created: 2022-05-23 17:26:44
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_AngleAtMaximum
-- Source Path: ltehdlDownlinkSyncDemod/FrequencyEstimation/AngleAtMaximum
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_AngleAtMaximum IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        magIn                             :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En23
        angleIn                           :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En14
        validIn                           :   IN    std_logic;
        angleOut                          :   OUT   std_logic_vector(13 DOWNTO 0);  -- sfix14_En14
        slotValidOut                      :   OUT   std_logic;
        sampleValidOut                    :   OUT   std_logic
        );
END LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_AngleAtMaximum;


ARCHITECTURE rtl OF LTE_MIB_H_ip_src_ltehdlDownlinkSyncDemod_AngleAtMaximum IS

  -- Signals
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL count_step                       : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL count_from                       : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL HDL_Counter_out1                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL count                            : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL need_to_wrap                     : std_logic;
  SIGNAL count_value                      : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL count_1                          : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL magIn_signed                     : signed(24 DOWNTO 0);  -- sfix25_En23
  SIGNAL Delay5_out1                      : signed(24 DOWNTO 0);  -- sfix25_En23
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Delay6_out1                      : signed(24 DOWNTO 0);  -- sfix25_En23
  SIGNAL Delay6_ectrl                     : signed(24 DOWNTO 0);  -- sfix25_En23
  SIGNAL Relational_Operator_relop1       : std_logic;
  SIGNAL angleIn_signed                   : signed(13 DOWNTO 0);  -- sfix14_En14
  SIGNAL Delay1_out1                      : signed(13 DOWNTO 0);  -- sfix14_En14
  SIGNAL Delay7_out1                      : signed(13 DOWNTO 0);  -- sfix14_En14
  SIGNAL Delay7_ectrl                     : signed(13 DOWNTO 0);  -- sfix14_En14
  SIGNAL Delay4_out1                      : signed(13 DOWNTO 0);  -- sfix14_En14
  SIGNAL Delay4_ectrl                     : signed(13 DOWNTO 0);  -- sfix14_En14
  SIGNAL Constant_out1                    : std_logic;
  SIGNAL Delay9_out1                      : std_logic;
  SIGNAL Delay9_ectrl                     : std_logic;
  SIGNAL Logical_Operator2_out1           : std_logic;
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL Delay8_out1                      : std_logic;

BEGIN
  -- This subsystem records the maximum CP correlation level, and the corresponding phase angle of the result, across 
  -- windows of time equivalent to 1 slot (960 samples). A counter is used to reset the running max and record the final 
  -- phase value, which is then passed to the output and qualified by the validOut signal
  -- 
  -- Store current mag & angle if mag is greater than previous max mag.
  -- 
  -- This register stores the current running max magnitude in the current time window

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay2_out1 <= validIn;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 959
  count_step <= to_unsigned(16#001#, 10);

  count_from <= to_unsigned(16#000#, 10);

  count <= HDL_Counter_out1 + count_step;

  
  need_to_wrap <= '1' WHEN HDL_Counter_out1 = to_unsigned(16#3BF#, 10) ELSE
      '0';

  
  count_value <= count WHEN need_to_wrap = '0' ELSE
      count_from;

  
  count_1 <= HDL_Counter_out1 WHEN Delay2_out1 = '0' ELSE
      count_value;

  HDL_Counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HDL_Counter_out1 <= to_unsigned(16#000#, 10);
      ELSIF enb = '1' THEN
        HDL_Counter_out1 <= count_1;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  
  Compare_To_Constant_out1 <= '1' WHEN HDL_Counter_out1 = to_unsigned(16#000#, 10) ELSE
      '0';

  Logical_Operator1_out1 <= Delay2_out1 AND Compare_To_Constant_out1;

  magIn_signed <= signed(magIn);

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_out1 <= to_signed(16#0000000#, 25);
      ELSIF enb = '1' THEN
        Delay5_out1 <= magIn_signed;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  
  Delay6_ectrl <= Delay6_out1 WHEN Logical_Operator_out1 = '0' ELSE
      Delay5_out1;

  Delay6_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_out1 <= to_signed(16#0000000#, 25);
      ELSIF enb = '1' THEN
        Delay6_out1 <= Delay6_ectrl;
      END IF;
    END IF;
  END PROCESS Delay6_lowered_process;


  
  Relational_Operator_relop1 <= '1' WHEN Delay5_out1 > Delay6_out1 ELSE
      '0';

  Logical_Operator_out1 <= Relational_Operator_relop1 OR Logical_Operator1_out1;

  angleIn_signed <= signed(angleIn);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1 <= to_signed(16#0000#, 14);
      ELSIF enb = '1' THEN
        Delay1_out1 <= angleIn_signed;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  
  Delay7_ectrl <= Delay7_out1 WHEN Logical_Operator_out1 = '0' ELSE
      Delay1_out1;

  Delay7_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_out1 <= to_signed(16#0000#, 14);
      ELSIF enb = '1' THEN
        Delay7_out1 <= Delay7_ectrl;
      END IF;
    END IF;
  END PROCESS Delay7_lowered_process;


  
  Delay4_ectrl <= Delay4_out1 WHEN Logical_Operator1_out1 = '0' ELSE
      Delay7_out1;

  Delay4_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_out1 <= to_signed(16#0000#, 14);
      ELSIF enb = '1' THEN
        Delay4_out1 <= Delay4_ectrl;
      END IF;
    END IF;
  END PROCESS Delay4_lowered_process;


  angleOut <= std_logic_vector(Delay4_out1);

  Constant_out1 <= '1';

  
  Delay9_ectrl <= Delay9_out1 WHEN Logical_Operator1_out1 = '0' ELSE
      Constant_out1;

  Delay9_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay9_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay9_out1 <= Delay9_ectrl;
      END IF;
    END IF;
  END PROCESS Delay9_lowered_process;


  Logical_Operator2_out1 <= Delay9_out1 AND Logical_Operator1_out1;

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay3_out1 <= Logical_Operator2_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay8_out1 <= Delay2_out1;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  slotValidOut <= Delay3_out1;

  sampleValidOut <= Delay8_out1;

END rtl;

