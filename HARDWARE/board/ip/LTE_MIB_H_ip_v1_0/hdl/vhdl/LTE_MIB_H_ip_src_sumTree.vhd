-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\zynqRadioHWSWLTEMIBDetectorRFSoC2x2\LTE_MIB_H_ip_src_sumTree.vhd
-- Created: 2022-05-23 17:26:55
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: LTE_MIB_H_ip_src_sumTree
-- Source Path: zynqRadioHWSWLTEMIBDetectorRFSoC2x2/LTE_MIB_HDL/Preprocessor/Vector Decimator/Decimation/FIR Decimation 
-- HDL Optimized1/sumTre
-- Hierarchy Level: 5
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY LTE_MIB_H_ip_src_sumTree IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        filterOut_re_0                    :   IN    std_logic_vector(32 DOWNTO 0);  -- sfix33_En31
        filterOut_re_1                    :   IN    std_logic_vector(32 DOWNTO 0);  -- sfix33_En31
        filterOut_re_2                    :   IN    std_logic_vector(32 DOWNTO 0);  -- sfix33_En31
        filterOut_re_3                    :   IN    std_logic_vector(32 DOWNTO 0);  -- sfix33_En31
        filterOut_re_4                    :   IN    std_logic_vector(32 DOWNTO 0);  -- sfix33_En31
        filterOut_re_5                    :   IN    std_logic_vector(32 DOWNTO 0);  -- sfix33_En31
        filterOut_re_6                    :   IN    std_logic_vector(32 DOWNTO 0);  -- sfix33_En31
        filterOut_re_7                    :   IN    std_logic_vector(32 DOWNTO 0);  -- sfix33_En31
        filterOut_im_0                    :   IN    std_logic_vector(32 DOWNTO 0);  -- sfix33_En31
        filterOut_im_1                    :   IN    std_logic_vector(32 DOWNTO 0);  -- sfix33_En31
        filterOut_im_2                    :   IN    std_logic_vector(32 DOWNTO 0);  -- sfix33_En31
        filterOut_im_3                    :   IN    std_logic_vector(32 DOWNTO 0);  -- sfix33_En31
        filterOut_im_4                    :   IN    std_logic_vector(32 DOWNTO 0);  -- sfix33_En31
        filterOut_im_5                    :   IN    std_logic_vector(32 DOWNTO 0);  -- sfix33_En31
        filterOut_im_6                    :   IN    std_logic_vector(32 DOWNTO 0);  -- sfix33_En31
        filterOut_im_7                    :   IN    std_logic_vector(32 DOWNTO 0);  -- sfix33_En31
        dataOut_re                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        dataOut_im                        :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En15
        );
END LTE_MIB_H_ip_src_sumTree;


ARCHITECTURE rtl OF LTE_MIB_H_ip_src_sumTree IS

  -- Signals
  SIGNAL filterOut_re_0_signed            : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL filterOut_im_0_signed            : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL filterOut_re_1_signed            : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL filterOut_im_1_signed            : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL accS_1_re                        : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL accS_1_im                        : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL accReg_1_re                      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL accReg_1_im                      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL filterOut_re_2_signed            : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL filterOut_im_2_signed            : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL filterOut_re_3_signed            : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL filterOut_im_3_signed            : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL accS_2_re                        : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL accS_2_im                        : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL accReg_2_re                      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL accReg_2_im                      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL accS_1_re_1                      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL accS_1_im_1                      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL accReg_1_re_1                    : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL accReg_1_im_1                    : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL filterOut_re_4_signed            : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL filterOut_im_4_signed            : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL filterOut_re_5_signed            : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL filterOut_im_5_signed            : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL accS_3_re                        : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL accS_3_im                        : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL accReg_3_re                      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL accReg_3_im                      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL filterOut_re_6_signed            : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL filterOut_im_6_signed            : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL filterOut_re_7_signed            : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL filterOut_im_7_signed            : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL accS_4_re                        : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL accS_4_im                        : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL accReg_4_re                      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL accReg_4_im                      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL accS_2_re_1                      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL accS_2_im_1                      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL accReg_2_re_1                    : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL accReg_2_im_1                    : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL accS_1_re_2                      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL accS_1_im_2                      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL accReg_1_re_2                    : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL accReg_1_im_2                    : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL dout_cast_re                     : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL dout_cast_im                     : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL dataOut_re_tmp                   : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL dataOut_im_tmp                   : signed(15 DOWNTO 0);  -- sfix16_En15

BEGIN
  filterOut_re_0_signed <= signed(filterOut_re_0);

  filterOut_im_0_signed <= signed(filterOut_im_0);

  filterOut_re_1_signed <= signed(filterOut_re_1);

  filterOut_im_1_signed <= signed(filterOut_im_1);

  accS_1_re <= filterOut_re_0_signed + filterOut_re_1_signed;
  accS_1_im <= filterOut_im_0_signed + filterOut_im_1_signed;

  intdelay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        accReg_1_re <= to_signed(0, 33);
        accReg_1_im <= to_signed(0, 33);
      ELSIF enb = '1' THEN
        accReg_1_re <= accS_1_re;
        accReg_1_im <= accS_1_im;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  filterOut_re_2_signed <= signed(filterOut_re_2);

  filterOut_im_2_signed <= signed(filterOut_im_2);

  filterOut_re_3_signed <= signed(filterOut_re_3);

  filterOut_im_3_signed <= signed(filterOut_im_3);

  accS_2_re <= filterOut_re_2_signed + filterOut_re_3_signed;
  accS_2_im <= filterOut_im_2_signed + filterOut_im_3_signed;

  intdelay_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        accReg_2_re <= to_signed(0, 33);
        accReg_2_im <= to_signed(0, 33);
      ELSIF enb = '1' THEN
        accReg_2_re <= accS_2_re;
        accReg_2_im <= accS_2_im;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  accS_1_re_1 <= accReg_1_re + accReg_2_re;
  accS_1_im_1 <= accReg_1_im + accReg_2_im;

  intdelay_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        accReg_1_re_1 <= to_signed(0, 33);
        accReg_1_im_1 <= to_signed(0, 33);
      ELSIF enb = '1' THEN
        accReg_1_re_1 <= accS_1_re_1;
        accReg_1_im_1 <= accS_1_im_1;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  filterOut_re_4_signed <= signed(filterOut_re_4);

  filterOut_im_4_signed <= signed(filterOut_im_4);

  filterOut_re_5_signed <= signed(filterOut_re_5);

  filterOut_im_5_signed <= signed(filterOut_im_5);

  accS_3_re <= filterOut_re_4_signed + filterOut_re_5_signed;
  accS_3_im <= filterOut_im_4_signed + filterOut_im_5_signed;

  intdelay_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        accReg_3_re <= to_signed(0, 33);
        accReg_3_im <= to_signed(0, 33);
      ELSIF enb = '1' THEN
        accReg_3_re <= accS_3_re;
        accReg_3_im <= accS_3_im;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  filterOut_re_6_signed <= signed(filterOut_re_6);

  filterOut_im_6_signed <= signed(filterOut_im_6);

  filterOut_re_7_signed <= signed(filterOut_re_7);

  filterOut_im_7_signed <= signed(filterOut_im_7);

  accS_4_re <= filterOut_re_6_signed + filterOut_re_7_signed;
  accS_4_im <= filterOut_im_6_signed + filterOut_im_7_signed;

  intdelay_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        accReg_4_re <= to_signed(0, 33);
        accReg_4_im <= to_signed(0, 33);
      ELSIF enb = '1' THEN
        accReg_4_re <= accS_4_re;
        accReg_4_im <= accS_4_im;
      END IF;
    END IF;
  END PROCESS intdelay_4_process;


  accS_2_re_1 <= accReg_3_re + accReg_4_re;
  accS_2_im_1 <= accReg_3_im + accReg_4_im;

  intdelay_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        accReg_2_re_1 <= to_signed(0, 33);
        accReg_2_im_1 <= to_signed(0, 33);
      ELSIF enb = '1' THEN
        accReg_2_re_1 <= accS_2_re_1;
        accReg_2_im_1 <= accS_2_im_1;
      END IF;
    END IF;
  END PROCESS intdelay_5_process;


  accS_1_re_2 <= accReg_1_re_1 + accReg_2_re_1;
  accS_1_im_2 <= accReg_1_im_1 + accReg_2_im_1;

  intdelay_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        accReg_1_re_2 <= to_signed(0, 33);
        accReg_1_im_2 <= to_signed(0, 33);
      ELSIF enb = '1' THEN
        accReg_1_re_2 <= accS_1_re_2;
        accReg_1_im_2 <= accS_1_im_2;
      END IF;
    END IF;
  END PROCESS intdelay_6_process;


  dout_cast_re <= accReg_1_re_2(31 DOWNTO 16);
  dout_cast_im <= accReg_1_im_2(31 DOWNTO 16);

  intdelay_7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dataOut_re_tmp <= to_signed(16#0000#, 16);
        dataOut_im_tmp <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        dataOut_re_tmp <= dout_cast_re;
        dataOut_im_tmp <= dout_cast_im;
      END IF;
    END IF;
  END PROCESS intdelay_7_process;


  dataOut_re <= std_logic_vector(dataOut_re_tmp);

  dataOut_im <= std_logic_vector(dataOut_im_tmp);

END rtl;

