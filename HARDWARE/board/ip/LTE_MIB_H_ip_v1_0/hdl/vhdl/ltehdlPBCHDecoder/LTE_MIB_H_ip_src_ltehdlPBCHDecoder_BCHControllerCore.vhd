-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\zynqRadioHWSWLTEMIBDetectorRFSoC2x2\ltehdlPBCHDecoder\LTE_MIB_H_ip_src_ltehdlPBCHDecoder_BCHControllerCore.vhd
-- Created: 2022-05-23 17:26:45
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: LTE_MIB_H_ip_src_ltehdlPBCHDecoder_BCHControllerCore
-- Source Path: ltehdlPBCHDecoder/BCH Decoder/BCH Controller/BCHControllerCore
-- Hierarchy Level: 6
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY LTE_MIB_H_ip_src_ltehdlPBCHDecoder_BCHControllerCore IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        ctrlIn_start                      :   IN    std_logic;
        ctrlIn_end                        :   IN    std_logic;
        ctrlIn_valid                      :   IN    std_logic;
        crcmask                           :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        clearReg                          :   IN    std_logic;
        repeat_QPSK                       :   OUT   std_logic;
        MIB_detected                      :   OUT   std_logic;
        restart_MIB                       :   OUT   std_logic;
        nfmod4                            :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        cellrefp                          :   OUT   std_logic_vector(2 DOWNTO 0)  -- ufix3
        );
END LTE_MIB_H_ip_src_ltehdlPBCHDecoder_BCHControllerCore;


ARCHITECTURE rtl OF LTE_MIB_H_ip_src_ltehdlPBCHDecoder_BCHControllerCore IS

  -- Signals
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL stateControl_2                   : std_logic;
  SIGNAL enb_gated                        : std_logic;
  SIGNAL in1_unsigned                     : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL repeat_QPSK_1                    : std_logic;
  SIGNAL MIB_detected_1                   : std_logic;
  SIGNAL restart_MIB_1                    : std_logic;
  SIGNAL nfmod4_1                         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL cellrefp_1                       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL nfcnt                            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL cellrefp_reg                     : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL nfcnt_next                       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL cellrefp_reg_next                : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL repeat_QPSK_2                    : std_logic;
  SIGNAL repeat_QPSK_last_value           : std_logic;
  SIGNAL MIB_detected_2                   : std_logic;
  SIGNAL MIB_detected_last_value          : std_logic;
  SIGNAL restart_MIB_2                    : std_logic;
  SIGNAL restart_MIB_last_value           : std_logic;
  SIGNAL nfmod4_bypass                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL nfmod4_last_value                : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL cellrefp_bypass                  : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL cellrefp_last_value              : unsigned(2 DOWNTO 0);  -- ufix3

BEGIN
  stateControl_1 <= '1';

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch_reg(0) <= stateControl_1;
        delayMatch_reg(1 TO 41) <= delayMatch_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  stateControl_2 <= delayMatch_reg(41);

  enb_gated <= stateControl_2 AND enb;

  in1_unsigned <= unsigned(crcmask);

  BCHControllerCore_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        nfcnt <= to_unsigned(16#0#, 2);
        cellrefp_reg <= to_unsigned(16#0#, 3);
      ELSIF enb_gated = '1' THEN
        nfcnt <= nfcnt_next;
        cellrefp_reg <= cellrefp_reg_next;
      END IF;
    END IF;
  END PROCESS BCHControllerCore_process;

  BCHControllerCore_output : PROCESS (cellrefp_reg, clearReg, ctrlIn_end, ctrlIn_valid, in1_unsigned, nfcnt)
    VARIABLE MIB_detected1 : std_logic;
  BEGIN
    nfcnt_next <= nfcnt;
    cellrefp_reg_next <= cellrefp_reg;
    repeat_QPSK_1 <= '0';
    MIB_detected1 := '0';
    restart_MIB_1 <= '0';
    IF clearReg = '1' THEN 
      nfcnt_next <= to_unsigned(16#0#, 2);
      cellrefp_reg_next <= to_unsigned(16#0#, 3);
    ELSIF (ctrlIn_valid AND ctrlIn_end) = '1' THEN 
      CASE in1_unsigned IS
        WHEN "0000000000000000" =>
          cellrefp_reg_next <= to_unsigned(16#1#, 3);
          MIB_detected1 := '1';
        WHEN "1111111111111111" =>
          cellrefp_reg_next <= to_unsigned(16#2#, 3);
          MIB_detected1 := '1';
        WHEN "0101010101010101" =>
          cellrefp_reg_next <= to_unsigned(16#4#, 3);
          MIB_detected1 := '1';
        WHEN OTHERS => 
          cellrefp_reg_next <= to_unsigned(16#0#, 3);
      END CASE;
      IF ( NOT MIB_detected1) = '1' THEN 
        IF nfcnt = to_unsigned(16#3#, 2) THEN 
          restart_MIB_1 <= '1';
          nfcnt_next <= to_unsigned(16#0#, 2);
        ELSE 
          repeat_QPSK_1 <= '1';
          nfcnt_next <= nfcnt + to_unsigned(16#1#, 2);
        END IF;
      ELSE 
        restart_MIB_1 <= '1';
        nfcnt_next <= to_unsigned(16#0#, 2);
      END IF;
    END IF;
    MIB_detected_1 <= MIB_detected1;
    nfmod4_1 <= nfcnt;
    cellrefp_1 <= cellrefp_reg;
  END PROCESS BCHControllerCore_output;


  out0_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        repeat_QPSK_last_value <= '0';
      ELSIF enb_gated = '1' THEN
        repeat_QPSK_last_value <= repeat_QPSK_2;
      END IF;
    END IF;
  END PROCESS out0_bypass_process;


  
  repeat_QPSK_2 <= repeat_QPSK_last_value WHEN stateControl_2 = '0' ELSE
      repeat_QPSK_1;

  out1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        MIB_detected_last_value <= '0';
      ELSIF enb_gated = '1' THEN
        MIB_detected_last_value <= MIB_detected_2;
      END IF;
    END IF;
  END PROCESS out1_bypass_process;


  
  MIB_detected_2 <= MIB_detected_last_value WHEN stateControl_2 = '0' ELSE
      MIB_detected_1;

  out2_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        restart_MIB_last_value <= '0';
      ELSIF enb_gated = '1' THEN
        restart_MIB_last_value <= restart_MIB_2;
      END IF;
    END IF;
  END PROCESS out2_bypass_process;


  
  restart_MIB_2 <= restart_MIB_last_value WHEN stateControl_2 = '0' ELSE
      restart_MIB_1;

  out3_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        nfmod4_last_value <= to_unsigned(16#0#, 2);
      ELSIF enb_gated = '1' THEN
        nfmod4_last_value <= nfmod4_bypass;
      END IF;
    END IF;
  END PROCESS out3_bypass_process;


  
  nfmod4_bypass <= nfmod4_last_value WHEN stateControl_2 = '0' ELSE
      nfmod4_1;

  out4_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        cellrefp_last_value <= to_unsigned(16#0#, 3);
      ELSIF enb_gated = '1' THEN
        cellrefp_last_value <= cellrefp_bypass;
      END IF;
    END IF;
  END PROCESS out4_bypass_process;


  
  cellrefp_bypass <= cellrefp_last_value WHEN stateControl_2 = '0' ELSE
      cellrefp_1;

  repeat_QPSK <= repeat_QPSK_2;

  MIB_detected <= MIB_detected_2;

  restart_MIB <= restart_MIB_2;

  nfmod4 <= std_logic_vector(nfmod4_bypass);

  cellrefp <= std_logic_vector(cellrefp_bypass);

END rtl;

