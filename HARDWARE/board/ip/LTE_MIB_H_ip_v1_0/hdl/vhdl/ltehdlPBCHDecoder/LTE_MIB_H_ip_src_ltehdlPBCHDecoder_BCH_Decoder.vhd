-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\zynqRadioHWSWLTEMIBDetectorRFSoC2x2\ltehdlPBCHDecoder\LTE_MIB_H_ip_src_ltehdlPBCHDecoder_BCH_Decoder.vhd
-- Created: 2022-05-23 17:26:45
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: LTE_MIB_H_ip_src_ltehdlPBCHDecoder_BCH_Decoder
-- Source Path: ltehdlPBCHDecoder/BCH Decoder
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
LIBRARY work_ltehdlPBCHDecoder;
USE work.LTE_MIB_H_ip_src_ltehdlPBCHDecoder_ltehdlPBCHDecoder_pac.ALL;

ENTITY LTE_MIB_H_ip_src_ltehdlPBCHDecoder_BCH_Decoder IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn_0                          :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
        dataIn_1                          :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
        dataIn_2                          :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
        validIn                           :   IN    std_logic;
        clearReg                          :   IN    std_logic;
        cellRefP                          :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
        repeatQPSK                        :   OUT   std_logic;
        restartMIB                        :   OUT   std_logic;
        MIBDetected                       :   OUT   std_logic;
        dataOut                           :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
        nfmod4                            :   OUT   std_logic_vector(1 DOWNTO 0)  -- ufix2
        );
END LTE_MIB_H_ip_src_ltehdlPBCHDecoder_BCH_Decoder;


ARCHITECTURE rtl OF LTE_MIB_H_ip_src_ltehdlPBCHDecoder_BCH_Decoder IS

  -- Component Declarations
  COMPONENT LTE_MIB_H_ip_src_ltehdlPBCHDecoder_controlbusGen
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic;
          Out1_start                      :   OUT   std_logic;  -- record {boolean,boolean,boolean}
          Out1_end                        :   OUT   std_logic;  -- record {boolean,boolean,boolean}
          Out1_valid                      :   OUT   std_logic  -- record {boolean,boolean,boolean}
          );
  END COMPONENT;

  COMPONENT LTE_MIB_H_ip_src_ltehdlPBCHDecoder_softBitScalingUnit
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn_0                        :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
          dataIn_1                        :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
          dataIn_2                        :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
          ctrlIn_start                    :   IN    std_logic;  -- record {boolean,boolean,boolean}
          ctrlIn_end                      :   IN    std_logic;  -- record {boolean,boolean,boolean}
          ctrlIn_valid                    :   IN    std_logic;  -- record {boolean,boolean,boolean}
          dataOut_0                       :   OUT   std_logic_vector(3 DOWNTO 0);  -- sfix4_En1
          dataOut_1                       :   OUT   std_logic_vector(3 DOWNTO 0);  -- sfix4_En1
          dataOut_2                       :   OUT   std_logic_vector(3 DOWNTO 0);  -- sfix4_En1
          ctrlOut_start                   :   OUT   std_logic;  -- record {boolean,boolean,boolean}
          ctrlOut_end                     :   OUT   std_logic;  -- record {boolean,boolean,boolean}
          ctrlOut_valid                   :   OUT   std_logic  -- record {boolean,boolean,boolean}
          );
  END COMPONENT;

  COMPONENT LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Convolutional_Decoder
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_0                          :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          data_1                          :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          data_2                          :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          ctrl_start                      :   IN    std_logic;
          ctrl_end                        :   IN    std_logic;
          ctrl_valid                      :   IN    std_logic;
          data1                           :   OUT   std_logic;
          ctrl1_start                     :   OUT   std_logic;
          ctrl1_end                       :   OUT   std_logic;
          ctrl1_valid                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT LTE_MIB_H_ip_src_ltehdlPBCHDecoder_CRC_Decoder
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic;
          in1_start                       :   IN    std_logic;
          in1_end                         :   IN    std_logic;
          in1_valid                       :   IN    std_logic;
          out0                            :   OUT   std_logic;
          out1_start                      :   OUT   std_logic;
          out1_end                        :   OUT   std_logic;
          out1_valid                      :   OUT   std_logic;
          out2                            :   OUT   std_logic_vector(15 DOWNTO 0)  -- ufix16
          );
  END COMPONENT;

  COMPONENT LTE_MIB_H_ip_src_ltehdlPBCHDecoder_BCH_Controller
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          data                            :   IN    std_logic;
          ctrl_start                      :   IN    std_logic;  -- record {boolean,boolean,boolean}
          ctrl_end                        :   IN    std_logic;  -- record {boolean,boolean,boolean}
          ctrl_valid                      :   IN    std_logic;  -- record {boolean,boolean,boolean}
          crcErr                          :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          clearReg                        :   IN    std_logic;
          dataOut                         :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
          repeatQPSK                      :   OUT   std_logic;
          MIBDetected                     :   OUT   std_logic;
          restartMIB                      :   OUT   std_logic;
          nfmod4                          :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          cellRefP                        :   OUT   std_logic_vector(2 DOWNTO 0)  -- ufix3
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_controlbusGen
    USE ENTITY work_ltehdlPBCHDecoder.LTE_MIB_H_ip_src_ltehdlPBCHDecoder_controlbusGen(rtl);

  FOR ALL : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_softBitScalingUnit
    USE ENTITY work_ltehdlPBCHDecoder.LTE_MIB_H_ip_src_ltehdlPBCHDecoder_softBitScalingUnit(rtl);

  FOR ALL : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Convolutional_Decoder
    USE ENTITY work_ltehdlPBCHDecoder.LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Convolutional_Decoder(rtl);

  FOR ALL : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_CRC_Decoder
    USE ENTITY work_ltehdlPBCHDecoder.LTE_MIB_H_ip_src_ltehdlPBCHDecoder_CRC_Decoder(rtl);

  FOR ALL : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_BCH_Controller
    USE ENTITY work_ltehdlPBCHDecoder.LTE_MIB_H_ip_src_ltehdlPBCHDecoder_BCH_Controller(rtl);

  -- Signals
  SIGNAL dataIn                           : vector_of_signed20(0 TO 2);  -- sfix20_En17 [3]
  SIGNAL stateControl                     : std_logic;
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL enb_gated                        : std_logic;
  SIGNAL Delay2_out1                      : vector_of_signed20(0 TO 2);  -- sfix20_En17 [3]
  SIGNAL stateControl_2                   : std_logic;
  SIGNAL delayMatch1_reg                  : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL stateControl_3                   : std_logic;
  SIGNAL enb_gated_1                      : std_logic;
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL controlbusGen_out1_start         : std_logic;
  SIGNAL controlbusGen_out1_end           : std_logic;
  SIGNAL controlbusGen_out1_valid         : std_logic;
  SIGNAL softBitScalingUnit_out1_0        : std_logic_vector(3 DOWNTO 0);  -- ufix4
  SIGNAL softBitScalingUnit_out1_1        : std_logic_vector(3 DOWNTO 0);  -- ufix4
  SIGNAL softBitScalingUnit_out1_2        : std_logic_vector(3 DOWNTO 0);  -- ufix4
  SIGNAL softBitScalingUnit_out2_start    : std_logic;
  SIGNAL softBitScalingUnit_out2_end      : std_logic;
  SIGNAL softBitScalingUnit_out2_valid    : std_logic;
  SIGNAL data                             : std_logic;
  SIGNAL ctrl_start                       : std_logic;
  SIGNAL ctrl_end                         : std_logic;
  SIGNAL ctrl_valid                       : std_logic;
  SIGNAL stateControl_5                   : std_logic;
  SIGNAL delayMatch2_reg                  : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL stateControl_6                   : std_logic;
  SIGNAL enb_gated_2                      : std_logic;
  SIGNAL crcdatain                        : std_logic;
  SIGNAL stateControl_7                   : std_logic;
  SIGNAL delayMatch3_reg                  : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL stateControl_8                   : std_logic;
  SIGNAL enb_gated_3                      : std_logic;
  SIGNAL crcctrlin_start                  : std_logic;
  SIGNAL crcctrlin_end                    : std_logic;
  SIGNAL crcctrlin_valid                  : std_logic;
  SIGNAL cecdataout                       : std_logic;
  SIGNAL CRC_Decoder_out2_start           : std_logic;
  SIGNAL CRC_Decoder_out2_end             : std_logic;
  SIGNAL CRC_Decoder_out2_valid           : std_logic;
  SIGNAL crcerror                         : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL stateControl_9                   : std_logic;
  SIGNAL delayMatch4_reg                  : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL stateControl_10                  : std_logic;
  SIGNAL enb_gated_4                      : std_logic;
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL stateControl_11                  : std_logic;
  SIGNAL delayMatch5_reg                  : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL stateControl_12                  : std_logic;
  SIGNAL enb_gated_5                      : std_logic;
  SIGNAL Delay6_out1_start                : std_logic;
  SIGNAL Delay6_out1_end                  : std_logic;
  SIGNAL crcerror_unsigned                : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL stateControl_13                  : std_logic;
  SIGNAL delayMatch6_reg                  : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL stateControl_14                  : std_logic;
  SIGNAL enb_gated_6                      : std_logic;
  SIGNAL Delay6_out1_valid                : std_logic;
  SIGNAL Delay5_out1                      : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL dataOut_tmp                      : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL BCH_Controller_out2              : std_logic;
  SIGNAL BCH_Controller_out3              : std_logic;
  SIGNAL BCH_Controller_out4              : std_logic;
  SIGNAL BCH_Controller_out5              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL cellrefp_1                       : std_logic_vector(2 DOWNTO 0);  -- ufix3

BEGIN
  u_controlbusGen : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_controlbusGen
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              In1 => Delay3_out1,
              Out1_start => controlbusGen_out1_start,  -- record {boolean,boolean,boolean}
              Out1_end => controlbusGen_out1_end,  -- record {boolean,boolean,boolean}
              Out1_valid => controlbusGen_out1_valid  -- record {boolean,boolean,boolean}
              );

  u_softBitScalingUnit : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_softBitScalingUnit
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn_0 => std_logic_vector(Delay2_out1(0)),  -- sfix20_En17
              dataIn_1 => std_logic_vector(Delay2_out1(1)),  -- sfix20_En17
              dataIn_2 => std_logic_vector(Delay2_out1(2)),  -- sfix20_En17
              ctrlIn_start => controlbusGen_out1_start,  -- record {boolean,boolean,boolean}
              ctrlIn_end => controlbusGen_out1_end,  -- record {boolean,boolean,boolean}
              ctrlIn_valid => controlbusGen_out1_valid,  -- record {boolean,boolean,boolean}
              dataOut_0 => softBitScalingUnit_out1_0,  -- sfix4_En1
              dataOut_1 => softBitScalingUnit_out1_1,  -- sfix4_En1
              dataOut_2 => softBitScalingUnit_out1_2,  -- sfix4_En1
              ctrlOut_start => softBitScalingUnit_out2_start,  -- record {boolean,boolean,boolean}
              ctrlOut_end => softBitScalingUnit_out2_end,  -- record {boolean,boolean,boolean}
              ctrlOut_valid => softBitScalingUnit_out2_valid  -- record {boolean,boolean,boolean}
              );

  u_Convolutional_Decoder : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Convolutional_Decoder
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              data_0 => softBitScalingUnit_out1_0,  -- ufix4
              data_1 => softBitScalingUnit_out1_1,  -- ufix4
              data_2 => softBitScalingUnit_out1_2,  -- ufix4
              ctrl_start => softBitScalingUnit_out2_start,
              ctrl_end => softBitScalingUnit_out2_end,
              ctrl_valid => softBitScalingUnit_out2_valid,
              data1 => data,
              ctrl1_start => ctrl_start,
              ctrl1_end => ctrl_end,
              ctrl1_valid => ctrl_valid
              );

  u_CRC_Decoder : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_CRC_Decoder
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              in0 => crcdatain,
              in1_start => crcctrlin_start,
              in1_end => crcctrlin_end,
              in1_valid => crcctrlin_valid,
              out0 => cecdataout,
              out1_start => CRC_Decoder_out2_start,
              out1_end => CRC_Decoder_out2_end,
              out1_valid => CRC_Decoder_out2_valid,
              out2 => crcerror  -- ufix16
              );

  u_BCH_Controller : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_BCH_Controller
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              data => Delay4_out1,
              ctrl_start => Delay6_out1_start,  -- record {boolean,boolean,boolean}
              ctrl_end => Delay6_out1_end,  -- record {boolean,boolean,boolean}
              ctrl_valid => Delay6_out1_valid,  -- record {boolean,boolean,boolean}
              crcErr => std_logic_vector(Delay5_out1),  -- uint16
              clearReg => clearReg,
              dataOut => dataOut_tmp,  -- ufix24
              repeatQPSK => BCH_Controller_out2,
              MIBDetected => BCH_Controller_out3,
              restartMIB => BCH_Controller_out4,
              nfmod4 => BCH_Controller_out5,  -- ufix2
              cellRefP => cellrefp_1  -- ufix3
              );

  dataIn(0) <= signed(dataIn_0);
  dataIn(1) <= signed(dataIn_1);
  dataIn(2) <= signed(dataIn_2);

  stateControl <= '1';

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch_reg(0) <= stateControl;
        delayMatch_reg(1 TO 41) <= delayMatch_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  stateControl_1 <= delayMatch_reg(41);

  enb_gated <= stateControl_1 AND enb;

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1 <= (OTHERS => to_signed(16#00000#, 20));
      ELSIF enb_gated = '1' THEN
        Delay2_out1 <= dataIn;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  stateControl_2 <= '1';

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch1_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch1_reg(0) <= stateControl_2;
        delayMatch1_reg(1 TO 41) <= delayMatch1_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  stateControl_3 <= delayMatch1_reg(41);

  enb_gated_1 <= stateControl_3 AND enb;

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1 <= '0';
      ELSIF enb_gated_1 = '1' THEN
        Delay3_out1 <= validIn;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  stateControl_5 <= '1';

  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch2_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch2_reg(0) <= stateControl_5;
        delayMatch2_reg(1 TO 41) <= delayMatch2_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  stateControl_6 <= delayMatch2_reg(41);

  enb_gated_2 <= stateControl_6 AND enb;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        crcdatain <= '0';
      ELSIF enb_gated_2 = '1' THEN
        crcdatain <= data;
      END IF;
    END IF;
  END PROCESS Delay_process;


  stateControl_7 <= '1';

  delayMatch3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch3_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch3_reg(0) <= stateControl_7;
        delayMatch3_reg(1 TO 41) <= delayMatch3_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch3_process;

  stateControl_8 <= delayMatch3_reg(41);

  enb_gated_3 <= stateControl_8 AND enb;

  c_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        crcctrlin_start <= '0';
      ELSIF enb_gated_3 = '1' THEN
        crcctrlin_start <= ctrl_start;
      END IF;
    END IF;
  END PROCESS c_process;


  c_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        crcctrlin_end <= '0';
      ELSIF enb_gated_3 = '1' THEN
        crcctrlin_end <= ctrl_end;
      END IF;
    END IF;
  END PROCESS c_1_process;


  c_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        crcctrlin_valid <= '0';
      ELSIF enb_gated_3 = '1' THEN
        crcctrlin_valid <= ctrl_valid;
      END IF;
    END IF;
  END PROCESS c_2_process;


  stateControl_9 <= '1';

  delayMatch4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch4_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch4_reg(0) <= stateControl_9;
        delayMatch4_reg(1 TO 41) <= delayMatch4_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch4_process;

  stateControl_10 <= delayMatch4_reg(41);

  enb_gated_4 <= stateControl_10 AND enb;

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_out1 <= '0';
      ELSIF enb_gated_4 = '1' THEN
        Delay4_out1 <= cecdataout;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  stateControl_11 <= '1';

  delayMatch5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch5_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch5_reg(0) <= stateControl_11;
        delayMatch5_reg(1 TO 41) <= delayMatch5_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch5_process;

  stateControl_12 <= delayMatch5_reg(41);

  enb_gated_5 <= stateControl_12 AND enb;

  c_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_out1_start <= '0';
      ELSIF enb_gated_5 = '1' THEN
        Delay6_out1_start <= CRC_Decoder_out2_start;
      END IF;
    END IF;
  END PROCESS c_3_process;


  c_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_out1_end <= '0';
      ELSIF enb_gated_5 = '1' THEN
        Delay6_out1_end <= CRC_Decoder_out2_end;
      END IF;
    END IF;
  END PROCESS c_4_process;


  crcerror_unsigned <= unsigned(crcerror);

  stateControl_13 <= '1';

  delayMatch6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch6_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch6_reg(0) <= stateControl_13;
        delayMatch6_reg(1 TO 41) <= delayMatch6_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch6_process;

  stateControl_14 <= delayMatch6_reg(41);

  enb_gated_6 <= stateControl_14 AND enb;

  c_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_out1_valid <= '0';
      ELSIF enb_gated_5 = '1' THEN
        Delay6_out1_valid <= CRC_Decoder_out2_valid;
      END IF;
    END IF;
  END PROCESS c_5_process;


  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_out1 <= to_unsigned(16#0000#, 16);
      ELSIF enb_gated_6 = '1' THEN
        Delay5_out1 <= crcerror_unsigned;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  cellRefP <= cellrefp_1;

  repeatQPSK <= BCH_Controller_out2;

  restartMIB <= BCH_Controller_out4;

  MIBDetected <= BCH_Controller_out3;

  dataOut <= dataOut_tmp;

  nfmod4 <= BCH_Controller_out5;

END rtl;

