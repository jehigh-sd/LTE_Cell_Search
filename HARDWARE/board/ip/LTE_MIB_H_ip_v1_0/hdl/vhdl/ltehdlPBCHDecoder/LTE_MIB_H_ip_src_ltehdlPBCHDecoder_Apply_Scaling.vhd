-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\zynqRadioHWSWLTEMIBDetectorRFSoC2x2\ltehdlPBCHDecoder\LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Apply_Scaling.vhd
-- Created: 2022-05-23 17:26:45
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Apply_Scaling
-- Source Path: ltehdlPBCHDecoder/BCH Decoder/softBitScalingUnit/Apply Scaling
-- Hierarchy Level: 6
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
LIBRARY work_ltehdlPBCHDecoder;
USE work.LTE_MIB_H_ip_src_ltehdlPBCHDecoder_ltehdlPBCHDecoder_pac.ALL;

ENTITY LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Apply_Scaling IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        shiftAmount                       :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
        fineGain                          :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8_En7
        dataIn_0                          :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
        dataIn_1                          :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
        dataIn_2                          :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
        ctrlIn_start                      :   IN    std_logic;  -- record {boolean,boolean,boolean}
        ctrlIn_end                        :   IN    std_logic;  -- record {boolean,boolean,boolean}
        ctrlIn_valid                      :   IN    std_logic;  -- record {boolean,boolean,boolean}
        dataOut_0                         :   OUT   std_logic_vector(3 DOWNTO 0);  -- sfix4_En1
        dataOut_1                         :   OUT   std_logic_vector(3 DOWNTO 0);  -- sfix4_En1
        dataOut_2                         :   OUT   std_logic_vector(3 DOWNTO 0);  -- sfix4_En1
        ctrlOut_start                     :   OUT   std_logic;  -- record {boolean,boolean,boolean}
        ctrlOut_end                       :   OUT   std_logic;  -- record {boolean,boolean,boolean}
        ctrlOut_valid                     :   OUT   std_logic  -- record {boolean,boolean,boolean}
        );
END LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Apply_Scaling;


ARCHITECTURE rtl OF LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Apply_Scaling IS

  -- Component Declarations
  COMPONENT LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Sign_Extend_by_2
    PORT( x_0                             :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
          x_1                             :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
          x_2                             :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
          y_0                             :   OUT   std_logic_vector(21 DOWNTO 0);  -- sfix22_En17
          y_1                             :   OUT   std_logic_vector(21 DOWNTO 0);  -- sfix22_En17
          y_2                             :   OUT   std_logic_vector(21 DOWNTO 0)  -- sfix22_En17
          );
  END COMPONENT;

  COMPONENT LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Rounding_Symmetric_Saturation
    PORT( dataScaled_0                    :   IN    std_logic_vector(29 DOWNTO 0);  -- sfix30_En24
          dataScaled_1                    :   IN    std_logic_vector(29 DOWNTO 0);  -- sfix30_En24
          dataScaled_2                    :   IN    std_logic_vector(29 DOWNTO 0);  -- sfix30_En24
          validIn                         :   IN    std_logic;
          dataInDT_0                      :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
          dataInDT_1                      :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
          dataInDT_2                      :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
          dataOut_0                       :   OUT   std_logic_vector(3 DOWNTO 0);  -- sfix4_En1
          dataOut_1                       :   OUT   std_logic_vector(3 DOWNTO 0);  -- sfix4_En1
          dataOut_2                       :   OUT   std_logic_vector(3 DOWNTO 0)  -- sfix4_En1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Sign_Extend_by_2
    USE ENTITY work_ltehdlPBCHDecoder.LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Sign_Extend_by_2(rtl);

  FOR ALL : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Rounding_Symmetric_Saturation
    USE ENTITY work_ltehdlPBCHDecoder.LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Rounding_Symmetric_Saturation(rtl);

  -- Signals
  SIGNAL y_0                              : std_logic_vector(21 DOWNTO 0);  -- ufix22
  SIGNAL y_1                              : std_logic_vector(21 DOWNTO 0);  -- ufix22
  SIGNAL y_2                              : std_logic_vector(21 DOWNTO 0);  -- ufix22
  SIGNAL y_0_signed                       : signed(21 DOWNTO 0);  -- sfix22_En17
  SIGNAL shiftAmount_unsigned             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL shift_arithmetic_1_cast          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL out_1                            : signed(21 DOWNTO 0);  -- sfix22_En17
  SIGNAL y_1_signed                       : signed(21 DOWNTO 0);  -- sfix22_En17
  SIGNAL shift_arithmetic_2_cast          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL out_2                            : signed(21 DOWNTO 0);  -- sfix22_En17
  SIGNAL y_2_signed                       : signed(21 DOWNTO 0);  -- sfix22_En17
  SIGNAL shift_arithmetic_3_cast          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL out_3                            : signed(21 DOWNTO 0);  -- sfix22_En17
  SIGNAL Shift_Arithmetic_out1            : vector_of_signed22(0 TO 2);  -- sfix22_En17 [3]
  SIGNAL stateControl                     : std_logic;
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL enb_gated                        : std_logic;
  SIGNAL Delay2_out1                      : vector_of_signed22(0 TO 2);  -- sfix22_En17 [3]
  SIGNAL fineGain_unsigned                : unsigned(7 DOWNTO 0);  -- ufix8_En7
  SIGNAL Delay2_out1_1                    : vector_of_signed22(0 TO 2);  -- sfix22_En17 [3]
  SIGNAL Product_cast                     : vector_of_signed9(0 TO 2);  -- sfix9_En7 [3]
  SIGNAL Product_mul_temp                 : vector_of_signed31(0 TO 2);  -- sfix31_En24 [3]
  SIGNAL Product_out1                     : vector_of_signed30(0 TO 2);  -- sfix30_En24 [3]
  SIGNAL Product_out1_1                   : vector_of_signed30(0 TO 2);  -- sfix30_En24 [3]
  SIGNAL stateControl_2                   : std_logic;
  SIGNAL delayMatch1_reg                  : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL stateControl_3                   : std_logic;
  SIGNAL enb_gated_1                      : std_logic;
  SIGNAL tb_dataScaled                    : vector_of_signed30(0 TO 2);  -- sfix30_En24 [3]
  SIGNAL tb_dataScaled_1                  : vector_of_signed30(0 TO 2);  -- sfix30_En24 [3]
  SIGNAL stateControl_4                   : std_logic;
  SIGNAL delayMatch2_reg                  : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL stateControl_5                   : std_logic;
  SIGNAL enb_gated_2                      : std_logic;
  SIGNAL Delay5_out1_valid                : std_logic;
  SIGNAL stateControl_7                   : std_logic;
  SIGNAL delayMatch3_reg                  : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL stateControl_8                   : std_logic;
  SIGNAL enb_gated_3                      : std_logic;
  SIGNAL Delay1_out1_valid                : std_logic;
  SIGNAL valid                            : std_logic;
  SIGNAL dataOut_1_1                      : std_logic_vector(3 DOWNTO 0);  -- ufix4
  SIGNAL dataOut_2_1                      : std_logic_vector(3 DOWNTO 0);  -- ufix4
  SIGNAL dataOut                          : vector_of_std_logic_vector4(0 TO 2);  -- ufix4 [3]
  SIGNAL dataOut_3                        : vector_of_signed4(0 TO 2);  -- sfix4_En1 [3]
  SIGNAL dataOut_4                        : vector_of_signed4(0 TO 2);  -- sfix4_En1 [3]
  SIGNAL stateControl_9                   : std_logic;
  SIGNAL delayMatch4_reg                  : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL stateControl_10                  : std_logic;
  SIGNAL enb_gated_4                      : std_logic;
  SIGNAL Delay6_out1                      : vector_of_signed4(0 TO 2);  -- sfix4_En1 [3]
  SIGNAL Delay5_out1_start                : std_logic;
  SIGNAL Delay1_out1_start                : std_logic;
  SIGNAL stateControl_11                  : std_logic;
  SIGNAL delayMatch5_reg                  : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL stateControl_12                  : std_logic;
  SIGNAL enb_gated_5                      : std_logic;
  SIGNAL Delay3_out1_start                : std_logic;
  SIGNAL Delay5_out1_end                  : std_logic;
  SIGNAL Delay1_out1_end                  : std_logic;
  SIGNAL Delay3_out1_end                  : std_logic;
  SIGNAL Delay3_out1_valid                : std_logic;

BEGIN
  -- dataInDT is used to convey type information only.
  -- Its signal values are not used.
  -- 
  -- coarse gain (left shift)
  -- 
  -- fine gain

  u_Sign_Extend_by_2 : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Sign_Extend_by_2
    PORT MAP( x_0 => dataIn_0,  -- sfix20_En17
              x_1 => dataIn_1,  -- sfix20_En17
              x_2 => dataIn_2,  -- sfix20_En17
              y_0 => y_0,  -- sfix22_En17
              y_1 => y_1,  -- sfix22_En17
              y_2 => y_2  -- sfix22_En17
              );

  u_Rounding_Symmetric_Saturation : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Rounding_Symmetric_Saturation
    PORT MAP( dataScaled_0 => std_logic_vector(tb_dataScaled_1(0)),  -- sfix30_En24
              dataScaled_1 => std_logic_vector(tb_dataScaled_1(1)),  -- sfix30_En24
              dataScaled_2 => std_logic_vector(tb_dataScaled_1(2)),  -- sfix30_En24
              validIn => valid,
              dataInDT_0 => dataIn_0,  -- sfix20_En17
              dataInDT_1 => dataIn_1,  -- sfix20_En17
              dataInDT_2 => dataIn_2,  -- sfix20_En17
              dataOut_0 => dataOut(0),  -- sfix4_En1
              dataOut_1 => dataOut_1_1,  -- sfix4_En1
              dataOut_2 => dataOut_2_1  -- sfix4_En1
              );

  y_0_signed <= signed(y_0);

  shiftAmount_unsigned <= unsigned(shiftAmount);

  shift_arithmetic_1_cast <= resize(shiftAmount_unsigned, 8);
  out_1 <= y_0_signed sll to_integer(shift_arithmetic_1_cast);

  y_1_signed <= signed(y_1);

  shift_arithmetic_2_cast <= resize(shiftAmount_unsigned, 8);
  out_2 <= y_1_signed sll to_integer(shift_arithmetic_2_cast);

  y_2_signed <= signed(y_2);

  shift_arithmetic_3_cast <= resize(shiftAmount_unsigned, 8);
  out_3 <= y_2_signed sll to_integer(shift_arithmetic_3_cast);

  Shift_Arithmetic_out1(0) <= out_1;
  Shift_Arithmetic_out1(1) <= out_2;
  Shift_Arithmetic_out1(2) <= out_3;

  stateControl <= '1';

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch_reg(0) <= stateControl;
        delayMatch_reg(1 TO 41) <= delayMatch_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  stateControl_1 <= delayMatch_reg(41);

  enb_gated <= stateControl_1 AND enb;

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1 <= (OTHERS => to_signed(16#000000#, 22));
      ELSIF enb_gated = '1' THEN
        Delay2_out1 <= Shift_Arithmetic_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  fineGain_unsigned <= unsigned(fineGain);

  Delay2_out1_1(0) <= Delay2_out1(0);
  Delay2_out1_1(1) <= Delay2_out1(1);
  Delay2_out1_1(2) <= Delay2_out1(2);


  Product_out1_gen: FOR t_0 IN 0 TO 2 GENERATE
    Product_cast(t_0) <= signed(resize(fineGain_unsigned, 9));
    Product_mul_temp(t_0) <= Product_cast(t_0) * Delay2_out1_1(t_0);
    Product_out1(t_0) <= Product_mul_temp(t_0)(29 DOWNTO 0);
  END GENERATE Product_out1_gen;


  Product_out1_1(0) <= Product_out1(0);
  Product_out1_1(1) <= Product_out1(1);
  Product_out1_1(2) <= Product_out1(2);

  stateControl_2 <= '1';

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch1_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch1_reg(0) <= stateControl_2;
        delayMatch1_reg(1 TO 41) <= delayMatch1_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  stateControl_3 <= delayMatch1_reg(41);

  enb_gated_1 <= stateControl_3 AND enb;

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        tb_dataScaled <= (OTHERS => to_signed(16#00000000#, 30));
      ELSIF enb_gated_1 = '1' THEN
        tb_dataScaled <= Product_out1_1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  tb_dataScaled_1(0) <= tb_dataScaled(0);
  tb_dataScaled_1(1) <= tb_dataScaled(1);
  tb_dataScaled_1(2) <= tb_dataScaled(2);

  stateControl_4 <= '1';

  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch2_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch2_reg(0) <= stateControl_4;
        delayMatch2_reg(1 TO 41) <= delayMatch2_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  stateControl_5 <= delayMatch2_reg(41);

  enb_gated_2 <= stateControl_5 AND enb;

  c_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_out1_valid <= '0';
      ELSIF enb_gated_2 = '1' THEN
        Delay5_out1_valid <= ctrlIn_valid;
      END IF;
    END IF;
  END PROCESS c_process;


  stateControl_7 <= '1';

  delayMatch3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch3_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch3_reg(0) <= stateControl_7;
        delayMatch3_reg(1 TO 41) <= delayMatch3_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch3_process;

  stateControl_8 <= delayMatch3_reg(41);

  enb_gated_3 <= stateControl_8 AND enb;

  c_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1_valid <= '0';
      ELSIF enb_gated_3 = '1' THEN
        Delay1_out1_valid <= Delay5_out1_valid;
      END IF;
    END IF;
  END PROCESS c_1_process;


  valid <= Delay1_out1_valid;

  dataOut(1) <= dataOut_1_1;
  dataOut(2) <= dataOut_2_1;

  outputgen: FOR k IN 0 TO 2 GENERATE
    dataOut_3(k) <= signed(dataOut(k));
  END GENERATE;

  dataOut_4(0) <= dataOut_3(0);
  dataOut_4(1) <= signed(dataOut_1_1);
  dataOut_4(2) <= signed(dataOut_2_1);

  stateControl_9 <= '1';

  delayMatch4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch4_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch4_reg(0) <= stateControl_9;
        delayMatch4_reg(1 TO 41) <= delayMatch4_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch4_process;

  stateControl_10 <= delayMatch4_reg(41);

  enb_gated_4 <= stateControl_10 AND enb;

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_out1 <= (OTHERS => to_signed(16#0#, 4));
      ELSIF enb_gated_4 = '1' THEN
        Delay6_out1 <= dataOut_4;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  dataOut_0 <= std_logic_vector(Delay6_out1(0));

  dataOut_1 <= std_logic_vector(Delay6_out1(1));

  dataOut_2 <= std_logic_vector(Delay6_out1(2));

  c_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_out1_start <= '0';
      ELSIF enb_gated_2 = '1' THEN
        Delay5_out1_start <= ctrlIn_start;
      END IF;
    END IF;
  END PROCESS c_2_process;


  c_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1_start <= '0';
      ELSIF enb_gated_3 = '1' THEN
        Delay1_out1_start <= Delay5_out1_start;
      END IF;
    END IF;
  END PROCESS c_3_process;


  stateControl_11 <= '1';

  delayMatch5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch5_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch5_reg(0) <= stateControl_11;
        delayMatch5_reg(1 TO 41) <= delayMatch5_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch5_process;

  stateControl_12 <= delayMatch5_reg(41);

  enb_gated_5 <= stateControl_12 AND enb;

  c_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1_start <= '0';
      ELSIF enb_gated_5 = '1' THEN
        Delay3_out1_start <= Delay1_out1_start;
      END IF;
    END IF;
  END PROCESS c_4_process;


  c_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_out1_end <= '0';
      ELSIF enb_gated_2 = '1' THEN
        Delay5_out1_end <= ctrlIn_end;
      END IF;
    END IF;
  END PROCESS c_5_process;


  c_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1_end <= '0';
      ELSIF enb_gated_3 = '1' THEN
        Delay1_out1_end <= Delay5_out1_end;
      END IF;
    END IF;
  END PROCESS c_6_process;


  c_7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1_end <= '0';
      ELSIF enb_gated_5 = '1' THEN
        Delay3_out1_end <= Delay1_out1_end;
      END IF;
    END IF;
  END PROCESS c_7_process;


  c_8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1_valid <= '0';
      ELSIF enb_gated_5 = '1' THEN
        Delay3_out1_valid <= Delay1_out1_valid;
      END IF;
    END IF;
  END PROCESS c_8_process;


  ctrlOut_start <= Delay3_out1_start;

  ctrlOut_end <= Delay3_out1_end;

  ctrlOut_valid <= Delay3_out1_valid;

END rtl;

