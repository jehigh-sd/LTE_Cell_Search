-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\zynqRadioHWSWLTEMIBDetectorRFSoC2x2\ltehdlPBCHDecoder\LTE_MIB_H_ip_src_ltehdlPBCHDecoder_CRCCompNet.vhd
-- Created: 2022-05-23 17:26:45
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: LTE_MIB_H_ip_src_ltehdlPBCHDecoder_CRCCompNet
-- Source Path: ltehdlPBCHDecoder/BCH Decoder/CRC Decoder/CRCCompNet
-- Hierarchy Level: 6
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.LTE_MIB_H_ip_src_ltehdlPBCHDecoder_ltehdlPBCHDecoder_pac.ALL;

ENTITY LTE_MIB_H_ip_src_ltehdlPBCHDecoder_CRCCompNet IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        in1                               :   IN    std_logic;
        in2                               :   IN    std_logic;
        en                                :   IN    std_logic;  -- ufix1
        rst                               :   IN    std_logic;  -- ufix1
        gateErrIn                         :   IN    std_logic;  -- ufix1
        err                               :   OUT   std_logic_vector(15 DOWNTO 0)  -- ufix16
        );
END LTE_MIB_H_ip_src_ltehdlPBCHDecoder_CRCCompNet;


ARCHITECTURE rtl OF LTE_MIB_H_ip_src_ltehdlPBCHDecoder_CRCCompNet IS

  -- Functions
  -- HDLCODER_TO_UNSIGNED
  FUNCTION hdlcoder_to_unsigned(arg: boolean; width: integer) RETURN unsigned IS
  BEGIN
    IF arg THEN
      RETURN to_unsigned(1, width);
    ELSE
      RETURN to_unsigned(0, width);
    END IF;
  END FUNCTION;


  -- Signals
  SIGNAL CRCComp_crc_in                   : std_logic_vector(0 TO 16);  -- ufix1 [17]
  SIGNAL CRCComp_crc_rec                  : std_logic_vector(0 TO 16);  -- ufix1 [17]
  SIGNAL CRCComp_crc_in_next              : std_logic_vector(0 TO 16);  -- ufix1 [17]
  SIGNAL CRCComp_crc_rec_next             : std_logic_vector(0 TO 16);  -- ufix1 [17]
  SIGNAL err_tmp                          : unsigned(15 DOWNTO 0);  -- ufix16

BEGIN
  -- CRCCompareFunction
  CRCComp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        CRCComp_crc_in(0) <= '0';
        CRCComp_crc_in(1) <= '0';
        CRCComp_crc_in(2) <= '0';
        CRCComp_crc_in(3) <= '0';
        CRCComp_crc_in(4) <= '0';
        CRCComp_crc_in(5) <= '0';
        CRCComp_crc_in(6) <= '0';
        CRCComp_crc_in(7) <= '0';
        CRCComp_crc_in(8) <= '0';
        CRCComp_crc_in(9) <= '0';
        CRCComp_crc_in(10) <= '0';
        CRCComp_crc_in(11) <= '0';
        CRCComp_crc_in(12) <= '0';
        CRCComp_crc_in(13) <= '0';
        CRCComp_crc_in(14) <= '0';
        CRCComp_crc_in(15) <= '0';
        CRCComp_crc_in(16) <= '0';
        CRCComp_crc_rec(0) <= '0';
        CRCComp_crc_rec(1) <= '0';
        CRCComp_crc_rec(2) <= '0';
        CRCComp_crc_rec(3) <= '0';
        CRCComp_crc_rec(4) <= '0';
        CRCComp_crc_rec(5) <= '0';
        CRCComp_crc_rec(6) <= '0';
        CRCComp_crc_rec(7) <= '0';
        CRCComp_crc_rec(8) <= '0';
        CRCComp_crc_rec(9) <= '0';
        CRCComp_crc_rec(10) <= '0';
        CRCComp_crc_rec(11) <= '0';
        CRCComp_crc_rec(12) <= '0';
        CRCComp_crc_rec(13) <= '0';
        CRCComp_crc_rec(14) <= '0';
        CRCComp_crc_rec(15) <= '0';
        CRCComp_crc_rec(16) <= '0';
      ELSIF enb = '1' THEN
        CRCComp_crc_in(0) <= CRCComp_crc_in_next(0);
        CRCComp_crc_in(1) <= CRCComp_crc_in_next(1);
        CRCComp_crc_in(2) <= CRCComp_crc_in_next(2);
        CRCComp_crc_in(3) <= CRCComp_crc_in_next(3);
        CRCComp_crc_in(4) <= CRCComp_crc_in_next(4);
        CRCComp_crc_in(5) <= CRCComp_crc_in_next(5);
        CRCComp_crc_in(6) <= CRCComp_crc_in_next(6);
        CRCComp_crc_in(7) <= CRCComp_crc_in_next(7);
        CRCComp_crc_in(8) <= CRCComp_crc_in_next(8);
        CRCComp_crc_in(9) <= CRCComp_crc_in_next(9);
        CRCComp_crc_in(10) <= CRCComp_crc_in_next(10);
        CRCComp_crc_in(11) <= CRCComp_crc_in_next(11);
        CRCComp_crc_in(12) <= CRCComp_crc_in_next(12);
        CRCComp_crc_in(13) <= CRCComp_crc_in_next(13);
        CRCComp_crc_in(14) <= CRCComp_crc_in_next(14);
        CRCComp_crc_in(15) <= CRCComp_crc_in_next(15);
        CRCComp_crc_in(16) <= CRCComp_crc_in_next(16);
        CRCComp_crc_rec(0) <= CRCComp_crc_rec_next(0);
        CRCComp_crc_rec(1) <= CRCComp_crc_rec_next(1);
        CRCComp_crc_rec(2) <= CRCComp_crc_rec_next(2);
        CRCComp_crc_rec(3) <= CRCComp_crc_rec_next(3);
        CRCComp_crc_rec(4) <= CRCComp_crc_rec_next(4);
        CRCComp_crc_rec(5) <= CRCComp_crc_rec_next(5);
        CRCComp_crc_rec(6) <= CRCComp_crc_rec_next(6);
        CRCComp_crc_rec(7) <= CRCComp_crc_rec_next(7);
        CRCComp_crc_rec(8) <= CRCComp_crc_rec_next(8);
        CRCComp_crc_rec(9) <= CRCComp_crc_rec_next(9);
        CRCComp_crc_rec(10) <= CRCComp_crc_rec_next(10);
        CRCComp_crc_rec(11) <= CRCComp_crc_rec_next(11);
        CRCComp_crc_rec(12) <= CRCComp_crc_rec_next(12);
        CRCComp_crc_rec(13) <= CRCComp_crc_rec_next(13);
        CRCComp_crc_rec(14) <= CRCComp_crc_rec_next(14);
        CRCComp_crc_rec(15) <= CRCComp_crc_rec_next(15);
        CRCComp_crc_rec(16) <= CRCComp_crc_rec_next(16);
      END IF;
    END IF;
  END PROCESS CRCComp_process;

  CRCComp_output : PROCESS (CRCComp_crc_in, CRCComp_crc_rec, en, gateErrIn, in1, in2, rst)
    VARIABLE xor_reg : std_logic_vector(0 TO 15);
    VARIABLE concat_reg : vector_of_unsigned16(0 TO 15);
    VARIABLE Y : unsigned(19 DOWNTO 0);
    VARIABLE crc_in_temp : std_logic_vector(0 TO 16);
    VARIABLE crc_rec_temp : std_logic_vector(0 TO 16);
    VARIABLE crc_in_temp_0 : unsigned(31 DOWNTO 0);
    VARIABLE cast : signed(31 DOWNTO 0);
    VARIABLE cast_0 : unsigned(31 DOWNTO 0);
    VARIABLE xor_reg_0 : unsigned(31 DOWNTO 0);
    VARIABLE add_cast : signed(31 DOWNTO 0);
    VARIABLE add_cast_0 : unsigned(31 DOWNTO 0);
    VARIABLE add_temp : unsigned(20 DOWNTO 0);
    VARIABLE crc_in_temp_1 : unsigned(31 DOWNTO 0);
    VARIABLE add_cast_1 : signed(31 DOWNTO 0);
    VARIABLE add_cast_2 : unsigned(31 DOWNTO 0);
    VARIABLE add_temp_0 : unsigned(21 DOWNTO 0);
    VARIABLE crc_in_temp_2 : unsigned(31 DOWNTO 0);
    VARIABLE add_cast_3 : signed(31 DOWNTO 0);
    VARIABLE add_cast_4 : unsigned(31 DOWNTO 0);
    VARIABLE add_temp_1 : unsigned(22 DOWNTO 0);
    VARIABLE crc_in_temp_3 : unsigned(31 DOWNTO 0);
    VARIABLE add_cast_5 : signed(31 DOWNTO 0);
    VARIABLE add_cast_6 : unsigned(31 DOWNTO 0);
    VARIABLE add_temp_2 : unsigned(23 DOWNTO 0);
    VARIABLE crc_in_temp_4 : unsigned(31 DOWNTO 0);
    VARIABLE add_cast_7 : signed(31 DOWNTO 0);
    VARIABLE add_cast_8 : unsigned(31 DOWNTO 0);
    VARIABLE crc_in_temp_5 : unsigned(31 DOWNTO 0);
    VARIABLE add_cast_9 : signed(31 DOWNTO 0);
    VARIABLE add_cast_10 : unsigned(31 DOWNTO 0);
    VARIABLE crc_in_temp_6 : unsigned(31 DOWNTO 0);
    VARIABLE add_cast_11 : signed(31 DOWNTO 0);
    VARIABLE add_cast_12 : unsigned(31 DOWNTO 0);
    VARIABLE crc_in_temp_7 : unsigned(31 DOWNTO 0);
    VARIABLE add_cast_13 : signed(31 DOWNTO 0);
    VARIABLE add_cast_14 : unsigned(31 DOWNTO 0);
    VARIABLE crc_in_temp_8 : unsigned(31 DOWNTO 0);
    VARIABLE add_cast_15 : signed(31 DOWNTO 0);
    VARIABLE add_cast_16 : unsigned(31 DOWNTO 0);
    VARIABLE crc_in_temp_9 : unsigned(31 DOWNTO 0);
    VARIABLE add_cast_17 : signed(31 DOWNTO 0);
    VARIABLE add_cast_18 : unsigned(31 DOWNTO 0);
    VARIABLE crc_in_temp_10 : unsigned(31 DOWNTO 0);
    VARIABLE add_cast_19 : signed(31 DOWNTO 0);
    VARIABLE add_cast_20 : unsigned(31 DOWNTO 0);
    VARIABLE crc_in_temp_11 : unsigned(31 DOWNTO 0);
    VARIABLE add_cast_21 : signed(31 DOWNTO 0);
    VARIABLE add_cast_22 : unsigned(31 DOWNTO 0);
    VARIABLE crc_in_temp_12 : unsigned(31 DOWNTO 0);
    VARIABLE add_cast_23 : signed(31 DOWNTO 0);
    VARIABLE add_cast_24 : unsigned(31 DOWNTO 0);
    VARIABLE crc_in_temp_13 : unsigned(31 DOWNTO 0);
    VARIABLE add_cast_25 : signed(31 DOWNTO 0);
    VARIABLE add_cast_26 : unsigned(31 DOWNTO 0);
    VARIABLE crc_in_temp_14 : unsigned(31 DOWNTO 0);
    VARIABLE add_cast_27 : signed(31 DOWNTO 0);
    VARIABLE add_cast_28 : unsigned(31 DOWNTO 0);
  BEGIN
    Y := to_unsigned(16#00000#, 20);
    xor_reg_0 := to_unsigned(0, 32);
    add_temp := to_unsigned(16#000000#, 21);
    crc_in_temp_1 := to_unsigned(0, 32);
    add_temp_0 := to_unsigned(16#000000#, 22);
    crc_in_temp_2 := to_unsigned(0, 32);
    add_temp_1 := to_unsigned(16#000000#, 23);
    crc_in_temp_3 := to_unsigned(0, 32);
    add_temp_2 := to_unsigned(16#000000#, 24);
    crc_in_temp_4 := to_unsigned(0, 32);
    crc_in_temp_5 := to_unsigned(0, 32);
    crc_in_temp_6 := to_unsigned(0, 32);
    crc_in_temp_7 := to_unsigned(0, 32);
    crc_in_temp_8 := to_unsigned(0, 32);
    crc_in_temp_9 := to_unsigned(0, 32);
    crc_in_temp_10 := to_unsigned(0, 32);
    crc_in_temp_11 := to_unsigned(0, 32);
    crc_in_temp_12 := to_unsigned(0, 32);
    crc_in_temp_13 := to_unsigned(0, 32);
    crc_in_temp_14 := to_unsigned(0, 32);
    add_cast := to_signed(16#00000000#, 32);
    add_cast_0 := to_unsigned(16#00000000#, 32);
    add_cast_1 := to_signed(16#00000000#, 32);
    add_cast_2 := to_unsigned(16#00000000#, 32);
    add_cast_3 := to_signed(16#00000000#, 32);
    add_cast_4 := to_unsigned(16#00000000#, 32);
    add_cast_5 := to_signed(16#00000000#, 32);
    add_cast_6 := to_unsigned(16#00000000#, 32);
    add_cast_7 := to_signed(16#00000000#, 32);
    add_cast_8 := to_unsigned(16#00000000#, 32);
    add_cast_9 := to_signed(16#00000000#, 32);
    add_cast_10 := to_unsigned(16#00000000#, 32);
    add_cast_11 := to_signed(16#00000000#, 32);
    add_cast_12 := to_unsigned(16#00000000#, 32);
    add_cast_13 := to_signed(16#00000000#, 32);
    add_cast_14 := to_unsigned(16#00000000#, 32);
    add_cast_15 := to_signed(16#00000000#, 32);
    add_cast_16 := to_unsigned(16#00000000#, 32);
    add_cast_17 := to_signed(16#00000000#, 32);
    add_cast_18 := to_unsigned(16#00000000#, 32);
    add_cast_19 := to_signed(16#00000000#, 32);
    add_cast_20 := to_unsigned(16#00000000#, 32);
    add_cast_21 := to_signed(16#00000000#, 32);
    add_cast_22 := to_unsigned(16#00000000#, 32);
    add_cast_23 := to_signed(16#00000000#, 32);
    add_cast_24 := to_unsigned(16#00000000#, 32);
    add_cast_25 := to_signed(16#00000000#, 32);
    add_cast_26 := to_unsigned(16#00000000#, 32);
    add_cast_27 := to_signed(16#00000000#, 32);
    add_cast_28 := to_unsigned(16#00000000#, 32);
    crc_in_temp(0) := CRCComp_crc_in(0);
    crc_in_temp(1) := CRCComp_crc_in(1);
    crc_in_temp(2) := CRCComp_crc_in(2);
    crc_in_temp(3) := CRCComp_crc_in(3);
    crc_in_temp(4) := CRCComp_crc_in(4);
    crc_in_temp(5) := CRCComp_crc_in(5);
    crc_in_temp(6) := CRCComp_crc_in(6);
    crc_in_temp(7) := CRCComp_crc_in(7);
    crc_in_temp(8) := CRCComp_crc_in(8);
    crc_in_temp(9) := CRCComp_crc_in(9);
    crc_in_temp(10) := CRCComp_crc_in(10);
    crc_in_temp(11) := CRCComp_crc_in(11);
    crc_in_temp(12) := CRCComp_crc_in(12);
    crc_in_temp(13) := CRCComp_crc_in(13);
    crc_in_temp(14) := CRCComp_crc_in(14);
    crc_in_temp(15) := CRCComp_crc_in(15);
    crc_in_temp(16) := CRCComp_crc_in(16);
    crc_rec_temp(0) := CRCComp_crc_rec(0);
    crc_rec_temp(1) := CRCComp_crc_rec(1);
    crc_rec_temp(2) := CRCComp_crc_rec(2);
    crc_rec_temp(3) := CRCComp_crc_rec(3);
    crc_rec_temp(4) := CRCComp_crc_rec(4);
    crc_rec_temp(5) := CRCComp_crc_rec(5);
    crc_rec_temp(6) := CRCComp_crc_rec(6);
    crc_rec_temp(7) := CRCComp_crc_rec(7);
    crc_rec_temp(8) := CRCComp_crc_rec(8);
    crc_rec_temp(9) := CRCComp_crc_rec(9);
    crc_rec_temp(10) := CRCComp_crc_rec(10);
    crc_rec_temp(11) := CRCComp_crc_rec(11);
    crc_rec_temp(12) := CRCComp_crc_rec(12);
    crc_rec_temp(13) := CRCComp_crc_rec(13);
    crc_rec_temp(14) := CRCComp_crc_rec(14);
    crc_rec_temp(15) := CRCComp_crc_rec(15);
    crc_rec_temp(16) := CRCComp_crc_rec(16);
    IF rst /= '0' THEN 
      crc_in_temp(0) := '0';
      crc_in_temp(1) := '0';
      crc_in_temp(2) := '0';
      crc_in_temp(3) := '0';
      crc_in_temp(4) := '0';
      crc_in_temp(5) := '0';
      crc_in_temp(6) := '0';
      crc_in_temp(7) := '0';
      crc_in_temp(8) := '0';
      crc_in_temp(9) := '0';
      crc_in_temp(10) := '0';
      crc_in_temp(11) := '0';
      crc_in_temp(12) := '0';
      crc_in_temp(13) := '0';
      crc_in_temp(14) := '0';
      crc_in_temp(15) := '0';
      crc_in_temp(16) := '0';
      crc_rec_temp(0) := '0';
      crc_rec_temp(1) := '0';
      crc_rec_temp(2) := '0';
      crc_rec_temp(3) := '0';
      crc_rec_temp(4) := '0';
      crc_rec_temp(5) := '0';
      crc_rec_temp(6) := '0';
      crc_rec_temp(7) := '0';
      crc_rec_temp(8) := '0';
      crc_rec_temp(9) := '0';
      crc_rec_temp(10) := '0';
      crc_rec_temp(11) := '0';
      crc_rec_temp(12) := '0';
      crc_rec_temp(13) := '0';
      crc_rec_temp(14) := '0';
      crc_rec_temp(15) := '0';
      crc_rec_temp(16) := '0';
    ELSIF en /= '0' THEN 
      crc_in_temp(0) := CRCComp_crc_in(1);
      crc_in_temp(1) := CRCComp_crc_in(2);
      crc_in_temp(2) := CRCComp_crc_in(3);
      crc_in_temp(3) := CRCComp_crc_in(4);
      crc_in_temp(4) := CRCComp_crc_in(5);
      crc_in_temp(5) := CRCComp_crc_in(6);
      crc_in_temp(6) := CRCComp_crc_in(7);
      crc_in_temp(7) := CRCComp_crc_in(8);
      crc_in_temp(8) := CRCComp_crc_in(9);
      crc_in_temp(9) := CRCComp_crc_in(10);
      crc_in_temp(10) := CRCComp_crc_in(11);
      crc_in_temp(11) := CRCComp_crc_in(12);
      crc_in_temp(12) := CRCComp_crc_in(13);
      crc_in_temp(13) := CRCComp_crc_in(14);
      crc_in_temp(14) := CRCComp_crc_in(15);
      crc_in_temp(15) := CRCComp_crc_in(16);
      crc_in_temp(16) := in1;
      crc_rec_temp(0) := CRCComp_crc_rec(1);
      crc_rec_temp(1) := CRCComp_crc_rec(2);
      crc_rec_temp(2) := CRCComp_crc_rec(3);
      crc_rec_temp(3) := CRCComp_crc_rec(4);
      crc_rec_temp(4) := CRCComp_crc_rec(5);
      crc_rec_temp(5) := CRCComp_crc_rec(6);
      crc_rec_temp(6) := CRCComp_crc_rec(7);
      crc_rec_temp(7) := CRCComp_crc_rec(8);
      crc_rec_temp(8) := CRCComp_crc_rec(9);
      crc_rec_temp(9) := CRCComp_crc_rec(10);
      crc_rec_temp(10) := CRCComp_crc_rec(11);
      crc_rec_temp(11) := CRCComp_crc_rec(12);
      crc_rec_temp(12) := CRCComp_crc_rec(13);
      crc_rec_temp(13) := CRCComp_crc_rec(14);
      crc_rec_temp(14) := CRCComp_crc_rec(15);
      crc_rec_temp(15) := CRCComp_crc_rec(16);
      crc_rec_temp(16) := in2;
    END IF;
    xor_reg(1) := crc_in_temp(1) XOR crc_rec_temp(1);
    crc_in_temp_0 := hdlcoder_to_unsigned((crc_in_temp(0) XOR crc_rec_temp(0)) /= '0', 32) sll 15;
    cast := signed(crc_in_temp_0);
    cast_0 := unsigned(cast);
    concat_reg(0) := cast_0(15 DOWNTO 0);
    IF gateErrIn /= '0' THEN 
      xor_reg_0 := hdlcoder_to_unsigned(xor_reg(1) /= '0', 32) sll 14;
      add_cast := signed(xor_reg_0);
      add_cast_0 := unsigned(add_cast);
      add_temp := resize(concat_reg(0), 21) + resize(resize(add_cast_0, 16), 21);
      crc_in_temp_1 := hdlcoder_to_unsigned((crc_in_temp(2) XOR crc_rec_temp(2)) /= '0', 32) sll 13;
      add_cast_1 := signed(crc_in_temp_1);
      add_cast_2 := unsigned(add_cast_1);
      add_temp_0 := resize(add_temp, 22) + resize(resize(add_cast_2, 16), 22);
      crc_in_temp_2 := hdlcoder_to_unsigned((crc_in_temp(3) XOR crc_rec_temp(3)) /= '0', 32) sll 12;
      add_cast_3 := signed(crc_in_temp_2);
      add_cast_4 := unsigned(add_cast_3);
      add_temp_1 := resize(add_temp_0, 23) + resize(resize(add_cast_4, 16), 23);
      crc_in_temp_3 := hdlcoder_to_unsigned((crc_in_temp(4) XOR crc_rec_temp(4)) /= '0', 32) sll 11;
      add_cast_5 := signed(crc_in_temp_3);
      add_cast_6 := unsigned(add_cast_5);
      add_temp_2 := resize(add_temp_1, 24) + resize(resize(add_cast_6, 16), 24);
      crc_in_temp_4 := hdlcoder_to_unsigned((crc_in_temp(5) XOR crc_rec_temp(5)) /= '0', 32) sll 10;
      add_cast_7 := signed(crc_in_temp_4);
      add_cast_8 := unsigned(add_cast_7);
      Y := resize(resize(add_temp_2, 25) + resize(resize(add_cast_8, 16), 25), 20);
      crc_in_temp_5 := hdlcoder_to_unsigned((crc_in_temp(6) XOR crc_rec_temp(6)) /= '0', 32) sll 9;
      add_cast_9 := signed(crc_in_temp_5);
      add_cast_10 := unsigned(add_cast_9);
      Y := resize(resize(Y, 21) + resize(resize(add_cast_10, 16), 21), 20);
      crc_in_temp_6 := hdlcoder_to_unsigned((crc_in_temp(7) XOR crc_rec_temp(7)) /= '0', 32) sll 8;
      add_cast_11 := signed(crc_in_temp_6);
      add_cast_12 := unsigned(add_cast_11);
      Y := resize(resize(Y, 21) + resize(resize(add_cast_12, 16), 21), 20);
      crc_in_temp_7 := hdlcoder_to_unsigned((crc_in_temp(8) XOR crc_rec_temp(8)) /= '0', 32) sll 7;
      add_cast_13 := signed(crc_in_temp_7);
      add_cast_14 := unsigned(add_cast_13);
      Y := resize(resize(Y, 21) + resize(resize(add_cast_14, 16), 21), 20);
      crc_in_temp_8 := hdlcoder_to_unsigned((crc_in_temp(9) XOR crc_rec_temp(9)) /= '0', 32) sll 6;
      add_cast_15 := signed(crc_in_temp_8);
      add_cast_16 := unsigned(add_cast_15);
      Y := resize(resize(Y, 21) + resize(resize(add_cast_16, 16), 21), 20);
      crc_in_temp_9 := hdlcoder_to_unsigned((crc_in_temp(10) XOR crc_rec_temp(10)) /= '0', 32) sll 5;
      add_cast_17 := signed(crc_in_temp_9);
      add_cast_18 := unsigned(add_cast_17);
      Y := resize(resize(Y, 21) + resize(resize(add_cast_18, 16), 21), 20);
      crc_in_temp_10 := hdlcoder_to_unsigned((crc_in_temp(11) XOR crc_rec_temp(11)) /= '0', 32) sll 4;
      add_cast_19 := signed(crc_in_temp_10);
      add_cast_20 := unsigned(add_cast_19);
      Y := resize(resize(Y, 21) + resize(resize(add_cast_20, 16), 21), 20);
      crc_in_temp_11 := hdlcoder_to_unsigned((crc_in_temp(12) XOR crc_rec_temp(12)) /= '0', 32) sll 3;
      add_cast_21 := signed(crc_in_temp_11);
      add_cast_22 := unsigned(add_cast_21);
      Y := resize(resize(Y, 21) + resize(resize(add_cast_22, 16), 21), 20);
      crc_in_temp_12 := hdlcoder_to_unsigned((crc_in_temp(13) XOR crc_rec_temp(13)) /= '0', 32) sll 2;
      add_cast_23 := signed(crc_in_temp_12);
      add_cast_24 := unsigned(add_cast_23);
      Y := resize(resize(Y, 21) + resize(resize(add_cast_24, 16), 21), 20);
      crc_in_temp_13 := hdlcoder_to_unsigned((crc_in_temp(14) XOR crc_rec_temp(14)) /= '0', 32) sll 1;
      add_cast_25 := signed(crc_in_temp_13);
      add_cast_26 := unsigned(add_cast_25);
      Y := resize(resize(Y, 21) + resize(resize(add_cast_26, 16), 21), 20);
      crc_in_temp_14 := hdlcoder_to_unsigned((crc_in_temp(15) XOR crc_rec_temp(15)) /= '0', 32) sll 0;
      add_cast_27 := signed(crc_in_temp_14);
      add_cast_28 := unsigned(add_cast_27);
      Y := resize(resize(Y, 21) + resize(resize(add_cast_28, 16), 21), 20);
      err_tmp <= Y(15 DOWNTO 0);
    ELSE 
      err_tmp <= to_unsigned(16#0000#, 16);
    END IF;
    CRCComp_crc_in_next(0) <= crc_in_temp(0);
    CRCComp_crc_in_next(1) <= crc_in_temp(1);
    CRCComp_crc_in_next(2) <= crc_in_temp(2);
    CRCComp_crc_in_next(3) <= crc_in_temp(3);
    CRCComp_crc_in_next(4) <= crc_in_temp(4);
    CRCComp_crc_in_next(5) <= crc_in_temp(5);
    CRCComp_crc_in_next(6) <= crc_in_temp(6);
    CRCComp_crc_in_next(7) <= crc_in_temp(7);
    CRCComp_crc_in_next(8) <= crc_in_temp(8);
    CRCComp_crc_in_next(9) <= crc_in_temp(9);
    CRCComp_crc_in_next(10) <= crc_in_temp(10);
    CRCComp_crc_in_next(11) <= crc_in_temp(11);
    CRCComp_crc_in_next(12) <= crc_in_temp(12);
    CRCComp_crc_in_next(13) <= crc_in_temp(13);
    CRCComp_crc_in_next(14) <= crc_in_temp(14);
    CRCComp_crc_in_next(15) <= crc_in_temp(15);
    CRCComp_crc_in_next(16) <= crc_in_temp(16);
    CRCComp_crc_rec_next(0) <= crc_rec_temp(0);
    CRCComp_crc_rec_next(1) <= crc_rec_temp(1);
    CRCComp_crc_rec_next(2) <= crc_rec_temp(2);
    CRCComp_crc_rec_next(3) <= crc_rec_temp(3);
    CRCComp_crc_rec_next(4) <= crc_rec_temp(4);
    CRCComp_crc_rec_next(5) <= crc_rec_temp(5);
    CRCComp_crc_rec_next(6) <= crc_rec_temp(6);
    CRCComp_crc_rec_next(7) <= crc_rec_temp(7);
    CRCComp_crc_rec_next(8) <= crc_rec_temp(8);
    CRCComp_crc_rec_next(9) <= crc_rec_temp(9);
    CRCComp_crc_rec_next(10) <= crc_rec_temp(10);
    CRCComp_crc_rec_next(11) <= crc_rec_temp(11);
    CRCComp_crc_rec_next(12) <= crc_rec_temp(12);
    CRCComp_crc_rec_next(13) <= crc_rec_temp(13);
    CRCComp_crc_rec_next(14) <= crc_rec_temp(14);
    CRCComp_crc_rec_next(15) <= crc_rec_temp(15);
    CRCComp_crc_rec_next(16) <= crc_rec_temp(16);
  END PROCESS CRCComp_output;


  err <= std_logic_vector(err_tmp);

END rtl;

