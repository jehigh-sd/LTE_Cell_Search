-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\zynqRadioHWSWLTEMIBDetectorRFSoC2x2\ltehdlPBCHDecoder\LTE_MIB_H_ip_src_ltehdlPBCHDecoder_softBitScalingUnit.vhd
-- Created: 2022-05-23 17:26:45
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: LTE_MIB_H_ip_src_ltehdlPBCHDecoder_softBitScalingUnit
-- Source Path: ltehdlPBCHDecoder/BCH Decoder/softBitScalingUnit
-- Hierarchy Level: 5
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
LIBRARY work_ltehdlPBCHDecoder;
USE work.LTE_MIB_H_ip_src_ltehdlPBCHDecoder_ltehdlPBCHDecoder_pac.ALL;

ENTITY LTE_MIB_H_ip_src_ltehdlPBCHDecoder_softBitScalingUnit IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn_0                          :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
        dataIn_1                          :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
        dataIn_2                          :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
        ctrlIn_start                      :   IN    std_logic;  -- record {boolean,boolean,boolean}
        ctrlIn_end                        :   IN    std_logic;  -- record {boolean,boolean,boolean}
        ctrlIn_valid                      :   IN    std_logic;  -- record {boolean,boolean,boolean}
        dataOut_0                         :   OUT   std_logic_vector(3 DOWNTO 0);  -- sfix4_En1
        dataOut_1                         :   OUT   std_logic_vector(3 DOWNTO 0);  -- sfix4_En1
        dataOut_2                         :   OUT   std_logic_vector(3 DOWNTO 0);  -- sfix4_En1
        ctrlOut_start                     :   OUT   std_logic;  -- record {boolean,boolean,boolean}
        ctrlOut_end                       :   OUT   std_logic;  -- record {boolean,boolean,boolean}
        ctrlOut_valid                     :   OUT   std_logic  -- record {boolean,boolean,boolean}
        );
END LTE_MIB_H_ip_src_ltehdlPBCHDecoder_softBitScalingUnit;


ARCHITECTURE rtl OF LTE_MIB_H_ip_src_ltehdlPBCHDecoder_softBitScalingUnit IS

  -- Component Declarations
  COMPONENT LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Symmetric_Saturation
    PORT( x_0                             :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
          x_1                             :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
          x_2                             :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
          y_0                             :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
          y_1                             :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
          y_2                             :   OUT   std_logic_vector(19 DOWNTO 0)  -- sfix20_En17
          );
  END COMPONENT;

  COMPONENT LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Maximum_Average_Absolute_Value
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn_0                        :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
          dataIn_1                        :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
          dataIn_2                        :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
          ctrlIn_start                    :   IN    std_logic;  -- record {boolean,boolean,boolean}
          ctrlIn_end                      :   IN    std_logic;  -- record {boolean,boolean,boolean}
          ctrlIn_valid                    :   IN    std_logic;  -- record {boolean,boolean,boolean}
          maxOut                          :   OUT   std_logic_vector(18 DOWNTO 0);  -- ufix19_En17
          maxValid                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Determine_Scaling
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          maxIn                           :   IN    std_logic_vector(18 DOWNTO 0);  -- ufix19_En17
          maxValid                        :   IN    std_logic;
          shiftAmount                     :   OUT   std_logic_vector(4 DOWNTO 0);  -- ufix5
          fineGain                        :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8_En7
          scalingValid                    :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT LTE_MIB_H_ip_src_ltehdlPBCHDecoder_MemoryController
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          ctrlIn_start                    :   IN    std_logic;  -- record {boolean,boolean,boolean}
          ctrlIn_end                      :   IN    std_logic;  -- record {boolean,boolean,boolean}
          ctrlIn_valid                    :   IN    std_logic;  -- record {boolean,boolean,boolean}
          startReading                    :   IN    std_logic;
          addr                            :   OUT   std_logic_vector(5 DOWNTO 0);  -- ufix6
          writeEn                         :   OUT   std_logic;
          ctrlOut_start                   :   OUT   std_logic;  -- record {boolean,boolean,boolean}
          ctrlOut_end                     :   OUT   std_logic;  -- record {boolean,boolean,boolean}
          ctrlOut_valid                   :   OUT   std_logic  -- record {boolean,boolean,boolean}
          );
  END COMPONENT;

  COMPONENT LTE_MIB_H_ip_src_ltehdlPBCHDecoder_SinglePortRAM_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          din                             :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          addr                            :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          we                              :   IN    std_logic;
          dout                            :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Apply_Scaling
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          shiftAmount                     :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          fineGain                        :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8_En7
          dataIn_0                        :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
          dataIn_1                        :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
          dataIn_2                        :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
          ctrlIn_start                    :   IN    std_logic;  -- record {boolean,boolean,boolean}
          ctrlIn_end                      :   IN    std_logic;  -- record {boolean,boolean,boolean}
          ctrlIn_valid                    :   IN    std_logic;  -- record {boolean,boolean,boolean}
          dataOut_0                       :   OUT   std_logic_vector(3 DOWNTO 0);  -- sfix4_En1
          dataOut_1                       :   OUT   std_logic_vector(3 DOWNTO 0);  -- sfix4_En1
          dataOut_2                       :   OUT   std_logic_vector(3 DOWNTO 0);  -- sfix4_En1
          ctrlOut_start                   :   OUT   std_logic;  -- record {boolean,boolean,boolean}
          ctrlOut_end                     :   OUT   std_logic;  -- record {boolean,boolean,boolean}
          ctrlOut_valid                   :   OUT   std_logic  -- record {boolean,boolean,boolean}
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Symmetric_Saturation
    USE ENTITY work_ltehdlPBCHDecoder.LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Symmetric_Saturation(rtl);

  FOR ALL : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Maximum_Average_Absolute_Value
    USE ENTITY work_ltehdlPBCHDecoder.LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Maximum_Average_Absolute_Value(rtl);

  FOR ALL : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Determine_Scaling
    USE ENTITY work_ltehdlPBCHDecoder.LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Determine_Scaling(rtl);

  FOR ALL : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_MemoryController
    USE ENTITY work_ltehdlPBCHDecoder.LTE_MIB_H_ip_src_ltehdlPBCHDecoder_MemoryController(rtl);

  FOR ALL : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_SinglePortRAM_generic
    USE ENTITY work_ltehdlPBCHDecoder.LTE_MIB_H_ip_src_ltehdlPBCHDecoder_SinglePortRAM_generic(rtl);

  FOR ALL : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Apply_Scaling
    USE ENTITY work_ltehdlPBCHDecoder.LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Apply_Scaling(rtl);

  -- Signals
  SIGNAL y_0                              : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL y_1                              : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL y_2                              : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL y                                : vector_of_signed20(0 TO 2);  -- sfix20_En17 [3]
  SIGNAL stateControl                     : std_logic;
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL enb_gated                        : std_logic;
  SIGNAL maxAvDataIn                      : vector_of_signed20(0 TO 2);  -- sfix20_En17 [3]
  SIGNAL maxAvDataIn_1                    : vector_of_signed20(0 TO 2);  -- sfix20_En17 [3]
  SIGNAL stateControl_2                   : std_logic;
  SIGNAL delayMatch1_reg                  : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL stateControl_3                   : std_logic;
  SIGNAL enb_gated_1                      : std_logic;
  SIGNAL axAvCtrlIn_start                 : std_logic;
  SIGNAL axAvCtrlIn_end                   : std_logic;
  SIGNAL axAvCtrlIn_valid                 : std_logic;
  SIGNAL maxOut                           : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL maxValid                         : std_logic;
  SIGNAL shiftAmount                      : std_logic_vector(4 DOWNTO 0);  -- ufix5
  SIGNAL fineGain                         : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL scalingValid                     : std_logic;
  SIGNAL addr                             : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL writeEn                          : std_logic;
  SIGNAL ctrlOut_start_1                  : std_logic;
  SIGNAL ctrlOut_end_1                    : std_logic;
  SIGNAL ctrlOut_valid_1                  : std_logic;
  SIGNAL pre_rd_out_1                     : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL pre_rd_out_2                     : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL dataOut                          : vector_of_std_logic_vector20(0 TO 2);  -- ufix20 [3]
  SIGNAL dataOut_3                        : vector_of_signed20(0 TO 2);  -- sfix20_En17 [3]
  SIGNAL stateControl_5                   : std_logic;
  SIGNAL delayMatch2_reg                  : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL stateControl_6                   : std_logic;
  SIGNAL enb_gated_2                      : std_logic;
  SIGNAL validOut_start                   : std_logic;
  SIGNAL validOut_end                     : std_logic;
  SIGNAL validOut_valid                   : std_logic;
  SIGNAL Apply_Scaling_out1_0             : std_logic_vector(3 DOWNTO 0);  -- ufix4
  SIGNAL Apply_Scaling_out1_1             : std_logic_vector(3 DOWNTO 0);  -- ufix4
  SIGNAL Apply_Scaling_out1_2             : std_logic_vector(3 DOWNTO 0);  -- ufix4
  SIGNAL Apply_Scaling_out2_start         : std_logic;
  SIGNAL Apply_Scaling_out2_end           : std_logic;
  SIGNAL Apply_Scaling_out2_valid         : std_logic;

BEGIN
  -- start reading data from RAM once the scaling terms are ready
  -- 
  -- shiftAmount and fineGain are constant after scalingValid goes HIGH.

  u_Symmetric_Saturation : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Symmetric_Saturation
    PORT MAP( x_0 => dataIn_0,  -- sfix20_En17
              x_1 => dataIn_1,  -- sfix20_En17
              x_2 => dataIn_2,  -- sfix20_En17
              y_0 => y_0,  -- sfix20_En17
              y_1 => y_1,  -- sfix20_En17
              y_2 => y_2  -- sfix20_En17
              );

  u_Maximum_Average_Absolute_Value : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Maximum_Average_Absolute_Value
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn_0 => std_logic_vector(maxAvDataIn_1(0)),  -- sfix20_En17
              dataIn_1 => std_logic_vector(maxAvDataIn_1(1)),  -- sfix20_En17
              dataIn_2 => std_logic_vector(maxAvDataIn_1(2)),  -- sfix20_En17
              ctrlIn_start => axAvCtrlIn_start,  -- record {boolean,boolean,boolean}
              ctrlIn_end => axAvCtrlIn_end,  -- record {boolean,boolean,boolean}
              ctrlIn_valid => axAvCtrlIn_valid,  -- record {boolean,boolean,boolean}
              maxOut => maxOut,  -- ufix19_En17
              maxValid => maxValid
              );

  u_Determine_Scaling : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Determine_Scaling
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              maxIn => maxOut,  -- ufix19_En17
              maxValid => maxValid,
              shiftAmount => shiftAmount,  -- ufix5
              fineGain => fineGain,  -- ufix8_En7
              scalingValid => scalingValid
              );

  u_MemoryController : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_MemoryController
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              ctrlIn_start => ctrlIn_start,  -- record {boolean,boolean,boolean}
              ctrlIn_end => ctrlIn_end,  -- record {boolean,boolean,boolean}
              ctrlIn_valid => ctrlIn_valid,  -- record {boolean,boolean,boolean}
              startReading => scalingValid,
              addr => addr,  -- ufix6
              writeEn => writeEn,
              ctrlOut_start => ctrlOut_start_1,  -- record {boolean,boolean,boolean}
              ctrlOut_end => ctrlOut_end_1,  -- record {boolean,boolean,boolean}
              ctrlOut_valid => ctrlOut_valid_1  -- record {boolean,boolean,boolean}
              );

  u_Simple_Dual_Port_RAM_System_bank0 : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_SinglePortRAM_generic
    GENERIC MAP( AddrWidth => 6,
                 DataWidth => 20
                 )
    PORT MAP( clk => clk,
              enb => enb,
              din => std_logic_vector(maxAvDataIn_1(0)),
              addr => addr,
              we => writeEn,
              dout => dataOut(0)
              );

  u_Simple_Dual_Port_RAM_System_bank1 : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_SinglePortRAM_generic
    GENERIC MAP( AddrWidth => 6,
                 DataWidth => 20
                 )
    PORT MAP( clk => clk,
              enb => enb,
              din => std_logic_vector(maxAvDataIn_1(1)),
              addr => addr,
              we => writeEn,
              dout => pre_rd_out_1
              );

  u_Simple_Dual_Port_RAM_System_bank2 : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_SinglePortRAM_generic
    GENERIC MAP( AddrWidth => 6,
                 DataWidth => 20
                 )
    PORT MAP( clk => clk,
              enb => enb,
              din => std_logic_vector(maxAvDataIn_1(2)),
              addr => addr,
              we => writeEn,
              dout => pre_rd_out_2
              );

  u_Apply_Scaling : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Apply_Scaling
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              shiftAmount => shiftAmount,  -- ufix5
              fineGain => fineGain,  -- ufix8_En7
              dataIn_0 => std_logic_vector(dataOut_3(0)),  -- sfix20_En17
              dataIn_1 => pre_rd_out_1,  -- sfix20_En17
              dataIn_2 => pre_rd_out_2,  -- sfix20_En17
              ctrlIn_start => validOut_start,  -- record {boolean,boolean,boolean}
              ctrlIn_end => validOut_end,  -- record {boolean,boolean,boolean}
              ctrlIn_valid => validOut_valid,  -- record {boolean,boolean,boolean}
              dataOut_0 => Apply_Scaling_out1_0,  -- sfix4_En1
              dataOut_1 => Apply_Scaling_out1_1,  -- sfix4_En1
              dataOut_2 => Apply_Scaling_out1_2,  -- sfix4_En1
              ctrlOut_start => Apply_Scaling_out2_start,  -- record {boolean,boolean,boolean}
              ctrlOut_end => Apply_Scaling_out2_end,  -- record {boolean,boolean,boolean}
              ctrlOut_valid => Apply_Scaling_out2_valid  -- record {boolean,boolean,boolean}
              );

  y(0) <= signed(y_0);
  y(1) <= signed(y_1);
  y(2) <= signed(y_2);

  stateControl <= '1';

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch_reg(0) <= stateControl;
        delayMatch_reg(1 TO 41) <= delayMatch_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  stateControl_1 <= delayMatch_reg(41);

  enb_gated <= stateControl_1 AND enb;

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        maxAvDataIn <= (OTHERS => to_signed(16#00000#, 20));
      ELSIF enb_gated = '1' THEN
        maxAvDataIn <= y;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  maxAvDataIn_1(0) <= maxAvDataIn(0);
  maxAvDataIn_1(1) <= maxAvDataIn(1);
  maxAvDataIn_1(2) <= maxAvDataIn(2);

  stateControl_2 <= '1';

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch1_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch1_reg(0) <= stateControl_2;
        delayMatch1_reg(1 TO 41) <= delayMatch1_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  stateControl_3 <= delayMatch1_reg(41);

  enb_gated_1 <= stateControl_3 AND enb;

  c_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        axAvCtrlIn_start <= '0';
      ELSIF enb_gated_1 = '1' THEN
        axAvCtrlIn_start <= ctrlIn_start;
      END IF;
    END IF;
  END PROCESS c_process;


  c_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        axAvCtrlIn_end <= '0';
      ELSIF enb_gated_1 = '1' THEN
        axAvCtrlIn_end <= ctrlIn_end;
      END IF;
    END IF;
  END PROCESS c_1_process;


  c_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        axAvCtrlIn_valid <= '0';
      ELSIF enb_gated_1 = '1' THEN
        axAvCtrlIn_valid <= ctrlIn_valid;
      END IF;
    END IF;
  END PROCESS c_2_process;


  dataOut(1) <= pre_rd_out_1;
  dataOut(2) <= pre_rd_out_2;

  outputgen: FOR k IN 0 TO 2 GENERATE
    dataOut_3(k) <= signed(dataOut(k));
  END GENERATE;

  stateControl_5 <= '1';

  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch2_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch2_reg(0) <= stateControl_5;
        delayMatch2_reg(1 TO 41) <= delayMatch2_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  stateControl_6 <= delayMatch2_reg(41);

  enb_gated_2 <= stateControl_6 AND enb;

  c_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        validOut_start <= '0';
      ELSIF enb_gated_2 = '1' THEN
        validOut_start <= ctrlOut_start_1;
      END IF;
    END IF;
  END PROCESS c_3_process;


  c_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        validOut_end <= '0';
      ELSIF enb_gated_2 = '1' THEN
        validOut_end <= ctrlOut_end_1;
      END IF;
    END IF;
  END PROCESS c_4_process;


  c_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        validOut_valid <= '0';
      ELSIF enb_gated_2 = '1' THEN
        validOut_valid <= ctrlOut_valid_1;
      END IF;
    END IF;
  END PROCESS c_5_process;


  dataOut_0 <= Apply_Scaling_out1_0;

  dataOut_1 <= Apply_Scaling_out1_1;

  dataOut_2 <= Apply_Scaling_out1_2;

  ctrlOut_start <= Apply_Scaling_out2_start;

  ctrlOut_end <= Apply_Scaling_out2_end;

  ctrlOut_valid <= Apply_Scaling_out2_valid;

END rtl;

