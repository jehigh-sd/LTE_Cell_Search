-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\zynqRadioHWSWLTEMIBDetectorRFSoC2x2\ltehdlPBCHDecoder\LTE_MIB_H_ip_src_ltehdlPBCHDecoder_endInNet.vhd
-- Created: 2022-05-23 17:26:45
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: LTE_MIB_H_ip_src_ltehdlPBCHDecoder_endInNet
-- Source Path: ltehdlPBCHDecoder/BCH Decoder/CRC Decoder/endInNet
-- Hierarchy Level: 6
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY LTE_MIB_H_ip_src_ltehdlPBCHDecoder_endInNet IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        endin                             :   IN    std_logic;  -- ufix1
        out_rsvd                          :   OUT   std_logic  -- ufix1
        );
END LTE_MIB_H_ip_src_ltehdlPBCHDecoder_endInNet;


ARCHITECTURE rtl OF LTE_MIB_H_ip_src_ltehdlPBCHDecoder_endInNet IS

  -- Signals
  SIGNAL endInDelayerComp_reg             : std_logic_vector(0 TO 16);  -- ufix1 [17]
  SIGNAL endInDelayerComp_reg_next        : std_logic_vector(0 TO 16);  -- ufix1 [17]

BEGIN
  -- endIn_Delayer
  endInDelayerComp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        endInDelayerComp_reg(0) <= '0';
        endInDelayerComp_reg(1) <= '0';
        endInDelayerComp_reg(2) <= '0';
        endInDelayerComp_reg(3) <= '0';
        endInDelayerComp_reg(4) <= '0';
        endInDelayerComp_reg(5) <= '0';
        endInDelayerComp_reg(6) <= '0';
        endInDelayerComp_reg(7) <= '0';
        endInDelayerComp_reg(8) <= '0';
        endInDelayerComp_reg(9) <= '0';
        endInDelayerComp_reg(10) <= '0';
        endInDelayerComp_reg(11) <= '0';
        endInDelayerComp_reg(12) <= '0';
        endInDelayerComp_reg(13) <= '0';
        endInDelayerComp_reg(14) <= '0';
        endInDelayerComp_reg(15) <= '0';
        endInDelayerComp_reg(16) <= '0';
      ELSIF enb = '1' THEN
        endInDelayerComp_reg(0) <= endInDelayerComp_reg_next(0);
        endInDelayerComp_reg(1) <= endInDelayerComp_reg_next(1);
        endInDelayerComp_reg(2) <= endInDelayerComp_reg_next(2);
        endInDelayerComp_reg(3) <= endInDelayerComp_reg_next(3);
        endInDelayerComp_reg(4) <= endInDelayerComp_reg_next(4);
        endInDelayerComp_reg(5) <= endInDelayerComp_reg_next(5);
        endInDelayerComp_reg(6) <= endInDelayerComp_reg_next(6);
        endInDelayerComp_reg(7) <= endInDelayerComp_reg_next(7);
        endInDelayerComp_reg(8) <= endInDelayerComp_reg_next(8);
        endInDelayerComp_reg(9) <= endInDelayerComp_reg_next(9);
        endInDelayerComp_reg(10) <= endInDelayerComp_reg_next(10);
        endInDelayerComp_reg(11) <= endInDelayerComp_reg_next(11);
        endInDelayerComp_reg(12) <= endInDelayerComp_reg_next(12);
        endInDelayerComp_reg(13) <= endInDelayerComp_reg_next(13);
        endInDelayerComp_reg(14) <= endInDelayerComp_reg_next(14);
        endInDelayerComp_reg(15) <= endInDelayerComp_reg_next(15);
        endInDelayerComp_reg(16) <= endInDelayerComp_reg_next(16);
      END IF;
    END IF;
  END PROCESS endInDelayerComp_process;

  endInDelayerComp_output : PROCESS (endInDelayerComp_reg, endin)
    VARIABLE y : std_logic;
    VARIABLE reg_temp : std_logic_vector(0 TO 16);
  BEGIN
    reg_temp(0) := endInDelayerComp_reg(1);
    IF (((((reg_temp(0) /= '0') OR (endInDelayerComp_reg(2) /= '0')) OR (endInDelayerComp_reg(3) /= '0')) OR (endInDelayerComp_reg(4) /= '0')) OR (endInDelayerComp_reg(5) /= '0')) OR (endInDelayerComp_reg(6) /= '0') THEN 
      y := '1';
    ELSE 
      y := '0';
    END IF;
    y := y OR endInDelayerComp_reg(7);
    y := y OR endInDelayerComp_reg(8);
    y := y OR endInDelayerComp_reg(9);
    y := y OR endInDelayerComp_reg(10);
    y := y OR endInDelayerComp_reg(11);
    y := y OR endInDelayerComp_reg(12);
    y := y OR endInDelayerComp_reg(13);
    y := y OR endInDelayerComp_reg(14);
    y := y OR endInDelayerComp_reg(15);
    y := y OR endInDelayerComp_reg(16);
    y := y OR endin;
    out_rsvd <= y OR endin;
    endInDelayerComp_reg_next(0) <= endInDelayerComp_reg(1);
    endInDelayerComp_reg_next(1) <= endInDelayerComp_reg(2);
    endInDelayerComp_reg_next(2) <= endInDelayerComp_reg(3);
    endInDelayerComp_reg_next(3) <= endInDelayerComp_reg(4);
    endInDelayerComp_reg_next(4) <= endInDelayerComp_reg(5);
    endInDelayerComp_reg_next(5) <= endInDelayerComp_reg(6);
    endInDelayerComp_reg_next(6) <= endInDelayerComp_reg(7);
    endInDelayerComp_reg_next(7) <= endInDelayerComp_reg(8);
    endInDelayerComp_reg_next(8) <= endInDelayerComp_reg(9);
    endInDelayerComp_reg_next(9) <= endInDelayerComp_reg(10);
    endInDelayerComp_reg_next(10) <= endInDelayerComp_reg(11);
    endInDelayerComp_reg_next(11) <= endInDelayerComp_reg(12);
    endInDelayerComp_reg_next(12) <= endInDelayerComp_reg(13);
    endInDelayerComp_reg_next(13) <= endInDelayerComp_reg(14);
    endInDelayerComp_reg_next(14) <= endInDelayerComp_reg(15);
    endInDelayerComp_reg_next(15) <= endInDelayerComp_reg(16);
    endInDelayerComp_reg_next(16) <= endin;
  END PROCESS endInDelayerComp_output;


END rtl;

