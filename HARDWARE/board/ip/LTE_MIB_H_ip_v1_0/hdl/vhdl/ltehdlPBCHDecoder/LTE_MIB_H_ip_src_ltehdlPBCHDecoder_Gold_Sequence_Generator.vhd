-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\zynqRadioHWSWLTEMIBDetectorRFSoC2x2\ltehdlPBCHDecoder\LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Gold_Sequence_Generator.vhd
-- Created: 2022-05-23 17:26:45
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Gold_Sequence_Generator
-- Source Path: ltehdlPBCHDecoder/Gold Sequence Generator
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
LIBRARY work_ltehdlPBCHDecoder;

ENTITY LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Gold_Sequence_Generator IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        Load                              :   IN    std_logic;
        Init                              :   IN    std_logic_vector(30 DOWNTO 0);  -- ufix31
        enable                            :   IN    std_logic;
        Out2                              :   OUT   std_logic;
        Out1                              :   OUT   std_logic
        );
END LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Gold_Sequence_Generator;


ARCHITECTURE rtl OF LTE_MIB_H_ip_src_ltehdlPBCHDecoder_Gold_Sequence_Generator IS

  -- Component Declarations
  COMPONENT LTE_MIB_H_ip_src_ltehdlPBCHDecoder_SetFF
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          D                               :   IN    std_logic;
          Q                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT LTE_MIB_H_ip_src_ltehdlPBCHDecoder_LFSR1
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          Load                            :   IN    std_logic;
          getDimension                    :   IN    std_logic_vector(30 DOWNTO 0);  -- ufix31
          Enable                          :   IN    std_logic;
          Out1                            :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT LTE_MIB_H_ip_src_ltehdlPBCHDecoder_LFSR2
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          Load                            :   IN    std_logic;
          Init                            :   IN    std_logic_vector(30 DOWNTO 0);  -- ufix31
          Enable                          :   IN    std_logic;
          Out1                            :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_SetFF
    USE ENTITY work_ltehdlPBCHDecoder.LTE_MIB_H_ip_src_ltehdlPBCHDecoder_SetFF(rtl);

  FOR ALL : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_LFSR1
    USE ENTITY work_ltehdlPBCHDecoder.LTE_MIB_H_ip_src_ltehdlPBCHDecoder_LFSR1(rtl);

  FOR ALL : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_LFSR2
    USE ENTITY work_ltehdlPBCHDecoder.LTE_MIB_H_ip_src_ltehdlPBCHDecoder_LFSR2(rtl);

  -- Signals
  SIGNAL stateControl                     : std_logic;
  SIGNAL delayMatch1_reg                  : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL enb_gated                        : std_logic;
  SIGNAL Delay5_reg                       : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay5_out1                      : std_logic;
  SIGNAL SetFF_out1                       : std_logic;
  SIGNAL Logical_Operator6_out1           : std_logic;
  SIGNAL Logical_Operator4_out1           : std_logic;
  SIGNAL stateControl_3                   : std_logic;
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL stateControl_4                   : std_logic;
  SIGNAL enb_gated_1                      : std_logic;
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Logical_Operator5_out1           : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL Logical_Operator3_out1           : std_logic;
  SIGNAL LFSR1_out1                       : std_logic;  -- ufix1
  SIGNAL Init_unsigned                    : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL stateControl_5                   : std_logic;
  SIGNAL delayMatch2_reg                  : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL stateControl_6                   : std_logic;
  SIGNAL enb_gated_2                      : std_logic;
  SIGNAL Delay4_out1                      : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL LFSR2_out1                       : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1           : std_logic;
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Delay2_ectrl                     : std_logic;
  SIGNAL stateControl_7                   : std_logic;
  SIGNAL delayMatch3_reg                  : std_logic_vector(0 TO 41);  -- ufix1 [42]
  SIGNAL stateControl_8                   : std_logic;
  SIGNAL enb_gated_3                      : std_logic;
  SIGNAL Delay3_out1                      : std_logic;

BEGIN
  u_SetFF : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_SetFF
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              D => Load,
              Q => SetFF_out1
              );

  u_LFSR1 : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_LFSR1
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              Load => Delay1_out1,
              getDimension => Init,  -- ufix31
              Enable => Logical_Operator3_out1,
              Out1 => LFSR1_out1  -- ufix1
              );

  u_LFSR2 : LTE_MIB_H_ip_src_ltehdlPBCHDecoder_LFSR2
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              Load => Delay1_out1,
              Init => std_logic_vector(Delay4_out1),  -- ufix31
              Enable => Logical_Operator3_out1,
              Out1 => LFSR2_out1  -- ufix1
              );

  stateControl <= '1';

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch1_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch1_reg(0) <= stateControl;
        delayMatch1_reg(1 TO 41) <= delayMatch1_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  stateControl_1 <= delayMatch1_reg(41);

  enb_gated <= stateControl_1 AND enb;

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_reg <= (OTHERS => '0');
      ELSIF enb_gated = '1' THEN
        Delay5_reg(0) <= enable;
        Delay5_reg(1) <= Delay5_reg(0);
      END IF;
    END IF;
  END PROCESS Delay5_process;

  Delay5_out1 <= Delay5_reg(1);

  Logical_Operator6_out1 <= Delay5_out1 AND SetFF_out1;

  Logical_Operator4_out1 <=  NOT Load;

  stateControl_3 <= '1';

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch_reg(0) <= stateControl_3;
        delayMatch_reg(1 TO 41) <= delayMatch_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  stateControl_4 <= delayMatch_reg(41);

  enb_gated_1 <= stateControl_4 AND enb;

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1 <= '0';
      ELSIF enb_gated_1 = '1' THEN
        Delay1_out1 <= Load;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Logical_Operator5_out1 <=  NOT Delay1_out1;

  Logical_Operator1_out1 <= Logical_Operator5_out1 AND (Logical_Operator6_out1 AND Logical_Operator4_out1);

  Logical_Operator3_out1 <= Logical_Operator1_out1 OR Delay1_out1;

  Init_unsigned <= unsigned(Init);

  stateControl_5 <= '1';

  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch2_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch2_reg(0) <= stateControl_5;
        delayMatch2_reg(1 TO 41) <= delayMatch2_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  stateControl_6 <= delayMatch2_reg(41);

  enb_gated_2 <= stateControl_6 AND enb;

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_out1 <= to_unsigned(16#00000000#, 31);
      ELSIF enb_gated_2 = '1' THEN
        Delay4_out1 <= Init_unsigned;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Logical_Operator2_out1 <= LFSR1_out1 XOR LFSR2_out1;

  
  Delay2_ectrl <= Delay2_out1 WHEN Logical_Operator1_out1 = '0' ELSE
      Logical_Operator2_out1;

  Delay2_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay2_out1 <= Delay2_ectrl;
      END IF;
    END IF;
  END PROCESS Delay2_lowered_process;


  stateControl_7 <= '1';

  delayMatch3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch3_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch3_reg(0) <= stateControl_7;
        delayMatch3_reg(1 TO 41) <= delayMatch3_reg(0 TO 40);
      END IF;
    END IF;
  END PROCESS delayMatch3_process;

  stateControl_8 <= delayMatch3_reg(41);

  enb_gated_3 <= stateControl_8 AND enb;

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1 <= '0';
      ELSIF enb_gated_3 = '1' THEN
        Delay3_out1 <= Logical_Operator1_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Out2 <= Delay2_out1;

  Out1 <= Delay3_out1;

END rtl;

