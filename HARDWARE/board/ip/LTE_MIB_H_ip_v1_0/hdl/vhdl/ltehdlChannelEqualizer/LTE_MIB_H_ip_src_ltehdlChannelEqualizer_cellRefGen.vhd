-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\zynqRadioHWSWLTEMIBDetectorRFSoC2x2\ltehdlChannelEqualizer\LTE_MIB_H_ip_src_ltehdlChannelEqualizer_cellRefGen.vhd
-- Created: 2022-05-23 17:26:43
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: LTE_MIB_H_ip_src_ltehdlChannelEqualizer_cellRefGen
-- Source Path: ltehdlChannelEqualizer/ cellRefGen
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
LIBRARY work_ltehdlChannelEqualizer;

ENTITY LTE_MIB_H_ip_src_ltehdlChannelEqualizer_cellRefGen IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        enb_1_2_1                         :   IN    std_logic;
        Nsubframe                         :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        ofdmSymb                          :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        NcellID                           :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
        enGold                            :   IN    std_logic;
        cellDetected                      :   IN    std_logic;
        cellRef_re                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        cellRef_im                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        outValid                          :   OUT   std_logic
        );
END LTE_MIB_H_ip_src_ltehdlChannelEqualizer_cellRefGen;


ARCHITECTURE rtl OF LTE_MIB_H_ip_src_ltehdlChannelEqualizer_cellRefGen IS

  -- Component Declarations
  COMPONENT LTE_MIB_H_ip_src_ltehdlChannelEqualizer_trigger_cinit_load
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          cellDetected                    :   IN    std_logic;
          ofdmSymb                        :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          subframe                        :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          load                            :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT LTE_MIB_H_ip_src_ltehdlChannelEqualizer_c_initGen
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          NSubframe                       :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          ofdmSymb                        :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          NcellID                         :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
          Ncp                             :   IN    std_logic;
          cinit                           :   OUT   std_logic_vector(30 DOWNTO 0)  -- ufix31
          );
  END COMPONENT;

  COMPONENT LTE_MIB_H_ip_src_ltehdlChannelEqualizer_LTE_Gold_Seq_upsampling
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          load                            :   IN    std_logic;
          cinit                           :   IN    std_logic_vector(30 DOWNTO 0);  -- ufix31
          en_GoldCode                     :   IN    std_logic;
          gold                            :   OUT   std_logic;
          valid                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT LTE_MIB_H_ip_src_ltehdlChannelEqualizer_downsampling_seq2complex
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          sequence                        :   IN    std_logic;
          valid                           :   IN    std_logic;
          complex_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          complex_im                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : LTE_MIB_H_ip_src_ltehdlChannelEqualizer_trigger_cinit_load
    USE ENTITY work_ltehdlChannelEqualizer.LTE_MIB_H_ip_src_ltehdlChannelEqualizer_trigger_cinit_load(rtl);

  FOR ALL : LTE_MIB_H_ip_src_ltehdlChannelEqualizer_c_initGen
    USE ENTITY work_ltehdlChannelEqualizer.LTE_MIB_H_ip_src_ltehdlChannelEqualizer_c_initGen(rtl);

  FOR ALL : LTE_MIB_H_ip_src_ltehdlChannelEqualizer_LTE_Gold_Seq_upsampling
    USE ENTITY work_ltehdlChannelEqualizer.LTE_MIB_H_ip_src_ltehdlChannelEqualizer_LTE_Gold_Seq_upsampling(rtl);

  FOR ALL : LTE_MIB_H_ip_src_ltehdlChannelEqualizer_downsampling_seq2complex
    USE ENTITY work_ltehdlChannelEqualizer.LTE_MIB_H_ip_src_ltehdlChannelEqualizer_downsampling_seq2complex(rtl);

  -- Signals
  SIGNAL goldLoad                         : std_logic;
  SIGNAL Constant1_out1                   : std_logic;
  SIGNAL c_initGen_out1                   : std_logic_vector(30 DOWNTO 0);  -- ufix31
  SIGNAL count_step                       : std_logic;  -- ufix1
  SIGNAL count_from                       : std_logic;  -- ufix1
  SIGNAL count_reset                      : std_logic;  -- ufix1
  SIGNAL HDL_Counter_out1                 : std_logic;  -- ufix1
  SIGNAL count                            : std_logic;  -- ufix1
  SIGNAL need_to_wrap                     : std_logic;
  SIGNAL count_value                      : std_logic;  -- ufix1
  SIGNAL count_1                          : std_logic;  -- ufix1
  SIGNAL count_2                          : std_logic;  -- ufix1
  SIGNAL NOT_out1                         : std_logic;
  SIGNAL enGoldDown                       : std_logic;
  SIGNAL LTE_Gold_Seq_upsampling_out1     : std_logic;
  SIGNAL LTE_Gold_Seq_upsampling_out2     : std_logic;
  SIGNAL downsampling_seq2complex_out1_re : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL downsampling_seq2complex_out1_im : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL downsampling_seq2complex_out2    : std_logic;
  SIGNAL downsampling_seq2complex_out1_re_signed : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL downsampling_seq2complex_out1_im_signed : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay2_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay2_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay2_ectrl_re                  : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay2_ectrl_im                  : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay1_reg                       : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Delay3_out1                      : std_logic;

BEGIN
  u_trigger_cinit_load : LTE_MIB_H_ip_src_ltehdlChannelEqualizer_trigger_cinit_load
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              cellDetected => cellDetected,
              ofdmSymb => ofdmSymb,  -- ufix4
              subframe => Nsubframe,  -- ufix4
              load => goldLoad
              );

  u_c_initGen : LTE_MIB_H_ip_src_ltehdlChannelEqualizer_c_initGen
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              NSubframe => Nsubframe,  -- ufix4
              ofdmSymb => ofdmSymb,  -- ufix4
              NcellID => NcellID,  -- ufix9
              Ncp => Constant1_out1,
              cinit => c_initGen_out1  -- ufix31
              );

  u_LTE_Gold_Seq_upsampling : LTE_MIB_H_ip_src_ltehdlChannelEqualizer_LTE_Gold_Seq_upsampling
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              load => goldLoad,
              cinit => c_initGen_out1,  -- ufix31
              en_GoldCode => enGoldDown,
              gold => LTE_Gold_Seq_upsampling_out1,
              valid => LTE_Gold_Seq_upsampling_out2
              );

  u_downsampling_seq2complex : LTE_MIB_H_ip_src_ltehdlChannelEqualizer_downsampling_seq2complex
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              enb_1_2_1 => enb_1_2_1,
              sequence => LTE_Gold_Seq_upsampling_out1,
              valid => LTE_Gold_Seq_upsampling_out2,
              complex_re => downsampling_seq2complex_out1_re,  -- sfix16_En15
              complex_im => downsampling_seq2complex_out1_im,  -- sfix16_En15
              validOut => downsampling_seq2complex_out2
              );

  Constant1_out1 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 1
  count_step <= '1';

  count_from <= '0';

  count_reset <= '0';

  count <= HDL_Counter_out1 XOR count_step;

  
  need_to_wrap <= '1' WHEN HDL_Counter_out1 = '1' ELSE
      '0';

  
  count_value <= count WHEN need_to_wrap = '0' ELSE
      count_from;

  
  count_1 <= HDL_Counter_out1 WHEN enGold = '0' ELSE
      count_value;

  
  count_2 <= count_1 WHEN goldLoad = '0' ELSE
      count_reset;

  HDL_Counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HDL_Counter_out1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        HDL_Counter_out1 <= count_2;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  NOT_out1 <=  NOT HDL_Counter_out1;

  enGoldDown <= NOT_out1 AND enGold;

  downsampling_seq2complex_out1_re_signed <= signed(downsampling_seq2complex_out1_re);

  downsampling_seq2complex_out1_im_signed <= signed(downsampling_seq2complex_out1_im);

  
  Delay2_ectrl_re <= Delay2_out1_re WHEN downsampling_seq2complex_out2 = '0' ELSE
      downsampling_seq2complex_out1_re_signed;
  
  Delay2_ectrl_im <= Delay2_out1_im WHEN downsampling_seq2complex_out2 = '0' ELSE
      downsampling_seq2complex_out1_im_signed;

  Delay2_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1_re <= to_signed(16#0000#, 16);
        Delay2_out1_im <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        Delay2_out1_re <= Delay2_ectrl_re;
        Delay2_out1_im <= Delay2_ectrl_im;
      END IF;
    END IF;
  END PROCESS Delay2_lowered_process;


  cellRef_re <= std_logic_vector(Delay2_out1_re);

  cellRef_im <= std_logic_vector(Delay2_out1_im);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        Delay1_reg(0) <= enGold;
        Delay1_reg(1 TO 2) <= Delay1_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(2);

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Delay3_out1 <= Delay1_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  outValid <= Delay3_out1;

END rtl;

