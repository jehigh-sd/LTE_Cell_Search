-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\zynqRadioHWSWLTEMIBDetectorRFSoC2x2\ltehdlChannelEqualizer\LTE_MIB_H_ip_src_ltehdlChannelEqualizer_LTE_Gold_Seq_upsampling.vhd
-- Created: 2022-05-23 17:26:43
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: LTE_MIB_H_ip_src_ltehdlChannelEqualizer_LTE_Gold_Seq_upsampling
-- Source Path: ltehdlChannelEqualizer/ cellRefGen/LTE Gold Seq upsampling
-- Hierarchy Level: 5
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
LIBRARY work_ltehdlChannelEqualizer;

ENTITY LTE_MIB_H_ip_src_ltehdlChannelEqualizer_LTE_Gold_Seq_upsampling IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        load                              :   IN    std_logic;
        cinit                             :   IN    std_logic_vector(30 DOWNTO 0);  -- ufix31
        en_GoldCode                       :   IN    std_logic;
        gold                              :   OUT   std_logic;
        valid                             :   OUT   std_logic
        );
END LTE_MIB_H_ip_src_ltehdlChannelEqualizer_LTE_Gold_Seq_upsampling;


ARCHITECTURE rtl OF LTE_MIB_H_ip_src_ltehdlChannelEqualizer_LTE_Gold_Seq_upsampling IS

  -- Component Declarations
  COMPONENT LTE_MIB_H_ip_src_ltehdlChannelEqualizer_Gold_Sequence_Generator
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          Load                            :   IN    std_logic;
          Init                            :   IN    std_logic_vector(30 DOWNTO 0);  -- ufix31
          enable                          :   IN    std_logic;
          Out2                            :   OUT   std_logic;
          Out1                            :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : LTE_MIB_H_ip_src_ltehdlChannelEqualizer_Gold_Sequence_Generator
    USE ENTITY work_ltehdlChannelEqualizer.LTE_MIB_H_ip_src_ltehdlChannelEqualizer_Gold_Sequence_Generator(rtl);

  -- Signals
  SIGNAL Repeat3_out1                     : std_logic;
  SIGNAL Repeat1_out1                     : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL Repeat1_out1_1                   : std_logic_vector(30 DOWNTO 0);  -- ufix31
  SIGNAL Repeat2_out1                     : std_logic;
  SIGNAL Gold_Sequence_Generator_out1     : std_logic;
  SIGNAL Gold_Sequence_Generator_out2     : std_logic;
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Delay_out1                       : std_logic;

BEGIN
  u_Gold_Sequence_Generator : LTE_MIB_H_ip_src_ltehdlChannelEqualizer_Gold_Sequence_Generator
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              Load => Repeat3_out1,
              Init => Repeat1_out1_1,  -- ufix31
              enable => Repeat2_out1,
              Out2 => Gold_Sequence_Generator_out1,
              Out1 => Gold_Sequence_Generator_out2
              );

  Repeat3_out1 <= load;

  Repeat1_out1 <= unsigned(cinit);

  Repeat1_out1_1 <= std_logic_vector(Repeat1_out1);

  Repeat2_out1 <= en_GoldCode;

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay1_out1 <= Gold_Sequence_Generator_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay_out1 <= Gold_Sequence_Generator_out2;
      END IF;
    END IF;
  END PROCESS Delay_process;


  gold <= Delay1_out1;

  valid <= Delay_out1;

END rtl;

