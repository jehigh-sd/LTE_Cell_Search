// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module txInterleaver_interleave_samples (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        IN_AC_TVALID,
        IN_GEN_TVALID,
        OUT_DAC_TREADY,
        ap_ce,
        IN_AC_TDATA,
        IN_AC_TREADY,
        IN_AC_TKEEP,
        IN_AC_TSTRB,
        IN_AC_TLAST,
        IN_GEN_TDATA,
        IN_GEN_TREADY,
        IN_GEN_TKEEP,
        IN_GEN_TSTRB,
        IN_GEN_TLAST,
        OUT_DAC_TDATA,
        OUT_DAC_TVALID,
        OUT_DAC_TKEEP,
        OUT_DAC_TSTRB,
        OUT_DAC_TLAST,
        IN_AC_TDATA_blk_n,
        IN_GEN_TDATA_blk_n,
        OUT_DAC_TDATA_blk_n
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   IN_AC_TVALID;
input   IN_GEN_TVALID;
input   OUT_DAC_TREADY;
input   ap_ce;
input  [255:0] IN_AC_TDATA;
output   IN_AC_TREADY;
input  [31:0] IN_AC_TKEEP;
input  [31:0] IN_AC_TSTRB;
input  [0:0] IN_AC_TLAST;
input  [255:0] IN_GEN_TDATA;
output   IN_GEN_TREADY;
input  [31:0] IN_GEN_TKEEP;
input  [31:0] IN_GEN_TSTRB;
input  [0:0] IN_GEN_TLAST;
output  [255:0] OUT_DAC_TDATA;
output   OUT_DAC_TVALID;
output  [31:0] OUT_DAC_TKEEP;
output  [31:0] OUT_DAC_TSTRB;
output  [0:0] OUT_DAC_TLAST;
output   IN_AC_TDATA_blk_n;
output   IN_GEN_TDATA_blk_n;
output   OUT_DAC_TDATA_blk_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg IN_AC_TREADY;
reg IN_GEN_TREADY;
reg OUT_DAC_TVALID;
reg IN_AC_TDATA_blk_n;
reg IN_GEN_TDATA_blk_n;
reg OUT_DAC_TDATA_blk_n;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        IN_AC_TDATA_blk_n = IN_AC_TVALID;
    end else begin
        IN_AC_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        IN_AC_TREADY = 1'b1;
    end else begin
        IN_AC_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        IN_GEN_TDATA_blk_n = IN_GEN_TVALID;
    end else begin
        IN_GEN_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        IN_GEN_TREADY = 1'b1;
    end else begin
        IN_GEN_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        OUT_DAC_TDATA_blk_n = OUT_DAC_TREADY;
    end else begin
        OUT_DAC_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        OUT_DAC_TVALID = 1'b1;
    end else begin
        OUT_DAC_TVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OUT_DAC_TDATA = IN_GEN_TDATA;

assign OUT_DAC_TKEEP = IN_AC_TKEEP;

assign OUT_DAC_TLAST = IN_AC_TLAST;

assign OUT_DAC_TSTRB = IN_AC_TSTRB;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_start == 1'b1) & ((1'b0 == OUT_DAC_TREADY) | (1'b0 == IN_GEN_TVALID) | (1'b0 == IN_AC_TVALID)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b1) & ((1'b0 == OUT_DAC_TREADY) | (1'b0 == IN_GEN_TVALID) | (1'b0 == IN_AC_TVALID)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((ap_start == 1'b1) & ((1'b0 == OUT_DAC_TREADY) | (1'b0 == IN_GEN_TVALID) | (1'b0 == IN_AC_TVALID))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((1'b0 == OUT_DAC_TREADY) | (1'b0 == IN_GEN_TVALID) | (1'b0 == IN_AC_TVALID));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

endmodule //txInterleaver_interleave_samples
