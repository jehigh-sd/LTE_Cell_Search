-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lteCellSearch_compute_threshold is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    IN_real_V_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    IN_real_V_ce0 : OUT STD_LOGIC;
    IN_real_V_q0 : IN STD_LOGIC_VECTOR (22 downto 0);
    trunc_ln236_dout : IN STD_LOGIC_VECTOR (16 downto 0);
    trunc_ln236_empty_n : IN STD_LOGIC;
    trunc_ln236_read : OUT STD_LOGIC;
    IN_imag_V_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    IN_imag_V_ce0 : OUT STD_LOGIC;
    IN_imag_V_q0 : IN STD_LOGIC_VECTOR (22 downto 0);
    trunc_ln236_out_din : OUT STD_LOGIC_VECTOR (16 downto 0);
    trunc_ln236_out_full_n : IN STD_LOGIC;
    trunc_ln236_out_write : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of lteCellSearch_compute_threshold is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv43_7A858 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000001111010100001011000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_28F5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010100011110101";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sum_mag_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal mag_buff_V_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mag_buff_V_0_ce0 : STD_LOGIC;
    signal mag_buff_V_0_we0 : STD_LOGIC;
    signal mag_buff_V_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mag_buff_V_0_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mag_buff_V_0_ce1 : STD_LOGIC;
    signal mag_buff_V_0_we1 : STD_LOGIC;
    signal mag_buff_V_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mag_buff_V_1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mag_buff_V_1_ce0 : STD_LOGIC;
    signal mag_buff_V_1_we0 : STD_LOGIC;
    signal mag_buff_V_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mag_buff_V_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mag_buff_V_1_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mag_buff_V_1_ce1 : STD_LOGIC;
    signal mag_buff_V_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln236_blk_n : STD_LOGIC;
    signal trunc_ln236_out_blk_n : STD_LOGIC;
    signal i_V_5_reg_231 : STD_LOGIC_VECTOR (6 downto 0);
    signal run_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal run_reg_480 : STD_LOGIC_VECTOR (0 downto 0);
    signal IN_real_V_load_reg_484 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal IN_imag_V_load_reg_489 : STD_LOGIC_VECTOR (22 downto 0);
    signal i_V_2_fu_258_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln5_reg_508 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sext_ln1115_fu_344_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal sext_ln1115_reg_513 : STD_LOGIC_VECTOR (46 downto 0);
    signal mag_buff_V_1_load_reg_518 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln886_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_reg_523 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state6_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal ret_fu_354_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ret_reg_527 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal trunc_ln1347_fu_360_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln1347_reg_532 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_77_reg_547 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_78_reg_552 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state6 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal i_V_reg_208 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln878_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_mag_V_loc_0_i_i_reg_219 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_phi_mux_i_V_5_phi_fu_235_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal zext_ln228_fu_242_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_fu_274_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_fu_370_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_1_fu_401_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln703_fu_444_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal icmp_ln44_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln58_fu_392_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln708_fu_434_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln44_fu_270_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_280_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_V_fu_299_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal r_V_fu_299_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal r_V_9_fu_318_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal r_V_9_fu_318_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal trunc_ln708_s_fu_324_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_10_fu_338_p0 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln1118_2_fu_334_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal r_V_10_fu_338_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_10_fu_338_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal add_ln58_fu_364_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln1118_fu_409_p0 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln1118_3_fu_406_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal mul_ln1118_fu_409_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln1118_fu_409_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal sext_ln1192_fu_415_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal add_ln1192_fu_419_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal trunc_ln708_1_fu_424_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal sub_ln703_fu_439_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1495_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component lteCellSearch_mul_23s_20ns_43_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (22 downto 0);
        din1 : IN STD_LOGIC_VECTOR (19 downto 0);
        dout : OUT STD_LOGIC_VECTOR (42 downto 0) );
    end component;


    component lteCellSearch_mul_23s_23s_46_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (22 downto 0);
        din1 : IN STD_LOGIC_VECTOR (22 downto 0);
        dout : OUT STD_LOGIC_VECTOR (45 downto 0) );
    end component;


    component lteCellSearch_compute_threshold_mag_buff_V_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lteCellSearch_compute_threshold_mag_buff_V_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mag_buff_V_0_U : component lteCellSearch_compute_threshold_mag_buff_V_0
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mag_buff_V_0_address0,
        ce0 => mag_buff_V_0_ce0,
        we0 => mag_buff_V_0_we0,
        d0 => mag_buff_V_0_d0,
        address1 => mag_buff_V_0_address1,
        ce1 => mag_buff_V_0_ce1,
        we1 => mag_buff_V_0_we1,
        d1 => sext_ln708_fu_434_p1,
        q1 => mag_buff_V_0_q1);

    mag_buff_V_1_U : component lteCellSearch_compute_threshold_mag_buff_V_1
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mag_buff_V_1_address0,
        ce0 => mag_buff_V_1_ce0,
        we0 => mag_buff_V_1_we0,
        d0 => mag_buff_V_1_d0,
        q0 => mag_buff_V_1_q0,
        address1 => mag_buff_V_1_address1,
        ce1 => mag_buff_V_1_ce1,
        q1 => mag_buff_V_1_q1);

    mul_23s_20ns_43_1_1_U4 : component lteCellSearch_mul_23s_20ns_43_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 23,
        din1_WIDTH => 20,
        dout_WIDTH => 43)
    port map (
        din0 => IN_real_V_load_reg_484,
        din1 => r_V_fu_299_p1,
        dout => r_V_fu_299_p2);

    mul_23s_20ns_43_1_1_U5 : component lteCellSearch_mul_23s_20ns_43_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 23,
        din1_WIDTH => 20,
        dout_WIDTH => 43)
    port map (
        din0 => IN_imag_V_load_reg_489,
        din1 => r_V_9_fu_318_p1,
        dout => r_V_9_fu_318_p2);

    mul_23s_23s_46_1_1_U6 : component lteCellSearch_mul_23s_23s_46_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 23,
        din1_WIDTH => 23,
        dout_WIDTH => 46)
    port map (
        din0 => r_V_10_fu_338_p0,
        din1 => r_V_10_fu_338_p1,
        dout => r_V_10_fu_338_p2);

    mul_23s_23s_46_1_1_U7 : component lteCellSearch_mul_23s_23s_46_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 23,
        din1_WIDTH => 23,
        dout_WIDTH => 46)
    port map (
        din0 => mul_ln1118_fu_409_p0,
        din1 => mul_ln1118_fu_409_p1,
        dout => mul_ln1118_fu_409_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state6);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_V_5_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln886_reg_523 = ap_const_lv1_0))) then 
                i_V_5_reg_231 <= ret_reg_527;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_V_5_reg_231 <= ap_const_lv7_7F;
            end if; 
        end if;
    end process;

    i_V_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((run_reg_480 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_V_reg_208 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln878_fu_264_p2 = ap_const_lv1_0))) then 
                i_V_reg_208 <= i_V_2_fu_258_p2;
            end if; 
        end if;
    end process;

    sum_mag_V_loc_0_i_i_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((run_reg_480 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                sum_mag_V_loc_0_i_i_reg_219 <= ap_const_lv32_0;
            elsif (((run_reg_480 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                sum_mag_V_loc_0_i_i_reg_219 <= sum_mag_V;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                IN_imag_V_load_reg_489 <= IN_imag_V_q0;
                IN_real_V_load_reg_484 <= IN_real_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln886_reg_523 <= icmp_ln886_fu_348_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                mag_buff_V_1_load_reg_518 <= mag_buff_V_1_q0;
                sext_ln1115_reg_513 <= sext_ln1115_fu_344_p1;
                trunc_ln5_reg_508 <= r_V_fu_299_p2(42 downto 20);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln886_fu_348_p2 = ap_const_lv1_0))) then
                ret_reg_527 <= ret_fu_354_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                run_reg_480 <= run_fu_248_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                sum_mag_V <= add_ln703_fu_444_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln886_fu_348_p2 = ap_const_lv1_0))) then
                tmp_77_reg_547 <= ret_fu_354_p2(6 downto 6);
                tmp_78_reg_552 <= ap_phi_mux_i_V_5_phi_fu_235_p4(6 downto 6);
                trunc_ln1347_reg_532 <= trunc_ln1347_fu_360_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, trunc_ln236_empty_n, trunc_ln236_out_full_n, run_reg_480, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln886_fu_348_p2, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_subdone, icmp_ln878_fu_264_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((trunc_ln236_out_full_n = ap_const_logic_0) or (trunc_ln236_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((run_reg_480 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln878_fu_264_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln886_fu_348_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln886_fu_348_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    IN_imag_V_address0 <= zext_ln228_fu_242_p1(17 - 1 downto 0);

    IN_imag_V_ce0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, trunc_ln236_empty_n, trunc_ln236_out_full_n)
    begin
        if ((not(((trunc_ln236_out_full_n = ap_const_logic_0) or (trunc_ln236_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            IN_imag_V_ce0 <= ap_const_logic_1;
        else 
            IN_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    IN_real_V_address0 <= zext_ln228_fu_242_p1(17 - 1 downto 0);

    IN_real_V_ce0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, trunc_ln236_empty_n, trunc_ln236_out_full_n)
    begin
        if ((not(((trunc_ln236_out_full_n = ap_const_logic_0) or (trunc_ln236_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            IN_real_V_ce0 <= ap_const_logic_1;
        else 
            IN_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1192_fu_419_p2 <= std_logic_vector(signed(sext_ln1115_reg_513) + signed(sext_ln1192_fu_415_p1));
    add_ln58_fu_364_p2 <= std_logic_vector(unsigned(trunc_ln1347_fu_360_p1) + unsigned(ap_const_lv6_3F));
    add_ln703_fu_444_p2 <= std_logic_vector(unsigned(sum_mag_V_loc_0_i_i_reg_219) + unsigned(sub_ln703_fu_439_p2));
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, trunc_ln236_empty_n, trunc_ln236_out_full_n)
    begin
                ap_block_state1 <= ((trunc_ln236_out_full_n = ap_const_logic_0) or (trunc_ln236_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state6_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state6_assign_proc : process(icmp_ln886_fu_348_p2)
    begin
        if ((icmp_ln886_fu_348_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_V_5_phi_fu_235_p4_assign_proc : process(i_V_5_reg_231, icmp_ln886_reg_523, ap_CS_fsm_pp1_stage0, ret_reg_527, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln886_reg_523 = ap_const_lv1_0))) then 
            ap_phi_mux_i_V_5_phi_fu_235_p4 <= ret_reg_527;
        else 
            ap_phi_mux_i_V_5_phi_fu_235_p4 <= i_V_5_reg_231;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        add_ln703_fu_444_p2 when (icmp_ln1495_fu_450_p2(0) = '1') else 
        ap_const_lv32_28F5;
    i_V_2_fu_258_p2 <= std_logic_vector(unsigned(i_V_reg_208) + unsigned(ap_const_lv8_1));
    icmp_ln1495_fu_450_p2 <= "1" when (signed(add_ln703_fu_444_p2) < signed(ap_const_lv32_28F5)) else "0";
    icmp_ln44_fu_290_p2 <= "1" when (tmp_fu_280_p4 = ap_const_lv2_0) else "0";
    icmp_ln878_fu_264_p2 <= "1" when (i_V_reg_208 = ap_const_lv8_80) else "0";
    icmp_ln886_fu_348_p2 <= "1" when (ap_phi_mux_i_V_5_phi_fu_235_p4 = ap_const_lv7_0) else "0";

    mag_buff_V_0_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, zext_ln44_fu_274_p1, zext_ln58_1_fu_401_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            mag_buff_V_0_address0 <= zext_ln58_1_fu_401_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mag_buff_V_0_address0 <= zext_ln44_fu_274_p1(6 - 1 downto 0);
        else 
            mag_buff_V_0_address0 <= "XXXXXX";
        end if; 
    end process;


    mag_buff_V_0_address1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0, zext_ln58_fu_370_p1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            mag_buff_V_0_address1 <= ap_const_lv6_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            mag_buff_V_0_address1 <= zext_ln58_fu_370_p1(6 - 1 downto 0);
        else 
            mag_buff_V_0_address1 <= "XXXXXX";
        end if; 
    end process;


    mag_buff_V_0_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            mag_buff_V_0_ce0 <= ap_const_logic_1;
        else 
            mag_buff_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mag_buff_V_0_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            mag_buff_V_0_ce1 <= ap_const_logic_1;
        else 
            mag_buff_V_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    mag_buff_V_0_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, select_ln58_fu_392_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            mag_buff_V_0_d0 <= select_ln58_fu_392_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mag_buff_V_0_d0 <= ap_const_lv32_0;
        else 
            mag_buff_V_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mag_buff_V_0_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, tmp_78_reg_552, ap_enable_reg_pp1_iter1, icmp_ln878_fu_264_p2, icmp_ln44_fu_290_p2)
    begin
        if ((((icmp_ln44_fu_290_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln878_fu_264_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (tmp_78_reg_552 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            mag_buff_V_0_we0 <= ap_const_logic_1;
        else 
            mag_buff_V_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mag_buff_V_0_we1_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            mag_buff_V_0_we1 <= ap_const_logic_1;
        else 
            mag_buff_V_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    mag_buff_V_1_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state4, ap_block_pp1_stage0, zext_ln44_fu_274_p1, zext_ln58_1_fu_401_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            mag_buff_V_1_address0 <= zext_ln58_1_fu_401_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            mag_buff_V_1_address0 <= ap_const_lv6_3F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mag_buff_V_1_address0 <= zext_ln44_fu_274_p1(6 - 1 downto 0);
        else 
            mag_buff_V_1_address0 <= "XXXXXX";
        end if; 
    end process;

    mag_buff_V_1_address1 <= zext_ln58_fu_370_p1(6 - 1 downto 0);

    mag_buff_V_1_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            mag_buff_V_1_ce0 <= ap_const_logic_1;
        else 
            mag_buff_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mag_buff_V_1_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            mag_buff_V_1_ce1 <= ap_const_logic_1;
        else 
            mag_buff_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    mag_buff_V_1_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, select_ln58_fu_392_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            mag_buff_V_1_d0 <= select_ln58_fu_392_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mag_buff_V_1_d0 <= ap_const_lv32_0;
        else 
            mag_buff_V_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mag_buff_V_1_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, tmp_78_reg_552, ap_enable_reg_pp1_iter1, icmp_ln878_fu_264_p2, icmp_ln44_fu_290_p2)
    begin
        if ((((icmp_ln44_fu_290_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln878_fu_264_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (tmp_78_reg_552 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            mag_buff_V_1_we0 <= ap_const_logic_1;
        else 
            mag_buff_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1118_fu_409_p0 <= sext_ln1118_3_fu_406_p1(23 - 1 downto 0);
    mul_ln1118_fu_409_p1 <= sext_ln1118_3_fu_406_p1(23 - 1 downto 0);
    r_V_10_fu_338_p0 <= sext_ln1118_2_fu_334_p1(23 - 1 downto 0);
    r_V_10_fu_338_p1 <= sext_ln1118_2_fu_334_p1(23 - 1 downto 0);
    r_V_9_fu_318_p1 <= ap_const_lv43_7A858(20 - 1 downto 0);
    r_V_fu_299_p1 <= ap_const_lv43_7A858(20 - 1 downto 0);
    ret_fu_354_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_V_5_phi_fu_235_p4) + unsigned(ap_const_lv7_7F));
    run_fu_248_p2 <= "1" when (trunc_ln236_dout = ap_const_lv17_0) else "0";
    select_ln58_fu_392_p3 <= 
        mag_buff_V_1_q1 when (tmp_77_reg_547(0) = '1') else 
        mag_buff_V_0_q1;
        sext_ln1115_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_10_fu_338_p2),47));

        sext_ln1118_2_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_s_fu_324_p4),46));

        sext_ln1118_3_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln5_reg_508),46));

        sext_ln1192_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_fu_409_p2),47));

        sext_ln708_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_1_fu_424_p4),32));

    sub_ln703_fu_439_p2 <= std_logic_vector(unsigned(sext_ln708_fu_434_p1) - unsigned(mag_buff_V_1_load_reg_518));
    tmp_fu_280_p4 <= i_V_reg_208(7 downto 6);
    trunc_ln1347_fu_360_p1 <= ap_phi_mux_i_V_5_phi_fu_235_p4(6 - 1 downto 0);

    trunc_ln236_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, trunc_ln236_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            trunc_ln236_blk_n <= trunc_ln236_empty_n;
        else 
            trunc_ln236_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    trunc_ln236_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, trunc_ln236_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            trunc_ln236_out_blk_n <= trunc_ln236_out_full_n;
        else 
            trunc_ln236_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    trunc_ln236_out_din <= trunc_ln236_dout;

    trunc_ln236_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, trunc_ln236_empty_n, trunc_ln236_out_full_n)
    begin
        if ((not(((trunc_ln236_out_full_n = ap_const_logic_0) or (trunc_ln236_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            trunc_ln236_out_write <= ap_const_logic_1;
        else 
            trunc_ln236_out_write <= ap_const_logic_0;
        end if; 
    end process;


    trunc_ln236_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, trunc_ln236_empty_n, trunc_ln236_out_full_n)
    begin
        if ((not(((trunc_ln236_out_full_n = ap_const_logic_0) or (trunc_ln236_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            trunc_ln236_read <= ap_const_logic_1;
        else 
            trunc_ln236_read <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln44_fu_270_p1 <= i_V_reg_208(6 - 1 downto 0);
    trunc_ln708_1_fu_424_p4 <= add_ln1192_fu_419_p2(46 downto 20);
    trunc_ln708_s_fu_324_p4 <= r_V_9_fu_318_p2(42 downto 20);
    zext_ln228_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln236_dout),64));
    zext_ln44_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln44_fu_270_p1),64));
    zext_ln58_1_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1347_reg_532),64));
    zext_ln58_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln58_fu_364_p2),64));
end behav;
