-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lteCellSearch_compute_pss is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    IN_real_V_address1 : OUT STD_LOGIC_VECTOR (16 downto 0);
    IN_real_V_ce1 : OUT STD_LOGIC;
    IN_real_V_q1 : IN STD_LOGIC_VECTOR (22 downto 0);
    trunc_ln236_dout : IN STD_LOGIC_VECTOR (16 downto 0);
    trunc_ln236_empty_n : IN STD_LOGIC;
    trunc_ln236_read : OUT STD_LOGIC;
    IN_imag_V_address1 : OUT STD_LOGIC_VECTOR (16 downto 0);
    IN_imag_V_ce1 : OUT STD_LOGIC;
    IN_imag_V_q1 : IN STD_LOGIC_VECTOR (22 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (19 downto 0) );
end;


architecture behav of lteCellSearch_compute_pss is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv48_3E800000 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000111110100000000000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv44_1062 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000001000001100010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal IN_R_buff_V_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal IN_R_buff_V_0_ce0 : STD_LOGIC;
    signal IN_R_buff_V_0_we0 : STD_LOGIC;
    signal IN_R_buff_V_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal IN_R_buff_V_0_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal IN_R_buff_V_0_ce1 : STD_LOGIC;
    signal IN_R_buff_V_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal IN_R_buff_V_1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal IN_R_buff_V_1_ce0 : STD_LOGIC;
    signal IN_R_buff_V_1_we0 : STD_LOGIC;
    signal IN_R_buff_V_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal IN_R_buff_V_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal IN_R_buff_V_1_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal IN_R_buff_V_1_ce1 : STD_LOGIC;
    signal IN_R_buff_V_1_we1 : STD_LOGIC;
    signal IN_R_buff_V_1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal IN_R_buff_V_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal IN_I_buff_V_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal IN_I_buff_V_0_ce0 : STD_LOGIC;
    signal IN_I_buff_V_0_we0 : STD_LOGIC;
    signal IN_I_buff_V_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal IN_I_buff_V_0_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal IN_I_buff_V_0_ce1 : STD_LOGIC;
    signal IN_I_buff_V_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal IN_I_buff_V_1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal IN_I_buff_V_1_ce0 : STD_LOGIC;
    signal IN_I_buff_V_1_we0 : STD_LOGIC;
    signal IN_I_buff_V_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal IN_I_buff_V_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal IN_I_buff_V_1_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal IN_I_buff_V_1_ce1 : STD_LOGIC;
    signal IN_I_buff_V_1_we1 : STD_LOGIC;
    signal IN_I_buff_V_1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal IN_I_buff_V_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal td_pss_real_V_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal td_pss_real_V_0_ce0 : STD_LOGIC;
    signal td_pss_real_V_0_q0 : STD_LOGIC_VECTOR (22 downto 0);
    signal td_pss_imag_V_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal td_pss_imag_V_0_ce0 : STD_LOGIC;
    signal td_pss_imag_V_0_q0 : STD_LOGIC_VECTOR (21 downto 0);
    signal td_pss_real_V_1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal td_pss_real_V_1_ce0 : STD_LOGIC;
    signal td_pss_real_V_1_q0 : STD_LOGIC_VECTOR (21 downto 0);
    signal td_pss_imag_V_1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal td_pss_imag_V_1_ce0 : STD_LOGIC;
    signal td_pss_imag_V_1_q0 : STD_LOGIC_VECTOR (21 downto 0);
    signal td_pss_real_V_2_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal td_pss_real_V_2_ce0 : STD_LOGIC;
    signal td_pss_real_V_2_q0 : STD_LOGIC_VECTOR (21 downto 0);
    signal td_pss_imag_V_2_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal td_pss_imag_V_2_ce0 : STD_LOGIC;
    signal td_pss_imag_V_2_q0 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln236_blk_n : STD_LOGIC;
    signal i_V_11_reg_441 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_V_8_reg_452 : STD_LOGIC_VECTOR (7 downto 0);
    signal acc_i_2_V_2_reg_463 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_r_2_V_2_reg_475 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_i_1_V_2_reg_487 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_r_1_V_2_reg_499 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_i_0_V_2_reg_511 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_r_0_V_2_reg_523 : STD_LOGIC_VECTOR (31 downto 0);
    signal run_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal run_reg_1501 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_reg_1505 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal r_V_12_reg_1510 : STD_LOGIC_VECTOR (22 downto 0);
    signal i_V_7_fu_562_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ret_fu_602_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ret_reg_1526 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln878_2_fu_608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_2_reg_1532 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1346_fu_614_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln1346_reg_1536 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_80_reg_1551 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_V_9_fu_714_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state8_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln878_3_fu_720_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_3_reg_1570 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1116_fu_758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1116_reg_1584 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal x_V_reg_1660 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal x_V_1_reg_1665 : STD_LOGIC_VECTOR (39 downto 0);
    signal x_V_2_reg_1670 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_sqrt_fixed_40_18_s_fu_535_ap_return : STD_LOGIC_VECTOR (30 downto 0);
    signal r_V_18_reg_1675 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_sqrt_fixed_40_18_s_fu_540_ap_return : STD_LOGIC_VECTOR (30 downto 0);
    signal r_V_24_reg_1680 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_sqrt_fixed_40_18_s_fu_545_ap_return : STD_LOGIC_VECTOR (30 downto 0);
    signal r_V_30_reg_1685 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state8 : STD_LOGIC;
    signal i_V_reg_430 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln878_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_i_V_11_phi_fu_445_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal zext_ln228_fu_550_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln92_fu_578_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln100_fu_624_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln100_1_fu_657_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1116_fu_740_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln534_fu_726_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal icmp_ln92_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln100_fu_647_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln100_1_fu_664_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln92_fu_574_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_586_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln100_fu_618_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_79_fu_640_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_11_fu_677_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal r_V_11_fu_677_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_13_fu_697_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal r_V_13_fu_697_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln1116_fu_736_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_81_fu_748_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_V_44_fu_764_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_33_fu_783_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal r_V_45_fu_799_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_35_fu_814_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1115_10_fu_806_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal r_V_35_fu_814_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal trunc_ln708_2_fu_789_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln708_3_fu_820_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln703_1_fu_834_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln1192_6_fu_838_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal ret_V_24_fu_842_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal lhs_2_fu_848_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln1192_fu_856_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal ret_V_6_fu_860_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln703_3_fu_880_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln703_2_fu_876_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln1193_fu_890_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal ret_V_8_fu_894_p0 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln1193_fu_890_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal ret_V_25_fu_884_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_8_fu_894_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_37_fu_908_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln1115_11_fu_900_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal r_V_37_fu_908_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal trunc_ln708_4_fu_914_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln1193_5_fu_924_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln703_fu_830_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_26_fu_928_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1192_7_fu_934_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_27_fu_938_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_4_fu_944_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln1192_1_fu_952_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal ret_V_11_fu_956_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal r_V_38_fu_976_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1115_8_fu_771_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal r_V_38_fu_976_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal r_V_39_fu_996_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_39_fu_996_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal trunc_ln708_5_fu_982_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln708_6_fu_1002_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln1192_8_fu_1020_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln703_5_fu_1016_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal ret_V_28_fu_1024_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal lhs_V_6_fu_1030_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln1192_2_fu_1038_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal ret_V_13_fu_1042_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln1193_1_fu_1058_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1193_2_fu_1062_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1193_1_fu_1058_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln1193_2_fu_1062_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal ret_V_14_fu_1066_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_40_fu_1076_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_40_fu_1076_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal trunc_ln708_7_fu_1082_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln1193_6_fu_1092_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln703_4_fu_1012_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_29_fu_1096_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1192_9_fu_1102_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_30_fu_1106_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_10_fu_1112_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln1192_3_fu_1120_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal ret_V_17_fu_1124_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal r_V_41_fu_1144_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_41_fu_1144_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal r_V_42_fu_1164_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_42_fu_1164_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal trunc_ln708_8_fu_1150_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln708_9_fu_1170_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln1192_10_fu_1188_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln703_7_fu_1184_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal ret_V_31_fu_1192_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal lhs_V_12_fu_1198_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln1192_4_fu_1206_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal ret_V_19_fu_1210_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln1193_3_fu_1226_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1193_4_fu_1230_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1193_3_fu_1226_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln1193_4_fu_1230_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal ret_V_20_fu_1234_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_43_fu_1244_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_43_fu_1244_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal trunc_ln708_1_fu_1250_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln1193_7_fu_1260_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln703_6_fu_1180_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_32_fu_1264_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1192_11_fu_1270_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_33_fu_1274_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_16_fu_1280_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln1192_5_fu_1288_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal ret_V_23_fu_1292_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal r_V_15_fu_1312_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1115_2_fu_1308_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal r_V_15_fu_1312_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_17_fu_1322_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1115_3_fu_1318_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal r_V_17_fu_1322_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_17_fu_1322_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal r_V_15_fu_1312_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal ret_V_fu_1328_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal r_V_21_fu_1348_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1115_4_fu_1344_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal r_V_21_fu_1348_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_23_fu_1358_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1115_5_fu_1354_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal r_V_23_fu_1358_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_23_fu_1358_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal r_V_21_fu_1348_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal ret_V_3_fu_1364_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal r_V_27_fu_1384_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1115_6_fu_1380_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal r_V_27_fu_1384_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_29_fu_1394_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1115_7_fu_1390_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal r_V_29_fu_1394_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_29_fu_1394_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal r_V_27_fu_1384_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal ret_V_4_fu_1400_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal r_V_19_fu_1419_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal r_V_19_fu_1419_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_19_fu_1419_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal r_V_25_fu_1438_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal r_V_25_fu_1438_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_25_fu_1438_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal r_V_31_fu_1457_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal r_V_31_fu_1457_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_31_fu_1457_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal r_V_19_fu_1419_p00 : STD_LOGIC_VECTOR (43 downto 0);
    signal r_V_25_fu_1438_p00 : STD_LOGIC_VECTOR (43 downto 0);
    signal r_V_31_fu_1457_p00 : STD_LOGIC_VECTOR (43 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component lteCellSearch_sqrt_fixed_40_18_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (39 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component lteCellSearch_mul_23s_31ns_48_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (22 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component lteCellSearch_mul_32s_23s_54_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (22 downto 0);
        dout : OUT STD_LOGIC_VECTOR (53 downto 0) );
    end component;


    component lteCellSearch_mul_32s_22s_53_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (52 downto 0) );
    end component;


    component lteCellSearch_mul_33s_23s_55_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (22 downto 0);
        dout : OUT STD_LOGIC_VECTOR (54 downto 0) );
    end component;


    component lteCellSearch_mul_32s_32s_50_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (49 downto 0) );
    end component;


    component lteCellSearch_mul_31ns_14ns_44_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (43 downto 0) );
    end component;


    component lteCellSearch_compute_pss_IN_R_buff_V_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lteCellSearch_compute_pss_IN_R_buff_V_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lteCellSearch_compute_pss_td_pss_real_V_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component lteCellSearch_compute_pss_td_pss_imag_V_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component lteCellSearch_compute_pss_td_pss_real_V_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component lteCellSearch_compute_pss_td_pss_imag_V_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component lteCellSearch_compute_pss_td_pss_imag_V_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;



begin
    IN_R_buff_V_0_U : component lteCellSearch_compute_pss_IN_R_buff_V_0
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => IN_R_buff_V_0_address0,
        ce0 => IN_R_buff_V_0_ce0,
        we0 => IN_R_buff_V_0_we0,
        d0 => IN_R_buff_V_0_d0,
        address1 => IN_R_buff_V_0_address1,
        ce1 => IN_R_buff_V_0_ce1,
        q1 => IN_R_buff_V_0_q1);

    IN_R_buff_V_1_U : component lteCellSearch_compute_pss_IN_R_buff_V_1
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => IN_R_buff_V_1_address0,
        ce0 => IN_R_buff_V_1_ce0,
        we0 => IN_R_buff_V_1_we0,
        d0 => IN_R_buff_V_1_d0,
        q0 => IN_R_buff_V_1_q0,
        address1 => IN_R_buff_V_1_address1,
        ce1 => IN_R_buff_V_1_ce1,
        we1 => IN_R_buff_V_1_we1,
        d1 => IN_R_buff_V_1_d1,
        q1 => IN_R_buff_V_1_q1);

    IN_I_buff_V_0_U : component lteCellSearch_compute_pss_IN_R_buff_V_0
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => IN_I_buff_V_0_address0,
        ce0 => IN_I_buff_V_0_ce0,
        we0 => IN_I_buff_V_0_we0,
        d0 => IN_I_buff_V_0_d0,
        address1 => IN_I_buff_V_0_address1,
        ce1 => IN_I_buff_V_0_ce1,
        q1 => IN_I_buff_V_0_q1);

    IN_I_buff_V_1_U : component lteCellSearch_compute_pss_IN_R_buff_V_1
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => IN_I_buff_V_1_address0,
        ce0 => IN_I_buff_V_1_ce0,
        we0 => IN_I_buff_V_1_we0,
        d0 => IN_I_buff_V_1_d0,
        q0 => IN_I_buff_V_1_q0,
        address1 => IN_I_buff_V_1_address1,
        ce1 => IN_I_buff_V_1_ce1,
        we1 => IN_I_buff_V_1_we1,
        d1 => IN_I_buff_V_1_d1,
        q1 => IN_I_buff_V_1_q1);

    td_pss_real_V_0_U : component lteCellSearch_compute_pss_td_pss_real_V_0
    generic map (
        DataWidth => 23,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => td_pss_real_V_0_address0,
        ce0 => td_pss_real_V_0_ce0,
        q0 => td_pss_real_V_0_q0);

    td_pss_imag_V_0_U : component lteCellSearch_compute_pss_td_pss_imag_V_0
    generic map (
        DataWidth => 22,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => td_pss_imag_V_0_address0,
        ce0 => td_pss_imag_V_0_ce0,
        q0 => td_pss_imag_V_0_q0);

    td_pss_real_V_1_U : component lteCellSearch_compute_pss_td_pss_real_V_1
    generic map (
        DataWidth => 22,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => td_pss_real_V_1_address0,
        ce0 => td_pss_real_V_1_ce0,
        q0 => td_pss_real_V_1_q0);

    td_pss_imag_V_1_U : component lteCellSearch_compute_pss_td_pss_imag_V_1
    generic map (
        DataWidth => 22,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => td_pss_imag_V_1_address0,
        ce0 => td_pss_imag_V_1_ce0,
        q0 => td_pss_imag_V_1_q0);

    td_pss_real_V_2_U : component lteCellSearch_compute_pss_td_pss_real_V_1
    generic map (
        DataWidth => 22,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => td_pss_real_V_2_address0,
        ce0 => td_pss_real_V_2_ce0,
        q0 => td_pss_real_V_2_q0);

    td_pss_imag_V_2_U : component lteCellSearch_compute_pss_td_pss_imag_V_2
    generic map (
        DataWidth => 22,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => td_pss_imag_V_2_address0,
        ce0 => td_pss_imag_V_2_ce0,
        q0 => td_pss_imag_V_2_q0);

    grp_sqrt_fixed_40_18_s_fu_535 : component lteCellSearch_sqrt_fixed_40_18_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        x => x_V_reg_1660,
        ap_return => grp_sqrt_fixed_40_18_s_fu_535_ap_return);

    grp_sqrt_fixed_40_18_s_fu_540 : component lteCellSearch_sqrt_fixed_40_18_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        x => x_V_1_reg_1665,
        ap_return => grp_sqrt_fixed_40_18_s_fu_540_ap_return);

    grp_sqrt_fixed_40_18_s_fu_545 : component lteCellSearch_sqrt_fixed_40_18_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        x => x_V_2_reg_1670,
        ap_return => grp_sqrt_fixed_40_18_s_fu_545_ap_return);

    mul_23s_31ns_48_1_1_U17 : component lteCellSearch_mul_23s_31ns_48_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 23,
        din1_WIDTH => 31,
        dout_WIDTH => 48)
    port map (
        din0 => r_V_reg_1505,
        din1 => r_V_11_fu_677_p1,
        dout => r_V_11_fu_677_p2);

    mul_23s_31ns_48_1_1_U18 : component lteCellSearch_mul_23s_31ns_48_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 23,
        din1_WIDTH => 31,
        dout_WIDTH => 48)
    port map (
        din0 => r_V_12_reg_1510,
        din1 => r_V_13_fu_697_p1,
        dout => r_V_13_fu_697_p2);

    mul_32s_23s_54_1_1_U19 : component lteCellSearch_mul_32s_23s_54_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 23,
        dout_WIDTH => 54)
    port map (
        din0 => r_V_44_fu_764_p3,
        din1 => td_pss_real_V_0_q0,
        dout => r_V_33_fu_783_p2);

    mul_32s_22s_53_1_1_U20 : component lteCellSearch_mul_32s_22s_53_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 22,
        dout_WIDTH => 53)
    port map (
        din0 => r_V_35_fu_814_p0,
        din1 => td_pss_imag_V_0_q0,
        dout => r_V_35_fu_814_p2);

    mul_33s_23s_55_1_1_U21 : component lteCellSearch_mul_33s_23s_55_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 23,
        dout_WIDTH => 55)
    port map (
        din0 => r_V_37_fu_908_p0,
        din1 => ret_V_8_fu_894_p2,
        dout => r_V_37_fu_908_p2);

    mul_32s_22s_53_1_1_U22 : component lteCellSearch_mul_32s_22s_53_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 22,
        dout_WIDTH => 53)
    port map (
        din0 => r_V_38_fu_976_p0,
        din1 => td_pss_real_V_1_q0,
        dout => r_V_38_fu_976_p2);

    mul_32s_22s_53_1_1_U23 : component lteCellSearch_mul_32s_22s_53_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 22,
        dout_WIDTH => 53)
    port map (
        din0 => r_V_39_fu_996_p0,
        din1 => td_pss_imag_V_1_q0,
        dout => r_V_39_fu_996_p2);

    mul_33s_23s_55_1_1_U24 : component lteCellSearch_mul_33s_23s_55_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 23,
        dout_WIDTH => 55)
    port map (
        din0 => r_V_40_fu_1076_p0,
        din1 => ret_V_14_fu_1066_p2,
        dout => r_V_40_fu_1076_p2);

    mul_32s_22s_53_1_1_U25 : component lteCellSearch_mul_32s_22s_53_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 22,
        dout_WIDTH => 53)
    port map (
        din0 => r_V_41_fu_1144_p0,
        din1 => td_pss_real_V_2_q0,
        dout => r_V_41_fu_1144_p2);

    mul_32s_22s_53_1_1_U26 : component lteCellSearch_mul_32s_22s_53_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 22,
        dout_WIDTH => 53)
    port map (
        din0 => r_V_42_fu_1164_p0,
        din1 => td_pss_imag_V_2_q0,
        dout => r_V_42_fu_1164_p2);

    mul_33s_23s_55_1_1_U27 : component lteCellSearch_mul_33s_23s_55_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 23,
        dout_WIDTH => 55)
    port map (
        din0 => r_V_43_fu_1244_p0,
        din1 => ret_V_20_fu_1234_p2,
        dout => r_V_43_fu_1244_p2);

    mul_32s_32s_50_1_1_U28 : component lteCellSearch_mul_32s_32s_50_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 50)
    port map (
        din0 => r_V_15_fu_1312_p0,
        din1 => r_V_15_fu_1312_p1,
        dout => r_V_15_fu_1312_p2);

    mul_32s_32s_50_1_1_U29 : component lteCellSearch_mul_32s_32s_50_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 50)
    port map (
        din0 => r_V_17_fu_1322_p0,
        din1 => r_V_17_fu_1322_p1,
        dout => r_V_17_fu_1322_p2);

    mul_32s_32s_50_1_1_U30 : component lteCellSearch_mul_32s_32s_50_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 50)
    port map (
        din0 => r_V_21_fu_1348_p0,
        din1 => r_V_21_fu_1348_p1,
        dout => r_V_21_fu_1348_p2);

    mul_32s_32s_50_1_1_U31 : component lteCellSearch_mul_32s_32s_50_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 50)
    port map (
        din0 => r_V_23_fu_1358_p0,
        din1 => r_V_23_fu_1358_p1,
        dout => r_V_23_fu_1358_p2);

    mul_32s_32s_50_1_1_U32 : component lteCellSearch_mul_32s_32s_50_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 50)
    port map (
        din0 => r_V_27_fu_1384_p0,
        din1 => r_V_27_fu_1384_p1,
        dout => r_V_27_fu_1384_p2);

    mul_32s_32s_50_1_1_U33 : component lteCellSearch_mul_32s_32s_50_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 50)
    port map (
        din0 => r_V_29_fu_1394_p0,
        din1 => r_V_29_fu_1394_p1,
        dout => r_V_29_fu_1394_p2);

    mul_31ns_14ns_44_1_1_U34 : component lteCellSearch_mul_31ns_14ns_44_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 14,
        dout_WIDTH => 44)
    port map (
        din0 => r_V_19_fu_1419_p0,
        din1 => r_V_19_fu_1419_p1,
        dout => r_V_19_fu_1419_p2);

    mul_31ns_14ns_44_1_1_U35 : component lteCellSearch_mul_31ns_14ns_44_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 14,
        dout_WIDTH => 44)
    port map (
        din0 => r_V_25_fu_1438_p0,
        din1 => r_V_25_fu_1438_p1,
        dout => r_V_25_fu_1438_p2);

    mul_31ns_14ns_44_1_1_U36 : component lteCellSearch_mul_31ns_14ns_44_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 14,
        dout_WIDTH => 44)
    port map (
        din0 => r_V_31_fu_1457_p0,
        din1 => r_V_31_fu_1457_p1,
        dout => r_V_31_fu_1457_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state5);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state8) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state8))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state8);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    acc_i_0_V_2_reg_511_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln878_3_reg_1570 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                acc_i_0_V_2_reg_511 <= ret_V_11_fu_956_p2(39 downto 8);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                acc_i_0_V_2_reg_511 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    acc_i_1_V_2_reg_487_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln878_3_reg_1570 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                acc_i_1_V_2_reg_487 <= ret_V_17_fu_1124_p2(39 downto 8);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                acc_i_1_V_2_reg_487 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    acc_i_2_V_2_reg_463_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln878_3_reg_1570 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                acc_i_2_V_2_reg_463 <= ret_V_23_fu_1292_p2(39 downto 8);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                acc_i_2_V_2_reg_463 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    acc_r_0_V_2_reg_523_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln878_3_reg_1570 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                acc_r_0_V_2_reg_523 <= ret_V_6_fu_860_p2(39 downto 8);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                acc_r_0_V_2_reg_523 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    acc_r_1_V_2_reg_499_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln878_3_reg_1570 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                acc_r_1_V_2_reg_499 <= ret_V_13_fu_1042_p2(39 downto 8);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                acc_r_1_V_2_reg_499 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    acc_r_2_V_2_reg_475_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln878_3_reg_1570 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                acc_r_2_V_2_reg_475 <= ret_V_19_fu_1210_p2(39 downto 8);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                acc_r_2_V_2_reg_475 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_V_11_reg_441_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln878_2_reg_1532 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                i_V_11_reg_441 <= ret_reg_1526;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_V_11_reg_441 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_V_8_reg_452_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln878_3_fu_720_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                i_V_8_reg_452 <= i_V_9_fu_714_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_V_8_reg_452 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_V_reg_430_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (run_reg_1501 = ap_const_lv1_1))) then 
                i_V_reg_430 <= ap_const_lv8_0;
            elsif (((icmp_ln878_fu_568_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_V_reg_430 <= i_V_7_fu_562_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln878_3_fu_720_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln1116_reg_1584 <= icmp_ln1116_fu_758_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln878_2_reg_1532 <= icmp_ln878_2_fu_608_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln878_3_reg_1570 <= icmp_ln878_3_fu_720_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                r_V_12_reg_1510 <= IN_imag_V_q1;
                r_V_reg_1505 <= IN_real_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                r_V_18_reg_1675 <= grp_sqrt_fixed_40_18_s_fu_535_ap_return;
                r_V_24_reg_1680 <= grp_sqrt_fixed_40_18_s_fu_540_ap_return;
                r_V_30_reg_1685 <= grp_sqrt_fixed_40_18_s_fu_545_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                ret_reg_1526 <= ret_fu_602_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                run_reg_1501 <= run_fu_556_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln878_2_fu_608_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                tmp_80_reg_1551 <= ap_phi_mux_i_V_11_phi_fu_445_p4(6 downto 6);
                trunc_ln1346_reg_1536 <= trunc_ln1346_fu_614_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                x_V_1_reg_1665 <= ret_V_3_fu_1364_p2(49 downto 10);
                x_V_2_reg_1670 <= ret_V_4_fu_1400_p2(49 downto 10);
                x_V_reg_1660 <= ret_V_fu_1328_p2(49 downto 10);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, trunc_ln236_empty_n, run_reg_1501, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_enable_reg_pp1_iter0, icmp_ln878_2_fu_608_p2, ap_enable_reg_pp2_iter0, icmp_ln878_3_fu_720_p2, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, icmp_ln878_fu_568_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((trunc_ln236_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (run_reg_1501 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln878_fu_568_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((icmp_ln878_2_fu_608_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((icmp_ln878_2_fu_608_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((icmp_ln878_3_fu_720_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((icmp_ln878_3_fu_720_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;

    IN_I_buff_V_0_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, zext_ln92_fu_578_p1, zext_ln100_1_fu_657_p1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            IN_I_buff_V_0_address0 <= zext_ln100_1_fu_657_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            IN_I_buff_V_0_address0 <= zext_ln92_fu_578_p1(6 - 1 downto 0);
        else 
            IN_I_buff_V_0_address0 <= "XXXXXX";
        end if; 
    end process;


    IN_I_buff_V_0_address1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp1_stage0, ap_block_pp2_stage0, zext_ln100_fu_624_p1, zext_ln1116_fu_740_p1)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            IN_I_buff_V_0_address1 <= zext_ln1116_fu_740_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            IN_I_buff_V_0_address1 <= zext_ln100_fu_624_p1(6 - 1 downto 0);
        else 
            IN_I_buff_V_0_address1 <= "XXXXXX";
        end if; 
    end process;


    IN_I_buff_V_0_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            IN_I_buff_V_0_ce0 <= ap_const_logic_1;
        else 
            IN_I_buff_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    IN_I_buff_V_0_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001)
    begin
        if ((((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            IN_I_buff_V_0_ce1 <= ap_const_logic_1;
        else 
            IN_I_buff_V_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    IN_I_buff_V_0_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, select_ln100_1_fu_664_p3)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            IN_I_buff_V_0_d0 <= select_ln100_1_fu_664_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            IN_I_buff_V_0_d0 <= ap_const_lv32_0;
        else 
            IN_I_buff_V_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    IN_I_buff_V_0_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, tmp_80_reg_1551, ap_enable_reg_pp1_iter1, icmp_ln878_fu_568_p2, icmp_ln92_fu_596_p2)
    begin
        if ((((icmp_ln92_fu_596_p2 = ap_const_lv1_1) and (icmp_ln878_fu_568_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (tmp_80_reg_1551 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            IN_I_buff_V_0_we0 <= ap_const_logic_1;
        else 
            IN_I_buff_V_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    IN_I_buff_V_1_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_block_pp2_stage0, zext_ln92_fu_578_p1, zext_ln100_1_fu_657_p1, zext_ln1116_fu_740_p1)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            IN_I_buff_V_1_address0 <= zext_ln1116_fu_740_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            IN_I_buff_V_1_address0 <= zext_ln100_1_fu_657_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            IN_I_buff_V_1_address0 <= zext_ln92_fu_578_p1(6 - 1 downto 0);
        else 
            IN_I_buff_V_1_address0 <= "XXXXXX";
        end if; 
    end process;


    IN_I_buff_V_1_address1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state7, ap_block_pp1_stage0, zext_ln100_fu_624_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            IN_I_buff_V_1_address1 <= ap_const_lv6_3F;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            IN_I_buff_V_1_address1 <= zext_ln100_fu_624_p1(6 - 1 downto 0);
        else 
            IN_I_buff_V_1_address1 <= "XXXXXX";
        end if; 
    end process;


    IN_I_buff_V_1_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            IN_I_buff_V_1_ce0 <= ap_const_logic_1;
        else 
            IN_I_buff_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    IN_I_buff_V_1_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            IN_I_buff_V_1_ce1 <= ap_const_logic_1;
        else 
            IN_I_buff_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    IN_I_buff_V_1_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, select_ln100_1_fu_664_p3)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            IN_I_buff_V_1_d0 <= select_ln100_1_fu_664_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            IN_I_buff_V_1_d0 <= ap_const_lv32_0;
        else 
            IN_I_buff_V_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    IN_I_buff_V_1_d1 <= r_V_13_fu_697_p2(47 downto 16);

    IN_I_buff_V_1_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, tmp_80_reg_1551, ap_enable_reg_pp1_iter1, icmp_ln878_fu_568_p2, icmp_ln92_fu_596_p2)
    begin
        if ((((icmp_ln92_fu_596_p2 = ap_const_lv1_0) and (icmp_ln878_fu_568_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (tmp_80_reg_1551 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            IN_I_buff_V_1_we0 <= ap_const_logic_1;
        else 
            IN_I_buff_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    IN_I_buff_V_1_we1_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            IN_I_buff_V_1_we1 <= ap_const_logic_1;
        else 
            IN_I_buff_V_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    IN_R_buff_V_0_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, zext_ln92_fu_578_p1, zext_ln100_1_fu_657_p1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            IN_R_buff_V_0_address0 <= zext_ln100_1_fu_657_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            IN_R_buff_V_0_address0 <= zext_ln92_fu_578_p1(6 - 1 downto 0);
        else 
            IN_R_buff_V_0_address0 <= "XXXXXX";
        end if; 
    end process;


    IN_R_buff_V_0_address1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp1_stage0, ap_block_pp2_stage0, zext_ln100_fu_624_p1, zext_ln1116_fu_740_p1)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            IN_R_buff_V_0_address1 <= zext_ln1116_fu_740_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            IN_R_buff_V_0_address1 <= zext_ln100_fu_624_p1(6 - 1 downto 0);
        else 
            IN_R_buff_V_0_address1 <= "XXXXXX";
        end if; 
    end process;


    IN_R_buff_V_0_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            IN_R_buff_V_0_ce0 <= ap_const_logic_1;
        else 
            IN_R_buff_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    IN_R_buff_V_0_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001)
    begin
        if ((((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            IN_R_buff_V_0_ce1 <= ap_const_logic_1;
        else 
            IN_R_buff_V_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    IN_R_buff_V_0_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, select_ln100_fu_647_p3)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            IN_R_buff_V_0_d0 <= select_ln100_fu_647_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            IN_R_buff_V_0_d0 <= ap_const_lv32_0;
        else 
            IN_R_buff_V_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    IN_R_buff_V_0_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, tmp_80_reg_1551, ap_enable_reg_pp1_iter1, icmp_ln878_fu_568_p2, icmp_ln92_fu_596_p2)
    begin
        if ((((icmp_ln92_fu_596_p2 = ap_const_lv1_1) and (icmp_ln878_fu_568_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (tmp_80_reg_1551 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            IN_R_buff_V_0_we0 <= ap_const_logic_1;
        else 
            IN_R_buff_V_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    IN_R_buff_V_1_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_block_pp2_stage0, zext_ln92_fu_578_p1, zext_ln100_1_fu_657_p1, zext_ln1116_fu_740_p1)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            IN_R_buff_V_1_address0 <= zext_ln1116_fu_740_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            IN_R_buff_V_1_address0 <= zext_ln100_1_fu_657_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            IN_R_buff_V_1_address0 <= zext_ln92_fu_578_p1(6 - 1 downto 0);
        else 
            IN_R_buff_V_1_address0 <= "XXXXXX";
        end if; 
    end process;


    IN_R_buff_V_1_address1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state7, ap_block_pp1_stage0, zext_ln100_fu_624_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            IN_R_buff_V_1_address1 <= ap_const_lv6_3F;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            IN_R_buff_V_1_address1 <= zext_ln100_fu_624_p1(6 - 1 downto 0);
        else 
            IN_R_buff_V_1_address1 <= "XXXXXX";
        end if; 
    end process;


    IN_R_buff_V_1_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            IN_R_buff_V_1_ce0 <= ap_const_logic_1;
        else 
            IN_R_buff_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    IN_R_buff_V_1_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            IN_R_buff_V_1_ce1 <= ap_const_logic_1;
        else 
            IN_R_buff_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    IN_R_buff_V_1_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, select_ln100_fu_647_p3)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            IN_R_buff_V_1_d0 <= select_ln100_fu_647_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            IN_R_buff_V_1_d0 <= ap_const_lv32_0;
        else 
            IN_R_buff_V_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    IN_R_buff_V_1_d1 <= r_V_11_fu_677_p2(47 downto 16);

    IN_R_buff_V_1_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, tmp_80_reg_1551, ap_enable_reg_pp1_iter1, icmp_ln878_fu_568_p2, icmp_ln92_fu_596_p2)
    begin
        if ((((icmp_ln92_fu_596_p2 = ap_const_lv1_0) and (icmp_ln878_fu_568_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (tmp_80_reg_1551 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            IN_R_buff_V_1_we0 <= ap_const_logic_1;
        else 
            IN_R_buff_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    IN_R_buff_V_1_we1_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            IN_R_buff_V_1_we1 <= ap_const_logic_1;
        else 
            IN_R_buff_V_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    IN_imag_V_address1 <= zext_ln228_fu_550_p1(17 - 1 downto 0);

    IN_imag_V_ce1_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, trunc_ln236_empty_n)
    begin
        if ((not(((trunc_ln236_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            IN_imag_V_ce1 <= ap_const_logic_1;
        else 
            IN_imag_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    IN_real_V_address1 <= zext_ln228_fu_550_p1(17 - 1 downto 0);

    IN_real_V_ce1_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, trunc_ln236_empty_n)
    begin
        if ((not(((trunc_ln236_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            IN_real_V_ce1 <= ap_const_logic_1;
        else 
            IN_real_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln100_fu_618_p2 <= std_logic_vector(unsigned(trunc_ln1346_fu_614_p1) + unsigned(ap_const_lv6_1));
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(7);
    ap_CS_fsm_state11 <= ap_CS_fsm(8);
    ap_CS_fsm_state16 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, trunc_ln236_empty_n)
    begin
                ap_block_state1 <= ((trunc_ln236_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state5_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state5_assign_proc : process(icmp_ln878_2_fu_608_p2)
    begin
        if ((icmp_ln878_2_fu_608_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state8_assign_proc : process(icmp_ln878_3_fu_720_p2)
    begin
        if ((icmp_ln878_3_fu_720_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_V_11_phi_fu_445_p4_assign_proc : process(i_V_11_reg_441, ret_reg_1526, ap_CS_fsm_pp1_stage0, icmp_ln878_2_reg_1532, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln878_2_reg_1532 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_i_V_11_phi_fu_445_p4 <= ret_reg_1526;
        else 
            ap_phi_mux_i_V_11_phi_fu_445_p4 <= i_V_11_reg_441;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= r_V_19_fu_1419_p2(43 downto 24);
    ap_return_1 <= r_V_25_fu_1438_p2(43 downto 24);
    ap_return_2 <= r_V_31_fu_1457_p2(43 downto 24);
    i_V_7_fu_562_p2 <= std_logic_vector(unsigned(i_V_reg_430) + unsigned(ap_const_lv8_1));
    i_V_9_fu_714_p2 <= std_logic_vector(unsigned(i_V_8_reg_452) + unsigned(ap_const_lv8_1));
    icmp_ln1116_fu_758_p2 <= "1" when (tmp_81_fu_748_p4 = ap_const_lv2_0) else "0";
    icmp_ln878_2_fu_608_p2 <= "1" when (ap_phi_mux_i_V_11_phi_fu_445_p4 = ap_const_lv7_7F) else "0";
    icmp_ln878_3_fu_720_p2 <= "1" when (i_V_8_reg_452 = ap_const_lv8_80) else "0";
    icmp_ln878_fu_568_p2 <= "1" when (i_V_reg_430 = ap_const_lv8_80) else "0";
    icmp_ln92_fu_596_p2 <= "1" when (tmp_fu_586_p4 = ap_const_lv2_0) else "0";
    lhs_2_fu_848_p3 <= (acc_r_0_V_2_reg_523 & ap_const_lv8_0);
    lhs_V_10_fu_1112_p3 <= (acc_i_1_V_2_reg_487 & ap_const_lv8_0);
    lhs_V_12_fu_1198_p3 <= (acc_r_2_V_2_reg_475 & ap_const_lv8_0);
    lhs_V_16_fu_1280_p3 <= (acc_i_2_V_2_reg_463 & ap_const_lv8_0);
    lhs_V_4_fu_944_p3 <= (acc_i_0_V_2_reg_511 & ap_const_lv8_0);
    lhs_V_6_fu_1030_p3 <= (acc_r_1_V_2_reg_499 & ap_const_lv8_0);
    r_V_11_fu_677_p1 <= ap_const_lv48_3E800000(31 - 1 downto 0);
    r_V_13_fu_697_p1 <= ap_const_lv48_3E800000(31 - 1 downto 0);
    r_V_15_fu_1312_p0 <= sext_ln1115_2_fu_1308_p1(32 - 1 downto 0);
    r_V_15_fu_1312_p1 <= sext_ln1115_2_fu_1308_p1(32 - 1 downto 0);
    r_V_17_fu_1322_p0 <= sext_ln1115_3_fu_1318_p1(32 - 1 downto 0);
    r_V_17_fu_1322_p1 <= sext_ln1115_3_fu_1318_p1(32 - 1 downto 0);
    r_V_19_fu_1419_p0 <= r_V_19_fu_1419_p00(31 - 1 downto 0);
    r_V_19_fu_1419_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_18_reg_1675),44));
    r_V_19_fu_1419_p1 <= ap_const_lv44_1062(14 - 1 downto 0);
    r_V_21_fu_1348_p0 <= sext_ln1115_4_fu_1344_p1(32 - 1 downto 0);
    r_V_21_fu_1348_p1 <= sext_ln1115_4_fu_1344_p1(32 - 1 downto 0);
    r_V_23_fu_1358_p0 <= sext_ln1115_5_fu_1354_p1(32 - 1 downto 0);
    r_V_23_fu_1358_p1 <= sext_ln1115_5_fu_1354_p1(32 - 1 downto 0);
    r_V_25_fu_1438_p0 <= r_V_25_fu_1438_p00(31 - 1 downto 0);
    r_V_25_fu_1438_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_24_reg_1680),44));
    r_V_25_fu_1438_p1 <= ap_const_lv44_1062(14 - 1 downto 0);
    r_V_27_fu_1384_p0 <= sext_ln1115_6_fu_1380_p1(32 - 1 downto 0);
    r_V_27_fu_1384_p1 <= sext_ln1115_6_fu_1380_p1(32 - 1 downto 0);
    r_V_29_fu_1394_p0 <= sext_ln1115_7_fu_1390_p1(32 - 1 downto 0);
    r_V_29_fu_1394_p1 <= sext_ln1115_7_fu_1390_p1(32 - 1 downto 0);
    r_V_31_fu_1457_p0 <= r_V_31_fu_1457_p00(31 - 1 downto 0);
    r_V_31_fu_1457_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_30_reg_1685),44));
    r_V_31_fu_1457_p1 <= ap_const_lv44_1062(14 - 1 downto 0);
    r_V_35_fu_814_p0 <= sext_ln1115_10_fu_806_p1(32 - 1 downto 0);
    r_V_37_fu_908_p0 <= sext_ln1115_11_fu_900_p1(33 - 1 downto 0);
    r_V_38_fu_976_p0 <= sext_ln1115_8_fu_771_p1(32 - 1 downto 0);
    r_V_39_fu_996_p0 <= sext_ln1115_10_fu_806_p1(32 - 1 downto 0);
    r_V_40_fu_1076_p0 <= sext_ln1115_11_fu_900_p1(33 - 1 downto 0);
    r_V_41_fu_1144_p0 <= sext_ln1115_8_fu_771_p1(32 - 1 downto 0);
    r_V_42_fu_1164_p0 <= sext_ln1115_10_fu_806_p1(32 - 1 downto 0);
    r_V_43_fu_1244_p0 <= sext_ln1115_11_fu_900_p1(33 - 1 downto 0);
    r_V_44_fu_764_p3 <= 
        IN_R_buff_V_0_q1 when (icmp_ln1116_reg_1584(0) = '1') else 
        IN_R_buff_V_1_q0;
    r_V_45_fu_799_p3 <= 
        IN_I_buff_V_0_q1 when (icmp_ln1116_reg_1584(0) = '1') else 
        IN_I_buff_V_1_q0;
    ret_V_11_fu_956_p2 <= std_logic_vector(unsigned(lhs_V_4_fu_944_p3) + unsigned(sext_ln1192_1_fu_952_p1));
    ret_V_13_fu_1042_p2 <= std_logic_vector(unsigned(lhs_V_6_fu_1030_p3) + unsigned(sext_ln1192_2_fu_1038_p1));
    ret_V_14_fu_1066_p2 <= std_logic_vector(signed(sext_ln1193_1_fu_1058_p1) - signed(sext_ln1193_2_fu_1062_p1));
    ret_V_17_fu_1124_p2 <= std_logic_vector(unsigned(lhs_V_10_fu_1112_p3) + unsigned(sext_ln1192_3_fu_1120_p1));
    ret_V_19_fu_1210_p2 <= std_logic_vector(unsigned(lhs_V_12_fu_1198_p3) + unsigned(sext_ln1192_4_fu_1206_p1));
    ret_V_20_fu_1234_p2 <= std_logic_vector(signed(sext_ln1193_3_fu_1226_p1) - signed(sext_ln1193_4_fu_1230_p1));
    ret_V_23_fu_1292_p2 <= std_logic_vector(unsigned(lhs_V_16_fu_1280_p3) + unsigned(sext_ln1192_5_fu_1288_p1));
    ret_V_24_fu_842_p2 <= std_logic_vector(signed(sext_ln703_1_fu_834_p1) + signed(sext_ln1192_6_fu_838_p1));
    ret_V_25_fu_884_p2 <= std_logic_vector(signed(sext_ln703_3_fu_880_p1) + signed(sext_ln703_2_fu_876_p1));
    ret_V_26_fu_928_p2 <= std_logic_vector(signed(sext_ln1193_5_fu_924_p1) - signed(sext_ln703_fu_830_p1));
    ret_V_27_fu_938_p2 <= std_logic_vector(unsigned(ret_V_26_fu_928_p2) + unsigned(sext_ln1192_7_fu_934_p1));
    ret_V_28_fu_1024_p2 <= std_logic_vector(signed(sext_ln1192_8_fu_1020_p1) + signed(sext_ln703_5_fu_1016_p1));
    ret_V_29_fu_1096_p2 <= std_logic_vector(signed(sext_ln1193_6_fu_1092_p1) - signed(sext_ln703_4_fu_1012_p1));
    ret_V_30_fu_1106_p2 <= std_logic_vector(unsigned(ret_V_29_fu_1096_p2) + unsigned(sext_ln1192_9_fu_1102_p1));
    ret_V_31_fu_1192_p2 <= std_logic_vector(signed(sext_ln1192_10_fu_1188_p1) + signed(sext_ln703_7_fu_1184_p1));
    ret_V_32_fu_1264_p2 <= std_logic_vector(signed(sext_ln1193_7_fu_1260_p1) - signed(sext_ln703_6_fu_1180_p1));
    ret_V_33_fu_1274_p2 <= std_logic_vector(unsigned(ret_V_32_fu_1264_p2) + unsigned(sext_ln1192_11_fu_1270_p1));
    ret_V_3_fu_1364_p2 <= std_logic_vector(unsigned(r_V_23_fu_1358_p2) + unsigned(r_V_21_fu_1348_p2));
    ret_V_4_fu_1400_p2 <= std_logic_vector(unsigned(r_V_29_fu_1394_p2) + unsigned(r_V_27_fu_1384_p2));
    ret_V_6_fu_860_p2 <= std_logic_vector(unsigned(lhs_2_fu_848_p3) + unsigned(sext_ln1192_fu_856_p1));
    ret_V_8_fu_894_p0 <= td_pss_real_V_0_q0;
    ret_V_8_fu_894_p2 <= std_logic_vector(signed(ret_V_8_fu_894_p0) - signed(sext_ln1193_fu_890_p1));
    ret_V_fu_1328_p2 <= std_logic_vector(unsigned(r_V_17_fu_1322_p2) + unsigned(r_V_15_fu_1312_p2));
    ret_fu_602_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_V_11_phi_fu_445_p4) + unsigned(ap_const_lv7_1));
    run_fu_556_p2 <= "1" when (trunc_ln236_dout = ap_const_lv17_0) else "0";
    select_ln100_1_fu_664_p3 <= 
        IN_I_buff_V_1_q1 when (tmp_79_fu_640_p3(0) = '1') else 
        IN_I_buff_V_0_q1;
    select_ln100_fu_647_p3 <= 
        IN_R_buff_V_1_q1 when (tmp_79_fu_640_p3(0) = '1') else 
        IN_R_buff_V_0_q1;
        sext_ln1115_10_fu_806_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_45_fu_799_p3),53));

        sext_ln1115_11_fu_900_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_25_fu_884_p2),55));

        sext_ln1115_2_fu_1308_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(acc_r_0_V_2_reg_523),50));

        sext_ln1115_3_fu_1318_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(acc_i_0_V_2_reg_511),50));

        sext_ln1115_4_fu_1344_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(acc_r_1_V_2_reg_499),50));

        sext_ln1115_5_fu_1354_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(acc_i_1_V_2_reg_487),50));

        sext_ln1115_6_fu_1380_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(acc_r_2_V_2_reg_475),50));

        sext_ln1115_7_fu_1390_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(acc_i_2_V_2_reg_463),50));

        sext_ln1115_8_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_44_fu_764_p3),53));

        sext_ln1192_10_fu_1188_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_9_fu_1170_p4),30));

        sext_ln1192_11_fu_1270_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_9_fu_1170_p4),32));

        sext_ln1192_1_fu_952_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_27_fu_938_p2),40));

        sext_ln1192_2_fu_1038_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_28_fu_1024_p2),40));

        sext_ln1192_3_fu_1120_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_30_fu_1106_p2),40));

        sext_ln1192_4_fu_1206_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_31_fu_1192_p2),40));

        sext_ln1192_5_fu_1288_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_33_fu_1274_p2),40));

        sext_ln1192_6_fu_838_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_3_fu_820_p4),31));

        sext_ln1192_7_fu_934_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_3_fu_820_p4),32));

        sext_ln1192_8_fu_1020_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_6_fu_1002_p4),30));

        sext_ln1192_9_fu_1102_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_6_fu_1002_p4),32));

        sext_ln1192_fu_856_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_24_fu_842_p2),40));

    sext_ln1193_1_fu_1058_p0 <= td_pss_real_V_1_q0;
        sext_ln1193_1_fu_1058_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1193_1_fu_1058_p0),23));

    sext_ln1193_2_fu_1062_p0 <= td_pss_imag_V_1_q0;
        sext_ln1193_2_fu_1062_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1193_2_fu_1062_p0),23));

    sext_ln1193_3_fu_1226_p0 <= td_pss_real_V_2_q0;
        sext_ln1193_3_fu_1226_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1193_3_fu_1226_p0),23));

    sext_ln1193_4_fu_1230_p0 <= td_pss_imag_V_2_q0;
        sext_ln1193_4_fu_1230_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1193_4_fu_1230_p0),23));

        sext_ln1193_5_fu_924_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_4_fu_914_p4),32));

        sext_ln1193_6_fu_1092_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_7_fu_1082_p4),32));

        sext_ln1193_7_fu_1260_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_1_fu_1250_p4),32));

    sext_ln1193_fu_890_p0 <= td_pss_imag_V_0_q0;
        sext_ln1193_fu_890_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1193_fu_890_p0),23));

        sext_ln703_1_fu_834_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_2_fu_789_p4),31));

        sext_ln703_2_fu_876_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_44_fu_764_p3),33));

        sext_ln703_3_fu_880_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_45_fu_799_p3),33));

        sext_ln703_4_fu_1012_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_5_fu_982_p4),32));

        sext_ln703_5_fu_1016_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_5_fu_982_p4),30));

        sext_ln703_6_fu_1180_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_8_fu_1150_p4),32));

        sext_ln703_7_fu_1184_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_8_fu_1150_p4),30));

        sext_ln703_fu_830_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_2_fu_789_p4),32));

    td_pss_imag_V_0_address0 <= zext_ln534_fu_726_p1(7 - 1 downto 0);

    td_pss_imag_V_0_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            td_pss_imag_V_0_ce0 <= ap_const_logic_1;
        else 
            td_pss_imag_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    td_pss_imag_V_1_address0 <= zext_ln534_fu_726_p1(7 - 1 downto 0);

    td_pss_imag_V_1_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            td_pss_imag_V_1_ce0 <= ap_const_logic_1;
        else 
            td_pss_imag_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    td_pss_imag_V_2_address0 <= zext_ln534_fu_726_p1(7 - 1 downto 0);

    td_pss_imag_V_2_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            td_pss_imag_V_2_ce0 <= ap_const_logic_1;
        else 
            td_pss_imag_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    td_pss_real_V_0_address0 <= zext_ln534_fu_726_p1(7 - 1 downto 0);

    td_pss_real_V_0_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            td_pss_real_V_0_ce0 <= ap_const_logic_1;
        else 
            td_pss_real_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    td_pss_real_V_1_address0 <= zext_ln534_fu_726_p1(7 - 1 downto 0);

    td_pss_real_V_1_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            td_pss_real_V_1_ce0 <= ap_const_logic_1;
        else 
            td_pss_real_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    td_pss_real_V_2_address0 <= zext_ln534_fu_726_p1(7 - 1 downto 0);

    td_pss_real_V_2_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            td_pss_real_V_2_ce0 <= ap_const_logic_1;
        else 
            td_pss_real_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_79_fu_640_p3 <= ret_reg_1526(6 downto 6);
    tmp_81_fu_748_p4 <= i_V_8_reg_452(7 downto 6);
    tmp_fu_586_p4 <= i_V_reg_430(7 downto 6);
    trunc_ln1116_fu_736_p1 <= i_V_8_reg_452(6 - 1 downto 0);
    trunc_ln1346_fu_614_p1 <= ap_phi_mux_i_V_11_phi_fu_445_p4(6 - 1 downto 0);

    trunc_ln236_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, trunc_ln236_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            trunc_ln236_blk_n <= trunc_ln236_empty_n;
        else 
            trunc_ln236_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    trunc_ln236_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, trunc_ln236_empty_n)
    begin
        if ((not(((trunc_ln236_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            trunc_ln236_read <= ap_const_logic_1;
        else 
            trunc_ln236_read <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln708_1_fu_1250_p4 <= r_V_43_fu_1244_p2(54 downto 24);
    trunc_ln708_2_fu_789_p4 <= r_V_33_fu_783_p2(53 downto 24);
    trunc_ln708_3_fu_820_p4 <= r_V_35_fu_814_p2(52 downto 24);
    trunc_ln708_4_fu_914_p4 <= r_V_37_fu_908_p2(54 downto 24);
    trunc_ln708_5_fu_982_p4 <= r_V_38_fu_976_p2(52 downto 24);
    trunc_ln708_6_fu_1002_p4 <= r_V_39_fu_996_p2(52 downto 24);
    trunc_ln708_7_fu_1082_p4 <= r_V_40_fu_1076_p2(54 downto 24);
    trunc_ln708_8_fu_1150_p4 <= r_V_41_fu_1144_p2(52 downto 24);
    trunc_ln708_9_fu_1170_p4 <= r_V_42_fu_1164_p2(52 downto 24);
    trunc_ln92_fu_574_p1 <= i_V_reg_430(6 - 1 downto 0);
    zext_ln100_1_fu_657_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1346_reg_1536),64));
    zext_ln100_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln100_fu_618_p2),64));
    zext_ln1116_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1116_fu_736_p1),64));
    zext_ln228_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln236_dout),64));
    zext_ln534_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_V_8_reg_452),64));
    zext_ln92_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln92_fu_574_p1),64));
end behav;
