-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity cp_corr_pss_sss_td_pss_1_real_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of cp_corr_pss_sss_td_pss_1_real_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101100111001101111011100011", 
    1 => "10111101000100111101100001011010", 
    2 => "00111101001101111100011001110110", 
    3 => "00111101110000010110010110010000", 
    4 => "00111101110000000100011011000111", 
    5 => "00111101101011011101000001010011", 
    6 => "00111101101111100101010000101110", 
    7 => "00111101101011101000110000000101", 
    8 => "00111101000000000000110010010101", 
    9 => "10111101000001101101011100011111", 
    10 => "10111101010100010100001110111111", 
    11 => "10111100111101110111010010101100", 
    12 => "10111100011100010100010101010010", 
    13 => "00111010101010000110011010111100", 
    14 => "00111101010110111000110111000101", 
    15 => "00111101110110001010100001101101", 
    16 => "00111101100100101100101011011110", 
    17 => "10111101000100010011100101000011", 
    18 => "10111101101011010111101101100011", 
    19 => "10111100011001000111000100101110", 
    20 => "00111101100010010100111001011101", 
    21 => "00111101000111011110101011001101", 
    22 => "10111101011000111010111000100101", 
    23 => "10111101110001111101000000101001", 
    24 => "10111101101000111111000111000111", 
    25 => "10111101100111110100010011010100", 
    26 => "10111101101110100010111001111111", 
    27 => "10111101011001110111111101101011", 
    28 => "00111100001001000001101000100110", 
    29 => "00111100110101100100011100110100", 
    30 => "10111011111000101011100110011110", 
    31 => "10110101110101011111010011011100", 
    32 => "00111101100001001111010001000001", 
    33 => "00111101110101001000010101011110", 
    34 => "00111101101010101101110001001101", 
    35 => "00111101100100100100001100010011", 
    36 => "00111101101111110011111100010000", 
    37 => "00111101100111111000010101010001", 
    38 => "00111011011010110000100000100001", 
    39 => "10111101000010011001001110010010", 
    40 => "00111100100010010101101011110011", 
    41 => "00111101011000001011100100010011", 
    42 => "10111100000100110011001110111001", 
    43 => "10111101110100010011010000000101", 
    44 => "10111101111010100010101100010111", 
    45 => "10111101100100111001011111011101", 
    46 => "10111101011001101001011010100010", 
    47 => "10111101001000100011010010101000", 
    48 => "00111101000110000010111011001011", 
    49 => "00111101110010110001011001111111", 
    50 => "00111100111111000010100001110000", 
    51 => "10111101110100110110010100000010", 
    52 => "10111101111101111101100101010101", 
    53 => "10111100000001101000010000010011", 
    54 => "00111101010101011111111011011010", 
    55 => "10111100111101000000111001011010", 
    56 => "10111101111011010100110101000000", 
    57 => "10111101100011111011101110010101", 
    58 => "00111101000010100010110010101010", 
    59 => "00111101010000110110101110010000", 
    60 => "10111100111000101001110110000100", 
    61 => "10111101100110011001001001000011", 
    62 => "10111101001001101010011001011101", 
    63 => "00111100101111010111101100100000", 
    64 => "00111101010100111110010111111011", 
    65 => "00111100101111010111101100100000", 
    66 => "10111101001001101010011001011101", 
    67 => "10111101100110011001001001000011", 
    68 => "10111100111000101001110110000100", 
    69 => "00111101010000110110101110010000", 
    70 => "00111101000010100010110010101010", 
    71 => "10111101100011111011101110010101", 
    72 => "10111101111011010100110101000000", 
    73 => "10111100111101000000111001011010", 
    74 => "00111101010101011111111011011010", 
    75 => "10111100000001101000010000010011", 
    76 => "10111101111101111101100101010101", 
    77 => "10111101110100110110010100000010", 
    78 => "00111100111111000010100001110000", 
    79 => "00111101110010110001011001111111", 
    80 => "00111101000110000010111011001011", 
    81 => "10111101001000100011010010101000", 
    82 => "10111101011001101001011010100010", 
    83 => "10111101100100111001011111011101", 
    84 => "10111101111010100010101100010111", 
    85 => "10111101110100010011010000000101", 
    86 => "10111100000100110011001110111001", 
    87 => "00111101011000001011100100010011", 
    88 => "00111100100010010101101011110011", 
    89 => "10111101000010011001001110010010", 
    90 => "00111011011010110000100000100001", 
    91 => "00111101100111111000010101010001", 
    92 => "00111101101111110011111100010000", 
    93 => "00111101100100100100001100010011", 
    94 => "00111101101010101101110001001101", 
    95 => "00111101110101001000010101011110", 
    96 => "00111101100001001111010001000001", 
    97 => "10110101110101011111010011011100", 
    98 => "10111011111000101011100110011110", 
    99 => "00111100110101100100011100110100", 
    100 => "00111100001001000001101000100110", 
    101 => "10111101011001110111111101101011", 
    102 => "10111101101110100010111001111111", 
    103 => "10111101100111110100010011010100", 
    104 => "10111101101000111111000111000111", 
    105 => "10111101110001111101000000101001", 
    106 => "10111101011000111010111000100101", 
    107 => "00111101000111011110101011001101", 
    108 => "00111101100010010100111001011101", 
    109 => "10111100011001000111000100101110", 
    110 => "10111101101011010111101101100011", 
    111 => "10111101000100010011100101000011", 
    112 => "00111101100100101100101011011110", 
    113 => "00111101110110001010100001101101", 
    114 => "00111101010110111000110111000101", 
    115 => "00111010101010000110011010111100", 
    116 => "10111100011100010100010101010010", 
    117 => "10111100111101110111010010101100", 
    118 => "10111101010100010100001110111111", 
    119 => "10111101000001101101011100011111", 
    120 => "00111101000000000000110010010101", 
    121 => "00111101101011101000110000000101", 
    122 => "00111101101111100101010000101110", 
    123 => "00111101101011011101000001010011", 
    124 => "00111101110000000100011011000111", 
    125 => "00111101110000010110010110010000", 
    126 => "00111101001101111100011001110110", 
    127 => "10111101000100111101100001011010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity cp_corr_pss_sss_td_pss_1_real is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of cp_corr_pss_sss_td_pss_1_real is
    component cp_corr_pss_sss_td_pss_1_real_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    cp_corr_pss_sss_td_pss_1_real_rom_U :  component cp_corr_pss_sss_td_pss_1_real_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


