// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fft_shift_fft_shift,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=16.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.474000,HLS_SYN_LAT=395,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=103,HLS_SYN_LUT=575,HLS_VERSION=2020_2}" *)

module fft_shift (
        ap_clk,
        ap_rst_n,
        IN_R_TDATA,
        IN_R_TVALID,
        IN_R_TREADY,
        IN_R_TKEEP,
        IN_R_TSTRB,
        IN_R_TLAST,
        OUT_R_TDATA,
        OUT_R_TVALID,
        OUT_R_TREADY,
        OUT_R_TKEEP,
        OUT_R_TSTRB,
        OUT_R_TLAST,
        OUT_I_TDATA,
        OUT_I_TVALID,
        OUT_I_TREADY,
        OUT_I_TKEEP,
        OUT_I_TSTRB,
        OUT_I_TLAST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_pp1_stage0 = 9'd8;
parameter    ap_ST_fsm_state6 = 9'd16;
parameter    ap_ST_fsm_pp2_stage0 = 9'd32;
parameter    ap_ST_fsm_state9 = 9'd64;
parameter    ap_ST_fsm_state10 = 9'd128;
parameter    ap_ST_fsm_state11 = 9'd256;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [63:0] IN_R_TDATA;
input   IN_R_TVALID;
output   IN_R_TREADY;
input  [7:0] IN_R_TKEEP;
input  [7:0] IN_R_TSTRB;
input  [0:0] IN_R_TLAST;
output  [31:0] OUT_R_TDATA;
output   OUT_R_TVALID;
input   OUT_R_TREADY;
output  [3:0] OUT_R_TKEEP;
output  [3:0] OUT_R_TSTRB;
output  [0:0] OUT_R_TLAST;
output  [31:0] OUT_I_TDATA;
output   OUT_I_TVALID;
input   OUT_I_TREADY;
output  [3:0] OUT_I_TKEEP;
output  [3:0] OUT_I_TSTRB;
output  [0:0] OUT_I_TLAST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg    IN_R_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln7_fu_274_p2;
reg   [6:0] i_1_reg_223;
reg   [6:0] i_2_reg_235;
wire   [7:0] add_ln7_fu_268_p2;
reg    ap_block_state2;
wire   [6:0] add_ln16_fu_314_p2;
reg   [6:0] add_ln16_reg_381;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state4_pp1_stage0_iter0;
wire    ap_block_state5_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln16_fu_320_p2;
reg   [0:0] icmp_ln16_reg_386;
wire   [6:0] add_ln22_fu_344_p2;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state7_pp2_stage0_iter0;
wire    ap_block_state8_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln22_fu_350_p2;
reg   [0:0] icmp_ln22_reg_405;
wire   [6:0] xor_ln24_fu_362_p2;
reg   [6:0] xor_ln24_reg_414;
wire    ap_CS_fsm_state3;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state4;
reg    ap_enable_reg_pp1_iter1;
wire    ap_CS_fsm_state6;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state7;
reg    ap_enable_reg_pp2_iter1;
reg   [6:0] in_temp_r_address0;
reg    in_temp_r_ce0;
reg    in_temp_r_we0;
wire   [31:0] in_temp_r_d0;
wire   [31:0] in_temp_r_q0;
reg   [6:0] in_temp_i_address0;
reg    in_temp_i_ce0;
reg    in_temp_i_we0;
wire   [31:0] in_temp_i_d0;
wire   [31:0] in_temp_i_q0;
reg   [6:0] out_temp_r_address0;
reg    out_temp_r_ce0;
reg    out_temp_r_we0;
wire   [31:0] out_temp_r_q0;
reg   [6:0] out_temp_i_address0;
reg    out_temp_i_ce0;
reg    out_temp_i_we0;
wire   [31:0] out_temp_i_q0;
wire    grp_copy_output_fu_246_ap_start;
wire    grp_copy_output_fu_246_ap_done;
wire    grp_copy_output_fu_246_ap_idle;
wire    grp_copy_output_fu_246_ap_ready;
wire   [6:0] grp_copy_output_fu_246_OUT_temp_R_address0;
wire    grp_copy_output_fu_246_OUT_temp_R_ce0;
wire   [6:0] grp_copy_output_fu_246_OUT_temp_I_address0;
wire    grp_copy_output_fu_246_OUT_temp_I_ce0;
wire   [31:0] grp_copy_output_fu_246_OUT_R_TDATA;
wire    grp_copy_output_fu_246_OUT_R_TVALID;
wire    grp_copy_output_fu_246_OUT_R_TREADY;
wire   [3:0] grp_copy_output_fu_246_OUT_R_TKEEP;
wire   [3:0] grp_copy_output_fu_246_OUT_R_TSTRB;
wire   [0:0] grp_copy_output_fu_246_OUT_R_TLAST;
wire   [31:0] grp_copy_output_fu_246_OUT_I_TDATA;
wire    grp_copy_output_fu_246_OUT_I_TVALID;
wire    grp_copy_output_fu_246_OUT_I_TREADY;
wire   [3:0] grp_copy_output_fu_246_OUT_I_TKEEP;
wire   [3:0] grp_copy_output_fu_246_OUT_I_TSTRB;
wire   [0:0] grp_copy_output_fu_246_OUT_I_TLAST;
reg   [7:0] i_reg_212;
reg   [6:0] ap_phi_mux_i_1_phi_fu_227_p4;
wire    ap_block_pp1_stage0;
reg    grp_copy_output_fu_246_ap_start_reg;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire   [63:0] i_cast_fu_280_p1;
wire   [63:0] zext_ln18_fu_332_p1;
wire   [63:0] i_1_cast_fu_338_p1;
wire   [63:0] i_2_cast_fu_356_p1;
wire    ap_block_pp2_stage0;
wire   [63:0] zext_ln24_fu_368_p1;
wire   [31:0] trunc_ln9_fu_290_p1;
wire   [31:0] trunc_ln9_1_fu_299_p4;
wire   [6:0] xor_ln18_fu_326_p2;
wire    ap_CS_fsm_state11;
wire    regslice_both_OUT_R_V_data_V_U_apdone_blk;
wire    regslice_both_OUT_I_V_data_V_U_apdone_blk;
reg    ap_block_state11;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire    regslice_both_IN_R_V_data_V_U_apdone_blk;
wire   [63:0] IN_R_TDATA_int_regslice;
wire    IN_R_TVALID_int_regslice;
reg    IN_R_TREADY_int_regslice;
wire    regslice_both_IN_R_V_data_V_U_ack_in;
wire    regslice_both_IN_R_V_keep_V_U_apdone_blk;
wire   [7:0] IN_R_TKEEP_int_regslice;
wire    regslice_both_IN_R_V_keep_V_U_vld_out;
wire    regslice_both_IN_R_V_keep_V_U_ack_in;
wire    regslice_both_IN_R_V_strb_V_U_apdone_blk;
wire   [7:0] IN_R_TSTRB_int_regslice;
wire    regslice_both_IN_R_V_strb_V_U_vld_out;
wire    regslice_both_IN_R_V_strb_V_U_ack_in;
wire    regslice_both_IN_R_V_last_V_U_apdone_blk;
wire   [0:0] IN_R_TLAST_int_regslice;
wire    regslice_both_IN_R_V_last_V_U_vld_out;
wire    regslice_both_IN_R_V_last_V_U_ack_in;
wire    OUT_R_TREADY_int_regslice;
wire    regslice_both_OUT_R_V_data_V_U_vld_out;
wire    regslice_both_OUT_R_V_keep_V_U_apdone_blk;
wire    regslice_both_OUT_R_V_keep_V_U_ack_in_dummy;
wire    regslice_both_OUT_R_V_keep_V_U_vld_out;
wire    regslice_both_OUT_R_V_strb_V_U_apdone_blk;
wire    regslice_both_OUT_R_V_strb_V_U_ack_in_dummy;
wire    regslice_both_OUT_R_V_strb_V_U_vld_out;
wire    regslice_both_OUT_R_V_last_V_U_apdone_blk;
wire    regslice_both_OUT_R_V_last_V_U_ack_in_dummy;
wire    regslice_both_OUT_R_V_last_V_U_vld_out;
wire    OUT_I_TREADY_int_regslice;
wire    regslice_both_OUT_I_V_data_V_U_vld_out;
wire    regslice_both_OUT_I_V_keep_V_U_apdone_blk;
wire    regslice_both_OUT_I_V_keep_V_U_ack_in_dummy;
wire    regslice_both_OUT_I_V_keep_V_U_vld_out;
wire    regslice_both_OUT_I_V_strb_V_U_apdone_blk;
wire    regslice_both_OUT_I_V_strb_V_U_ack_in_dummy;
wire    regslice_both_OUT_I_V_strb_V_U_vld_out;
wire    regslice_both_OUT_I_V_last_V_U_apdone_blk;
wire    regslice_both_OUT_I_V_last_V_U_ack_in_dummy;
wire    regslice_both_OUT_I_V_last_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 grp_copy_output_fu_246_ap_start_reg = 1'b0;
end

fft_shift_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

fft_shift_in_temp_r #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
in_temp_r_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(in_temp_r_address0),
    .ce0(in_temp_r_ce0),
    .we0(in_temp_r_we0),
    .d0(in_temp_r_d0),
    .q0(in_temp_r_q0)
);

fft_shift_in_temp_r #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
in_temp_i_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(in_temp_i_address0),
    .ce0(in_temp_i_ce0),
    .we0(in_temp_i_we0),
    .d0(in_temp_i_d0),
    .q0(in_temp_i_q0)
);

fft_shift_in_temp_r #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
out_temp_r_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(out_temp_r_address0),
    .ce0(out_temp_r_ce0),
    .we0(out_temp_r_we0),
    .d0(in_temp_r_q0),
    .q0(out_temp_r_q0)
);

fft_shift_in_temp_r #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
out_temp_i_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(out_temp_i_address0),
    .ce0(out_temp_i_ce0),
    .we0(out_temp_i_we0),
    .d0(in_temp_i_q0),
    .q0(out_temp_i_q0)
);

fft_shift_copy_output grp_copy_output_fu_246(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_copy_output_fu_246_ap_start),
    .ap_done(grp_copy_output_fu_246_ap_done),
    .ap_idle(grp_copy_output_fu_246_ap_idle),
    .ap_ready(grp_copy_output_fu_246_ap_ready),
    .OUT_temp_R_address0(grp_copy_output_fu_246_OUT_temp_R_address0),
    .OUT_temp_R_ce0(grp_copy_output_fu_246_OUT_temp_R_ce0),
    .OUT_temp_R_q0(out_temp_r_q0),
    .OUT_temp_I_address0(grp_copy_output_fu_246_OUT_temp_I_address0),
    .OUT_temp_I_ce0(grp_copy_output_fu_246_OUT_temp_I_ce0),
    .OUT_temp_I_q0(out_temp_i_q0),
    .OUT_R_TDATA(grp_copy_output_fu_246_OUT_R_TDATA),
    .OUT_R_TVALID(grp_copy_output_fu_246_OUT_R_TVALID),
    .OUT_R_TREADY(grp_copy_output_fu_246_OUT_R_TREADY),
    .OUT_R_TKEEP(grp_copy_output_fu_246_OUT_R_TKEEP),
    .OUT_R_TSTRB(grp_copy_output_fu_246_OUT_R_TSTRB),
    .OUT_R_TLAST(grp_copy_output_fu_246_OUT_R_TLAST),
    .OUT_I_TDATA(grp_copy_output_fu_246_OUT_I_TDATA),
    .OUT_I_TVALID(grp_copy_output_fu_246_OUT_I_TVALID),
    .OUT_I_TREADY(grp_copy_output_fu_246_OUT_I_TREADY),
    .OUT_I_TKEEP(grp_copy_output_fu_246_OUT_I_TKEEP),
    .OUT_I_TSTRB(grp_copy_output_fu_246_OUT_I_TSTRB),
    .OUT_I_TLAST(grp_copy_output_fu_246_OUT_I_TLAST)
);

fft_shift_regslice_both #(
    .DataWidth( 64 ))
regslice_both_IN_R_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(IN_R_TDATA),
    .vld_in(IN_R_TVALID),
    .ack_in(regslice_both_IN_R_V_data_V_U_ack_in),
    .data_out(IN_R_TDATA_int_regslice),
    .vld_out(IN_R_TVALID_int_regslice),
    .ack_out(IN_R_TREADY_int_regslice),
    .apdone_blk(regslice_both_IN_R_V_data_V_U_apdone_blk)
);

fft_shift_regslice_both #(
    .DataWidth( 8 ))
regslice_both_IN_R_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(IN_R_TKEEP),
    .vld_in(IN_R_TVALID),
    .ack_in(regslice_both_IN_R_V_keep_V_U_ack_in),
    .data_out(IN_R_TKEEP_int_regslice),
    .vld_out(regslice_both_IN_R_V_keep_V_U_vld_out),
    .ack_out(IN_R_TREADY_int_regslice),
    .apdone_blk(regslice_both_IN_R_V_keep_V_U_apdone_blk)
);

fft_shift_regslice_both #(
    .DataWidth( 8 ))
regslice_both_IN_R_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(IN_R_TSTRB),
    .vld_in(IN_R_TVALID),
    .ack_in(regslice_both_IN_R_V_strb_V_U_ack_in),
    .data_out(IN_R_TSTRB_int_regslice),
    .vld_out(regslice_both_IN_R_V_strb_V_U_vld_out),
    .ack_out(IN_R_TREADY_int_regslice),
    .apdone_blk(regslice_both_IN_R_V_strb_V_U_apdone_blk)
);

fft_shift_regslice_both #(
    .DataWidth( 1 ))
regslice_both_IN_R_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(IN_R_TLAST),
    .vld_in(IN_R_TVALID),
    .ack_in(regslice_both_IN_R_V_last_V_U_ack_in),
    .data_out(IN_R_TLAST_int_regslice),
    .vld_out(regslice_both_IN_R_V_last_V_U_vld_out),
    .ack_out(IN_R_TREADY_int_regslice),
    .apdone_blk(regslice_both_IN_R_V_last_V_U_apdone_blk)
);

fft_shift_regslice_both #(
    .DataWidth( 32 ))
regslice_both_OUT_R_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_copy_output_fu_246_OUT_R_TDATA),
    .vld_in(grp_copy_output_fu_246_OUT_R_TVALID),
    .ack_in(OUT_R_TREADY_int_regslice),
    .data_out(OUT_R_TDATA),
    .vld_out(regslice_both_OUT_R_V_data_V_U_vld_out),
    .ack_out(OUT_R_TREADY),
    .apdone_blk(regslice_both_OUT_R_V_data_V_U_apdone_blk)
);

fft_shift_regslice_both #(
    .DataWidth( 4 ))
regslice_both_OUT_R_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_copy_output_fu_246_OUT_R_TKEEP),
    .vld_in(grp_copy_output_fu_246_OUT_R_TVALID),
    .ack_in(regslice_both_OUT_R_V_keep_V_U_ack_in_dummy),
    .data_out(OUT_R_TKEEP),
    .vld_out(regslice_both_OUT_R_V_keep_V_U_vld_out),
    .ack_out(OUT_R_TREADY),
    .apdone_blk(regslice_both_OUT_R_V_keep_V_U_apdone_blk)
);

fft_shift_regslice_both #(
    .DataWidth( 4 ))
regslice_both_OUT_R_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_copy_output_fu_246_OUT_R_TSTRB),
    .vld_in(grp_copy_output_fu_246_OUT_R_TVALID),
    .ack_in(regslice_both_OUT_R_V_strb_V_U_ack_in_dummy),
    .data_out(OUT_R_TSTRB),
    .vld_out(regslice_both_OUT_R_V_strb_V_U_vld_out),
    .ack_out(OUT_R_TREADY),
    .apdone_blk(regslice_both_OUT_R_V_strb_V_U_apdone_blk)
);

fft_shift_regslice_both #(
    .DataWidth( 1 ))
regslice_both_OUT_R_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_copy_output_fu_246_OUT_R_TLAST),
    .vld_in(grp_copy_output_fu_246_OUT_R_TVALID),
    .ack_in(regslice_both_OUT_R_V_last_V_U_ack_in_dummy),
    .data_out(OUT_R_TLAST),
    .vld_out(regslice_both_OUT_R_V_last_V_U_vld_out),
    .ack_out(OUT_R_TREADY),
    .apdone_blk(regslice_both_OUT_R_V_last_V_U_apdone_blk)
);

fft_shift_regslice_both #(
    .DataWidth( 32 ))
regslice_both_OUT_I_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_copy_output_fu_246_OUT_I_TDATA),
    .vld_in(grp_copy_output_fu_246_OUT_I_TVALID),
    .ack_in(OUT_I_TREADY_int_regslice),
    .data_out(OUT_I_TDATA),
    .vld_out(regslice_both_OUT_I_V_data_V_U_vld_out),
    .ack_out(OUT_I_TREADY),
    .apdone_blk(regslice_both_OUT_I_V_data_V_U_apdone_blk)
);

fft_shift_regslice_both #(
    .DataWidth( 4 ))
regslice_both_OUT_I_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_copy_output_fu_246_OUT_I_TKEEP),
    .vld_in(grp_copy_output_fu_246_OUT_I_TVALID),
    .ack_in(regslice_both_OUT_I_V_keep_V_U_ack_in_dummy),
    .data_out(OUT_I_TKEEP),
    .vld_out(regslice_both_OUT_I_V_keep_V_U_vld_out),
    .ack_out(OUT_I_TREADY),
    .apdone_blk(regslice_both_OUT_I_V_keep_V_U_apdone_blk)
);

fft_shift_regslice_both #(
    .DataWidth( 4 ))
regslice_both_OUT_I_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_copy_output_fu_246_OUT_I_TSTRB),
    .vld_in(grp_copy_output_fu_246_OUT_I_TVALID),
    .ack_in(regslice_both_OUT_I_V_strb_V_U_ack_in_dummy),
    .data_out(OUT_I_TSTRB),
    .vld_out(regslice_both_OUT_I_V_strb_V_U_vld_out),
    .ack_out(OUT_I_TREADY),
    .apdone_blk(regslice_both_OUT_I_V_strb_V_U_apdone_blk)
);

fft_shift_regslice_both #(
    .DataWidth( 1 ))
regslice_both_OUT_I_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_copy_output_fu_246_OUT_I_TLAST),
    .vld_in(grp_copy_output_fu_246_OUT_I_TVALID),
    .ack_in(regslice_both_OUT_I_V_last_V_U_ack_in_dummy),
    .data_out(OUT_I_TLAST),
    .vld_out(regslice_both_OUT_I_V_last_V_U_vld_out),
    .ack_out(OUT_I_TREADY),
    .apdone_blk(regslice_both_OUT_I_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state4) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state4);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state7) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state7);
        end else if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_copy_output_fu_246_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            grp_copy_output_fu_246_ap_start_reg <= 1'b1;
        end else if ((grp_copy_output_fu_246_ap_ready == 1'b1)) begin
            grp_copy_output_fu_246_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_1_reg_223 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln16_reg_386 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_1_reg_223 <= add_ln16_reg_381;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_2_reg_235 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln22_fu_350_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        i_2_reg_235 <= add_ln22_fu_344_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_212 <= 8'd0;
    end else if ((~((icmp_ln7_fu_274_p2 == 1'd0) & (1'b0 == IN_R_TVALID_int_regslice)) & (icmp_ln7_fu_274_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_212 <= add_ln7_fu_268_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        add_ln16_reg_381 <= add_ln16_fu_314_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln16_reg_386 <= icmp_ln16_fu_320_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln22_reg_405 <= icmp_ln22_fu_350_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln22_fu_350_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        xor_ln24_reg_414 <= xor_ln24_fu_362_p2;
    end
end

always @ (*) begin
    if (((icmp_ln7_fu_274_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        IN_R_TDATA_blk_n = IN_R_TVALID_int_regslice;
    end else begin
        IN_R_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln7_fu_274_p2 == 1'd0) & (1'b0 == IN_R_TVALID_int_regslice)) & (icmp_ln7_fu_274_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        IN_R_TREADY_int_regslice = 1'b1;
    end else begin
        IN_R_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln16_fu_320_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln22_fu_350_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_OUT_I_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_OUT_R_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln16_reg_386 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_i_1_phi_fu_227_p4 = add_ln16_reg_381;
    end else begin
        ap_phi_mux_i_1_phi_fu_227_p4 = i_1_reg_223;
    end
end

always @ (*) begin
    if ((~((regslice_both_OUT_I_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_OUT_R_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        in_temp_i_address0 = i_2_cast_fu_356_p1;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        in_temp_i_address0 = zext_ln18_fu_332_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        in_temp_i_address0 = i_cast_fu_280_p1;
    end else begin
        in_temp_i_address0 = 'bx;
    end
end

always @ (*) begin
    if (((~((icmp_ln7_fu_274_p2 == 1'd0) & (1'b0 == IN_R_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        in_temp_i_ce0 = 1'b1;
    end else begin
        in_temp_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln7_fu_274_p2 == 1'd0) & (1'b0 == IN_R_TVALID_int_regslice)) & (icmp_ln7_fu_274_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        in_temp_i_we0 = 1'b1;
    end else begin
        in_temp_i_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        in_temp_r_address0 = i_2_cast_fu_356_p1;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        in_temp_r_address0 = zext_ln18_fu_332_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        in_temp_r_address0 = i_cast_fu_280_p1;
    end else begin
        in_temp_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((~((icmp_ln7_fu_274_p2 == 1'd0) & (1'b0 == IN_R_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        in_temp_r_ce0 = 1'b1;
    end else begin
        in_temp_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln7_fu_274_p2 == 1'd0) & (1'b0 == IN_R_TVALID_int_regslice)) & (icmp_ln7_fu_274_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        in_temp_r_we0 = 1'b1;
    end else begin
        in_temp_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        out_temp_i_address0 = zext_ln24_fu_368_p1;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        out_temp_i_address0 = i_1_cast_fu_338_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        out_temp_i_address0 = grp_copy_output_fu_246_OUT_temp_I_address0;
    end else begin
        out_temp_i_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        out_temp_i_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        out_temp_i_ce0 = grp_copy_output_fu_246_OUT_temp_I_ce0;
    end else begin
        out_temp_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln22_reg_405 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln16_reg_386 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        out_temp_i_we0 = 1'b1;
    end else begin
        out_temp_i_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        out_temp_r_address0 = zext_ln24_fu_368_p1;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        out_temp_r_address0 = i_1_cast_fu_338_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        out_temp_r_address0 = grp_copy_output_fu_246_OUT_temp_R_address0;
    end else begin
        out_temp_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        out_temp_r_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        out_temp_r_ce0 = grp_copy_output_fu_246_OUT_temp_R_ce0;
    end else begin
        out_temp_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln22_reg_405 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln16_reg_386 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        out_temp_r_we0 = 1'b1;
    end else begin
        out_temp_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln7_fu_274_p2 == 1'd0) & (1'b0 == IN_R_TVALID_int_regslice)) & (icmp_ln7_fu_274_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((icmp_ln7_fu_274_p2 == 1'd0) & (1'b0 == IN_R_TVALID_int_regslice)) & (icmp_ln7_fu_274_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((icmp_ln16_fu_320_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((icmp_ln16_fu_320_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((icmp_ln22_fu_350_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((icmp_ln22_fu_350_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((grp_copy_output_fu_246_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if ((~((regslice_both_OUT_I_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_OUT_R_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign IN_R_TREADY = regslice_both_IN_R_V_data_V_U_ack_in;

assign OUT_I_TVALID = regslice_both_OUT_I_V_data_V_U_vld_out;

assign OUT_R_TVALID = regslice_both_OUT_R_V_data_V_U_vld_out;

assign add_ln16_fu_314_p2 = (ap_phi_mux_i_1_phi_fu_227_p4 + 7'd1);

assign add_ln22_fu_344_p2 = (i_2_reg_235 + 7'd1);

assign add_ln7_fu_268_p2 = (i_reg_212 + 8'd1);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd6];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11 = ((regslice_both_OUT_I_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_OUT_R_V_data_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((icmp_ln7_fu_274_p2 == 1'd0) & (1'b0 == IN_R_TVALID_int_regslice));
end

assign ap_block_state4_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_copy_output_fu_246_OUT_I_TREADY = (ap_CS_fsm_state10 & OUT_I_TREADY_int_regslice);

assign grp_copy_output_fu_246_OUT_R_TREADY = (ap_CS_fsm_state10 & OUT_R_TREADY_int_regslice);

assign grp_copy_output_fu_246_ap_start = grp_copy_output_fu_246_ap_start_reg;

assign i_1_cast_fu_338_p1 = i_1_reg_223;

assign i_2_cast_fu_356_p1 = i_2_reg_235;

assign i_cast_fu_280_p1 = i_reg_212;

assign icmp_ln16_fu_320_p2 = ((ap_phi_mux_i_1_phi_fu_227_p4 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_350_p2 = ((i_2_reg_235 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_274_p2 = ((i_reg_212 == 8'd128) ? 1'b1 : 1'b0);

assign in_temp_i_d0 = trunc_ln9_1_fu_299_p4;

assign in_temp_r_d0 = trunc_ln9_fu_290_p1;

assign trunc_ln9_1_fu_299_p4 = {{IN_R_TDATA_int_regslice[63:32]}};

assign trunc_ln9_fu_290_p1 = IN_R_TDATA_int_regslice[31:0];

assign xor_ln18_fu_326_p2 = (ap_phi_mux_i_1_phi_fu_227_p4 ^ 7'd64);

assign xor_ln24_fu_362_p2 = (i_2_reg_235 ^ 7'd64);

assign zext_ln18_fu_332_p1 = xor_ln18_fu_326_p2;

assign zext_ln24_fu_368_p1 = xor_ln24_reg_414;

endmodule //fft_shift
