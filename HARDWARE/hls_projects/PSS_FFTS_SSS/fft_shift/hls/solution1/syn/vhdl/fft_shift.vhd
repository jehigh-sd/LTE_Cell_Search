-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft_shift is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    IN_R_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    IN_R_TVALID : IN STD_LOGIC;
    IN_R_TREADY : OUT STD_LOGIC;
    IN_R_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    IN_R_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    IN_R_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    OUT_R_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_R_TVALID : OUT STD_LOGIC;
    OUT_R_TREADY : IN STD_LOGIC;
    OUT_R_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUT_R_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUT_R_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUT_I_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_I_TVALID : OUT STD_LOGIC;
    OUT_I_TREADY : IN STD_LOGIC;
    OUT_I_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUT_I_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUT_I_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of fft_shift is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fft_shift_fft_shift,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=16.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.474000,HLS_SYN_LAT=395,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=103,HLS_SYN_LUT=575,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal IN_R_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln7_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_223 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_2_reg_235 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln7_fu_268_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal add_ln16_fu_314_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln16_reg_381 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state4_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln16_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_386 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln22_fu_344_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state7_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln22_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_405 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln24_fu_362_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln24_reg_414 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal in_temp_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal in_temp_r_ce0 : STD_LOGIC;
    signal in_temp_r_we0 : STD_LOGIC;
    signal in_temp_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_temp_r_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_temp_i_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal in_temp_i_ce0 : STD_LOGIC;
    signal in_temp_i_we0 : STD_LOGIC;
    signal in_temp_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_temp_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_temp_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_temp_r_ce0 : STD_LOGIC;
    signal out_temp_r_we0 : STD_LOGIC;
    signal out_temp_r_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_temp_i_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_temp_i_ce0 : STD_LOGIC;
    signal out_temp_i_we0 : STD_LOGIC;
    signal out_temp_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_output_fu_246_ap_start : STD_LOGIC;
    signal grp_copy_output_fu_246_ap_done : STD_LOGIC;
    signal grp_copy_output_fu_246_ap_idle : STD_LOGIC;
    signal grp_copy_output_fu_246_ap_ready : STD_LOGIC;
    signal grp_copy_output_fu_246_OUT_temp_R_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_copy_output_fu_246_OUT_temp_R_ce0 : STD_LOGIC;
    signal grp_copy_output_fu_246_OUT_temp_I_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_copy_output_fu_246_OUT_temp_I_ce0 : STD_LOGIC;
    signal grp_copy_output_fu_246_OUT_R_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_output_fu_246_OUT_R_TVALID : STD_LOGIC;
    signal grp_copy_output_fu_246_OUT_R_TREADY : STD_LOGIC;
    signal grp_copy_output_fu_246_OUT_R_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_output_fu_246_OUT_R_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_output_fu_246_OUT_R_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_output_fu_246_OUT_I_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_output_fu_246_OUT_I_TVALID : STD_LOGIC;
    signal grp_copy_output_fu_246_OUT_I_TREADY : STD_LOGIC;
    signal grp_copy_output_fu_246_OUT_I_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_output_fu_246_OUT_I_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_output_fu_246_OUT_I_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_212 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_i_1_phi_fu_227_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal grp_copy_output_fu_246_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i_cast_fu_280_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_fu_332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_cast_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast_fu_356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal zext_ln24_fu_368_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln9_fu_290_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln9_1_fu_299_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln18_fu_326_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal regslice_both_OUT_R_V_data_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUT_I_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state11 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal regslice_both_IN_R_V_data_V_U_apdone_blk : STD_LOGIC;
    signal IN_R_TDATA_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal IN_R_TVALID_int_regslice : STD_LOGIC;
    signal IN_R_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_IN_R_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_IN_R_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal IN_R_TKEEP_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_IN_R_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_IN_R_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_IN_R_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal IN_R_TSTRB_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_IN_R_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_IN_R_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_IN_R_V_last_V_U_apdone_blk : STD_LOGIC;
    signal IN_R_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_IN_R_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_IN_R_V_last_V_U_ack_in : STD_LOGIC;
    signal OUT_R_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_OUT_R_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUT_R_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUT_R_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUT_R_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUT_R_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUT_R_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUT_R_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUT_R_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUT_R_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUT_R_V_last_V_U_vld_out : STD_LOGIC;
    signal OUT_I_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_OUT_I_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUT_I_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUT_I_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUT_I_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUT_I_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUT_I_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUT_I_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUT_I_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUT_I_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUT_I_V_last_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fft_shift_copy_output IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        OUT_temp_R_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        OUT_temp_R_ce0 : OUT STD_LOGIC;
        OUT_temp_R_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        OUT_temp_I_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        OUT_temp_I_ce0 : OUT STD_LOGIC;
        OUT_temp_I_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        OUT_R_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUT_R_TVALID : OUT STD_LOGIC;
        OUT_R_TREADY : IN STD_LOGIC;
        OUT_R_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        OUT_R_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        OUT_R_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUT_I_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUT_I_TVALID : OUT STD_LOGIC;
        OUT_I_TREADY : IN STD_LOGIC;
        OUT_I_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        OUT_I_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        OUT_I_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fft_shift_in_temp_r IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_shift_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component fft_shift_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    control_s_axi_U : component fft_shift_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    in_temp_r_U : component fft_shift_in_temp_r
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => in_temp_r_address0,
        ce0 => in_temp_r_ce0,
        we0 => in_temp_r_we0,
        d0 => in_temp_r_d0,
        q0 => in_temp_r_q0);

    in_temp_i_U : component fft_shift_in_temp_r
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => in_temp_i_address0,
        ce0 => in_temp_i_ce0,
        we0 => in_temp_i_we0,
        d0 => in_temp_i_d0,
        q0 => in_temp_i_q0);

    out_temp_r_U : component fft_shift_in_temp_r
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_temp_r_address0,
        ce0 => out_temp_r_ce0,
        we0 => out_temp_r_we0,
        d0 => in_temp_r_q0,
        q0 => out_temp_r_q0);

    out_temp_i_U : component fft_shift_in_temp_r
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_temp_i_address0,
        ce0 => out_temp_i_ce0,
        we0 => out_temp_i_we0,
        d0 => in_temp_i_q0,
        q0 => out_temp_i_q0);

    grp_copy_output_fu_246 : component fft_shift_copy_output
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_copy_output_fu_246_ap_start,
        ap_done => grp_copy_output_fu_246_ap_done,
        ap_idle => grp_copy_output_fu_246_ap_idle,
        ap_ready => grp_copy_output_fu_246_ap_ready,
        OUT_temp_R_address0 => grp_copy_output_fu_246_OUT_temp_R_address0,
        OUT_temp_R_ce0 => grp_copy_output_fu_246_OUT_temp_R_ce0,
        OUT_temp_R_q0 => out_temp_r_q0,
        OUT_temp_I_address0 => grp_copy_output_fu_246_OUT_temp_I_address0,
        OUT_temp_I_ce0 => grp_copy_output_fu_246_OUT_temp_I_ce0,
        OUT_temp_I_q0 => out_temp_i_q0,
        OUT_R_TDATA => grp_copy_output_fu_246_OUT_R_TDATA,
        OUT_R_TVALID => grp_copy_output_fu_246_OUT_R_TVALID,
        OUT_R_TREADY => grp_copy_output_fu_246_OUT_R_TREADY,
        OUT_R_TKEEP => grp_copy_output_fu_246_OUT_R_TKEEP,
        OUT_R_TSTRB => grp_copy_output_fu_246_OUT_R_TSTRB,
        OUT_R_TLAST => grp_copy_output_fu_246_OUT_R_TLAST,
        OUT_I_TDATA => grp_copy_output_fu_246_OUT_I_TDATA,
        OUT_I_TVALID => grp_copy_output_fu_246_OUT_I_TVALID,
        OUT_I_TREADY => grp_copy_output_fu_246_OUT_I_TREADY,
        OUT_I_TKEEP => grp_copy_output_fu_246_OUT_I_TKEEP,
        OUT_I_TSTRB => grp_copy_output_fu_246_OUT_I_TSTRB,
        OUT_I_TLAST => grp_copy_output_fu_246_OUT_I_TLAST);

    regslice_both_IN_R_V_data_V_U : component fft_shift_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => IN_R_TDATA,
        vld_in => IN_R_TVALID,
        ack_in => regslice_both_IN_R_V_data_V_U_ack_in,
        data_out => IN_R_TDATA_int_regslice,
        vld_out => IN_R_TVALID_int_regslice,
        ack_out => IN_R_TREADY_int_regslice,
        apdone_blk => regslice_both_IN_R_V_data_V_U_apdone_blk);

    regslice_both_IN_R_V_keep_V_U : component fft_shift_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => IN_R_TKEEP,
        vld_in => IN_R_TVALID,
        ack_in => regslice_both_IN_R_V_keep_V_U_ack_in,
        data_out => IN_R_TKEEP_int_regslice,
        vld_out => regslice_both_IN_R_V_keep_V_U_vld_out,
        ack_out => IN_R_TREADY_int_regslice,
        apdone_blk => regslice_both_IN_R_V_keep_V_U_apdone_blk);

    regslice_both_IN_R_V_strb_V_U : component fft_shift_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => IN_R_TSTRB,
        vld_in => IN_R_TVALID,
        ack_in => regslice_both_IN_R_V_strb_V_U_ack_in,
        data_out => IN_R_TSTRB_int_regslice,
        vld_out => regslice_both_IN_R_V_strb_V_U_vld_out,
        ack_out => IN_R_TREADY_int_regslice,
        apdone_blk => regslice_both_IN_R_V_strb_V_U_apdone_blk);

    regslice_both_IN_R_V_last_V_U : component fft_shift_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => IN_R_TLAST,
        vld_in => IN_R_TVALID,
        ack_in => regslice_both_IN_R_V_last_V_U_ack_in,
        data_out => IN_R_TLAST_int_regslice,
        vld_out => regslice_both_IN_R_V_last_V_U_vld_out,
        ack_out => IN_R_TREADY_int_regslice,
        apdone_blk => regslice_both_IN_R_V_last_V_U_apdone_blk);

    regslice_both_OUT_R_V_data_V_U : component fft_shift_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_copy_output_fu_246_OUT_R_TDATA,
        vld_in => grp_copy_output_fu_246_OUT_R_TVALID,
        ack_in => OUT_R_TREADY_int_regslice,
        data_out => OUT_R_TDATA,
        vld_out => regslice_both_OUT_R_V_data_V_U_vld_out,
        ack_out => OUT_R_TREADY,
        apdone_blk => regslice_both_OUT_R_V_data_V_U_apdone_blk);

    regslice_both_OUT_R_V_keep_V_U : component fft_shift_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_copy_output_fu_246_OUT_R_TKEEP,
        vld_in => grp_copy_output_fu_246_OUT_R_TVALID,
        ack_in => regslice_both_OUT_R_V_keep_V_U_ack_in_dummy,
        data_out => OUT_R_TKEEP,
        vld_out => regslice_both_OUT_R_V_keep_V_U_vld_out,
        ack_out => OUT_R_TREADY,
        apdone_blk => regslice_both_OUT_R_V_keep_V_U_apdone_blk);

    regslice_both_OUT_R_V_strb_V_U : component fft_shift_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_copy_output_fu_246_OUT_R_TSTRB,
        vld_in => grp_copy_output_fu_246_OUT_R_TVALID,
        ack_in => regslice_both_OUT_R_V_strb_V_U_ack_in_dummy,
        data_out => OUT_R_TSTRB,
        vld_out => regslice_both_OUT_R_V_strb_V_U_vld_out,
        ack_out => OUT_R_TREADY,
        apdone_blk => regslice_both_OUT_R_V_strb_V_U_apdone_blk);

    regslice_both_OUT_R_V_last_V_U : component fft_shift_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_copy_output_fu_246_OUT_R_TLAST,
        vld_in => grp_copy_output_fu_246_OUT_R_TVALID,
        ack_in => regslice_both_OUT_R_V_last_V_U_ack_in_dummy,
        data_out => OUT_R_TLAST,
        vld_out => regslice_both_OUT_R_V_last_V_U_vld_out,
        ack_out => OUT_R_TREADY,
        apdone_blk => regslice_both_OUT_R_V_last_V_U_apdone_blk);

    regslice_both_OUT_I_V_data_V_U : component fft_shift_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_copy_output_fu_246_OUT_I_TDATA,
        vld_in => grp_copy_output_fu_246_OUT_I_TVALID,
        ack_in => OUT_I_TREADY_int_regslice,
        data_out => OUT_I_TDATA,
        vld_out => regslice_both_OUT_I_V_data_V_U_vld_out,
        ack_out => OUT_I_TREADY,
        apdone_blk => regslice_both_OUT_I_V_data_V_U_apdone_blk);

    regslice_both_OUT_I_V_keep_V_U : component fft_shift_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_copy_output_fu_246_OUT_I_TKEEP,
        vld_in => grp_copy_output_fu_246_OUT_I_TVALID,
        ack_in => regslice_both_OUT_I_V_keep_V_U_ack_in_dummy,
        data_out => OUT_I_TKEEP,
        vld_out => regslice_both_OUT_I_V_keep_V_U_vld_out,
        ack_out => OUT_I_TREADY,
        apdone_blk => regslice_both_OUT_I_V_keep_V_U_apdone_blk);

    regslice_both_OUT_I_V_strb_V_U : component fft_shift_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_copy_output_fu_246_OUT_I_TSTRB,
        vld_in => grp_copy_output_fu_246_OUT_I_TVALID,
        ack_in => regslice_both_OUT_I_V_strb_V_U_ack_in_dummy,
        data_out => OUT_I_TSTRB,
        vld_out => regslice_both_OUT_I_V_strb_V_U_vld_out,
        ack_out => OUT_I_TREADY,
        apdone_blk => regslice_both_OUT_I_V_strb_V_U_apdone_blk);

    regslice_both_OUT_I_V_last_V_U : component fft_shift_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_copy_output_fu_246_OUT_I_TLAST,
        vld_in => grp_copy_output_fu_246_OUT_I_TVALID,
        ack_in => regslice_both_OUT_I_V_last_V_U_ack_in_dummy,
        data_out => OUT_I_TLAST,
        vld_out => regslice_both_OUT_I_V_last_V_U_vld_out,
        ack_out => OUT_I_TREADY,
        apdone_blk => regslice_both_OUT_I_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state4) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state4);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state7) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state7);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_copy_output_fu_246_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_copy_output_fu_246_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_copy_output_fu_246_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_copy_output_fu_246_ap_ready = ap_const_logic_1)) then 
                    grp_copy_output_fu_246_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_1_reg_223 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln16_reg_386 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_1_reg_223 <= add_ln16_reg_381;
            end if; 
        end if;
    end process;

    i_2_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_2_reg_235 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln22_fu_350_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                i_2_reg_235 <= add_ln22_fu_344_p2;
            end if; 
        end if;
    end process;

    i_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_212 <= ap_const_lv8_0;
            elsif ((not(((icmp_ln7_fu_274_p2 = ap_const_lv1_0) and (ap_const_logic_0 = IN_R_TVALID_int_regslice))) and (icmp_ln7_fu_274_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_212 <= add_ln7_fu_268_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                add_ln16_reg_381 <= add_ln16_fu_314_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln16_reg_386 <= icmp_ln16_fu_320_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln22_reg_405 <= icmp_ln22_fu_350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln22_fu_350_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                xor_ln24_reg_414 <= xor_ln24_fu_362_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln7_fu_274_p2, ap_enable_reg_pp1_iter0, icmp_ln16_fu_320_p2, ap_enable_reg_pp2_iter0, icmp_ln22_fu_350_p2, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, grp_copy_output_fu_246_ap_done, ap_CS_fsm_state10, ap_CS_fsm_state11, regslice_both_OUT_R_V_data_V_U_apdone_blk, regslice_both_OUT_I_V_data_V_U_apdone_blk, IN_R_TVALID_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln7_fu_274_p2 = ap_const_lv1_0) and (ap_const_logic_0 = IN_R_TVALID_int_regslice))) and (icmp_ln7_fu_274_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((icmp_ln7_fu_274_p2 = ap_const_lv1_0) and (ap_const_logic_0 = IN_R_TVALID_int_regslice))) and (icmp_ln7_fu_274_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((icmp_ln16_fu_320_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((icmp_ln16_fu_320_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((icmp_ln22_fu_350_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((icmp_ln22_fu_350_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_copy_output_fu_246_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if ((not(((regslice_both_OUT_I_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_OUT_R_V_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;

    IN_R_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, icmp_ln7_fu_274_p2, IN_R_TVALID_int_regslice)
    begin
        if (((icmp_ln7_fu_274_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            IN_R_TDATA_blk_n <= IN_R_TVALID_int_regslice;
        else 
            IN_R_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    IN_R_TREADY <= regslice_both_IN_R_V_data_V_U_ack_in;

    IN_R_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state2, icmp_ln7_fu_274_p2, IN_R_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln7_fu_274_p2 = ap_const_lv1_0) and (ap_const_logic_0 = IN_R_TVALID_int_regslice))) and (icmp_ln7_fu_274_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            IN_R_TREADY_int_regslice <= ap_const_logic_1;
        else 
            IN_R_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    OUT_I_TVALID <= regslice_both_OUT_I_V_data_V_U_vld_out;
    OUT_R_TVALID <= regslice_both_OUT_R_V_data_V_U_vld_out;
    add_ln16_fu_314_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_1_phi_fu_227_p4) + unsigned(ap_const_lv7_1));
    add_ln22_fu_344_p2 <= std_logic_vector(unsigned(i_2_reg_235) + unsigned(ap_const_lv7_1));
    add_ln7_fu_268_p2 <= std_logic_vector(unsigned(i_reg_212) + unsigned(ap_const_lv8_1));
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(7);
    ap_CS_fsm_state11 <= ap_CS_fsm(8);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state9 <= ap_CS_fsm(6);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_assign_proc : process(regslice_both_OUT_R_V_data_V_U_apdone_blk, regslice_both_OUT_I_V_data_V_U_apdone_blk)
    begin
                ap_block_state11 <= ((regslice_both_OUT_I_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_OUT_R_V_data_V_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(icmp_ln7_fu_274_p2, IN_R_TVALID_int_regslice)
    begin
                ap_block_state2 <= ((icmp_ln7_fu_274_p2 = ap_const_lv1_0) and (ap_const_logic_0 = IN_R_TVALID_int_regslice));
    end process;

        ap_block_state4_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state4_assign_proc : process(icmp_ln16_fu_320_p2)
    begin
        if ((icmp_ln16_fu_320_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state7_assign_proc : process(icmp_ln22_fu_350_p2)
    begin
        if ((icmp_ln22_fu_350_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state11, regslice_both_OUT_R_V_data_V_U_apdone_blk, regslice_both_OUT_I_V_data_V_U_apdone_blk)
    begin
        if ((not(((regslice_both_OUT_I_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_OUT_R_V_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_1_phi_fu_227_p4_assign_proc : process(i_1_reg_223, add_ln16_reg_381, ap_CS_fsm_pp1_stage0, icmp_ln16_reg_386, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln16_reg_386 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_i_1_phi_fu_227_p4 <= add_ln16_reg_381;
        else 
            ap_phi_mux_i_1_phi_fu_227_p4 <= i_1_reg_223;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11, regslice_both_OUT_R_V_data_V_U_apdone_blk, regslice_both_OUT_I_V_data_V_U_apdone_blk)
    begin
        if ((not(((regslice_both_OUT_I_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_OUT_R_V_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_copy_output_fu_246_OUT_I_TREADY <= (ap_CS_fsm_state10 and OUT_I_TREADY_int_regslice);
    grp_copy_output_fu_246_OUT_R_TREADY <= (ap_CS_fsm_state10 and OUT_R_TREADY_int_regslice);
    grp_copy_output_fu_246_ap_start <= grp_copy_output_fu_246_ap_start_reg;
    i_1_cast_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_223),64));
    i_2_cast_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_235),64));
    i_cast_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_212),64));
    icmp_ln16_fu_320_p2 <= "1" when (ap_phi_mux_i_1_phi_fu_227_p4 = ap_const_lv7_40) else "0";
    icmp_ln22_fu_350_p2 <= "1" when (i_2_reg_235 = ap_const_lv7_40) else "0";
    icmp_ln7_fu_274_p2 <= "1" when (i_reg_212 = ap_const_lv8_80) else "0";

    in_temp_i_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp1_stage0, i_cast_fu_280_p1, zext_ln18_fu_332_p1, i_2_cast_fu_356_p1, ap_block_pp2_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            in_temp_i_address0 <= i_2_cast_fu_356_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            in_temp_i_address0 <= zext_ln18_fu_332_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in_temp_i_address0 <= i_cast_fu_280_p1(7 - 1 downto 0);
        else 
            in_temp_i_address0 <= "XXXXXXX";
        end if; 
    end process;


    in_temp_i_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln7_fu_274_p2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, IN_R_TVALID_int_regslice)
    begin
        if (((not(((icmp_ln7_fu_274_p2 = ap_const_lv1_0) and (ap_const_logic_0 = IN_R_TVALID_int_regslice))) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            in_temp_i_ce0 <= ap_const_logic_1;
        else 
            in_temp_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_temp_i_d0 <= trunc_ln9_1_fu_299_p4;

    in_temp_i_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln7_fu_274_p2, IN_R_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln7_fu_274_p2 = ap_const_lv1_0) and (ap_const_logic_0 = IN_R_TVALID_int_regslice))) and (icmp_ln7_fu_274_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_temp_i_we0 <= ap_const_logic_1;
        else 
            in_temp_i_we0 <= ap_const_logic_0;
        end if; 
    end process;


    in_temp_r_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp1_stage0, i_cast_fu_280_p1, zext_ln18_fu_332_p1, i_2_cast_fu_356_p1, ap_block_pp2_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            in_temp_r_address0 <= i_2_cast_fu_356_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            in_temp_r_address0 <= zext_ln18_fu_332_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in_temp_r_address0 <= i_cast_fu_280_p1(7 - 1 downto 0);
        else 
            in_temp_r_address0 <= "XXXXXXX";
        end if; 
    end process;


    in_temp_r_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln7_fu_274_p2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, IN_R_TVALID_int_regslice)
    begin
        if (((not(((icmp_ln7_fu_274_p2 = ap_const_lv1_0) and (ap_const_logic_0 = IN_R_TVALID_int_regslice))) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            in_temp_r_ce0 <= ap_const_logic_1;
        else 
            in_temp_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_temp_r_d0 <= trunc_ln9_fu_290_p1;

    in_temp_r_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln7_fu_274_p2, IN_R_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln7_fu_274_p2 = ap_const_lv1_0) and (ap_const_logic_0 = IN_R_TVALID_int_regslice))) and (icmp_ln7_fu_274_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_temp_r_we0 <= ap_const_logic_1;
        else 
            in_temp_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_temp_i_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, grp_copy_output_fu_246_OUT_temp_I_address0, ap_block_pp1_stage0, ap_CS_fsm_state10, i_1_cast_fu_338_p1, ap_block_pp2_stage0, zext_ln24_fu_368_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            out_temp_i_address0 <= zext_ln24_fu_368_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            out_temp_i_address0 <= i_1_cast_fu_338_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            out_temp_i_address0 <= grp_copy_output_fu_246_OUT_temp_I_address0;
        else 
            out_temp_i_address0 <= "XXXXXXX";
        end if; 
    end process;


    out_temp_i_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, grp_copy_output_fu_246_OUT_temp_I_ce0, ap_CS_fsm_state10)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            out_temp_i_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            out_temp_i_ce0 <= grp_copy_output_fu_246_OUT_temp_I_ce0;
        else 
            out_temp_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_temp_i_we0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, icmp_ln16_reg_386, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, icmp_ln22_reg_405, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln22_reg_405 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln16_reg_386 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            out_temp_i_we0 <= ap_const_logic_1;
        else 
            out_temp_i_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_temp_r_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, grp_copy_output_fu_246_OUT_temp_R_address0, ap_block_pp1_stage0, ap_CS_fsm_state10, i_1_cast_fu_338_p1, ap_block_pp2_stage0, zext_ln24_fu_368_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            out_temp_r_address0 <= zext_ln24_fu_368_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            out_temp_r_address0 <= i_1_cast_fu_338_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            out_temp_r_address0 <= grp_copy_output_fu_246_OUT_temp_R_address0;
        else 
            out_temp_r_address0 <= "XXXXXXX";
        end if; 
    end process;


    out_temp_r_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, grp_copy_output_fu_246_OUT_temp_R_ce0, ap_CS_fsm_state10)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            out_temp_r_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            out_temp_r_ce0 <= grp_copy_output_fu_246_OUT_temp_R_ce0;
        else 
            out_temp_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_temp_r_we0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, icmp_ln16_reg_386, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, icmp_ln22_reg_405, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln22_reg_405 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln16_reg_386 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            out_temp_r_we0 <= ap_const_logic_1;
        else 
            out_temp_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln9_1_fu_299_p4 <= IN_R_TDATA_int_regslice(63 downto 32);
    trunc_ln9_fu_290_p1 <= IN_R_TDATA_int_regslice(32 - 1 downto 0);
    xor_ln18_fu_326_p2 <= (ap_phi_mux_i_1_phi_fu_227_p4 xor ap_const_lv7_40);
    xor_ln24_fu_362_p2 <= (i_2_reg_235 xor ap_const_lv7_40);
    zext_ln18_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln18_fu_326_p2),64));
    zext_ln24_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln24_reg_414),64));
end behav;
