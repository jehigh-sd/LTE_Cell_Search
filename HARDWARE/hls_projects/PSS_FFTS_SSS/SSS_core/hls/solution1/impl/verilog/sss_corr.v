// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sss_corr_sss_corr,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=16.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=21.088000,HLS_SYN_LAT=69021,HLS_SYN_TPT=none,HLS_SYN_MEM=246,HLS_SYN_DSP=0,HLS_SYN_FF=4030,HLS_SYN_LUT=8618,HLS_VERSION=2020_2}" *)

module sss_corr (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        IN_R_TDATA,
        IN_R_TVALID,
        IN_R_TREADY,
        IN_R_TKEEP,
        IN_R_TSTRB,
        IN_R_TLAST,
        IN_I_TDATA,
        IN_I_TVALID,
        IN_I_TREADY,
        IN_I_TKEEP,
        IN_I_TSTRB,
        IN_I_TLAST,
        pss_id_TDATA,
        pss_id_TVALID,
        pss_id_TREADY,
        pss_id_TKEEP,
        pss_id_TSTRB,
        pss_id_TLAST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt,
        s_axi_control_r_AWVALID,
        s_axi_control_r_AWREADY,
        s_axi_control_r_AWADDR,
        s_axi_control_r_WVALID,
        s_axi_control_r_WREADY,
        s_axi_control_r_WDATA,
        s_axi_control_r_WSTRB,
        s_axi_control_r_ARVALID,
        s_axi_control_r_ARREADY,
        s_axi_control_r_ARADDR,
        s_axi_control_r_RVALID,
        s_axi_control_r_RREADY,
        s_axi_control_r_RDATA,
        s_axi_control_r_RRESP,
        s_axi_control_r_BVALID,
        s_axi_control_r_BREADY,
        s_axi_control_r_BRESP
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_pp1_stage0 = 7'd16;
parameter    ap_ST_fsm_pp1_stage1 = 7'd32;
parameter    ap_ST_fsm_state14 = 7'd64;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_R_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_R_ADDR_WIDTH = 6;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_CONTROL_R_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input  [31:0] IN_R_TDATA;
input   IN_R_TVALID;
output   IN_R_TREADY;
input  [3:0] IN_R_TKEEP;
input  [3:0] IN_R_TSTRB;
input  [0:0] IN_R_TLAST;
input  [31:0] IN_I_TDATA;
input   IN_I_TVALID;
output   IN_I_TREADY;
input  [3:0] IN_I_TKEEP;
input  [3:0] IN_I_TSTRB;
input  [0:0] IN_I_TLAST;
input  [31:0] pss_id_TDATA;
input   pss_id_TVALID;
output   pss_id_TREADY;
input  [3:0] pss_id_TKEEP;
input  [3:0] pss_id_TSTRB;
input  [0:0] pss_id_TLAST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;
input   s_axi_control_r_AWVALID;
output   s_axi_control_r_AWREADY;
input  [C_S_AXI_CONTROL_R_ADDR_WIDTH - 1:0] s_axi_control_r_AWADDR;
input   s_axi_control_r_WVALID;
output   s_axi_control_r_WREADY;
input  [C_S_AXI_CONTROL_R_DATA_WIDTH - 1:0] s_axi_control_r_WDATA;
input  [C_S_AXI_CONTROL_R_WSTRB_WIDTH - 1:0] s_axi_control_r_WSTRB;
input   s_axi_control_r_ARVALID;
output   s_axi_control_r_ARREADY;
input  [C_S_AXI_CONTROL_R_ADDR_WIDTH - 1:0] s_axi_control_r_ARADDR;
output   s_axi_control_r_RVALID;
input   s_axi_control_r_RREADY;
output  [C_S_AXI_CONTROL_R_DATA_WIDTH - 1:0] s_axi_control_r_RDATA;
output  [1:0] s_axi_control_r_RRESP;
output   s_axi_control_r_BVALID;
input   s_axi_control_r_BREADY;
output  [1:0] s_axi_control_r_BRESP;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] OUT1;
wire   [63:0] OUT2;
reg   [7:0] OUT_1_address0;
reg    OUT_1_ce0;
reg    OUT_1_we0;
wire   [31:0] OUT_1_q0;
reg   [7:0] OUT_2_address0;
reg    OUT_2_ce0;
reg    OUT_2_we0;
wire   [31:0] OUT_2_q0;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage1;
reg   [0:0] icmp_ln164_reg_493;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg    gmem_blk_n_B;
reg    ap_enable_reg_pp1_iter3;
reg   [0:0] icmp_ln164_reg_493_pp1_iter3_reg;
reg   [0:0] icmp_ln164_reg_493_pp1_iter1_reg;
reg    ap_enable_reg_pp1_iter4;
reg    IN_R_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln13_fu_331_p2;
reg    IN_I_TDATA_blk_n;
reg    pss_id_TDATA_blk_n;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg   [63:0] gmem_AWADDR;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg   [31:0] gmem_WDATA;
wire    gmem_ARREADY;
wire    gmem_RVALID;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [7:0] i_1_reg_287;
reg   [63:0] OUT2_read_reg_445;
reg   [63:0] OUT1_read_reg_450;
reg   [31:0] temp_data_reg_455;
wire   [7:0] add_ln13_fu_325_p2;
reg    ap_block_state2;
reg   [61:0] trunc_ln_reg_468;
wire    ap_CS_fsm_state3;
reg   [61:0] trunc_ln164_1_reg_473;
wire  signed [62:0] sext_ln164_fu_379_p1;
reg  signed [62:0] sext_ln164_reg_478;
wire    ap_CS_fsm_state4;
wire  signed [62:0] sext_ln164_1_fu_382_p1;
reg  signed [62:0] sext_ln164_1_reg_483;
wire   [7:0] add_ln164_fu_385_p2;
reg   [7:0] add_ln164_reg_488;
wire    ap_block_state5_pp1_stage0_iter0;
wire    ap_block_state7_pp1_stage0_iter1;
reg    ap_block_state7_io;
wire    ap_block_state9_pp1_stage0_iter2;
wire    ap_block_state11_pp1_stage0_iter3;
reg    ap_block_state13_pp1_stage0_iter4;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln164_fu_391_p2;
reg   [0:0] icmp_ln164_reg_493_pp1_iter2_reg;
reg   [63:0] gmem_addr_reg_502;
reg   [63:0] gmem_addr_1_reg_513;
reg   [31:0] OUT_1_load_reg_519;
wire    ap_block_state6_pp1_stage1_iter0;
reg    ap_block_state6_io;
wire    ap_block_state8_pp1_stage1_iter1;
reg    ap_block_state8_io;
wire    ap_block_state10_pp1_stage1_iter2;
reg    ap_block_state12_pp1_stage1_iter3;
reg    ap_block_pp1_stage1_11001;
reg   [31:0] OUT_2_load_reg_524;
wire    grp_get_sss_id_fu_298_ap_ready;
wire    grp_get_sss_id_fu_298_ap_done;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state5;
reg    ap_block_pp1_stage1_subdone;
reg    ap_enable_reg_pp1_iter2;
reg   [6:0] IN_real_address0;
reg    IN_real_ce0;
reg    IN_real_we0;
wire   [31:0] IN_real_d0;
wire   [31:0] IN_real_q0;
reg   [6:0] IN_imag_address0;
reg    IN_imag_ce0;
reg    IN_imag_we0;
wire   [31:0] IN_imag_d0;
wire   [31:0] IN_imag_q0;
wire    grp_get_sss_id_fu_298_ap_start;
wire    grp_get_sss_id_fu_298_ap_idle;
wire   [6:0] grp_get_sss_id_fu_298_IN_R_address0;
wire    grp_get_sss_id_fu_298_IN_R_ce0;
wire   [6:0] grp_get_sss_id_fu_298_IN_I_address0;
wire    grp_get_sss_id_fu_298_IN_I_ce0;
wire   [7:0] grp_get_sss_id_fu_298_OUT_1_address0;
wire    grp_get_sss_id_fu_298_OUT_1_ce0;
wire    grp_get_sss_id_fu_298_OUT_1_we0;
wire   [31:0] grp_get_sss_id_fu_298_OUT_1_d0;
wire   [7:0] grp_get_sss_id_fu_298_OUT_2_address0;
wire    grp_get_sss_id_fu_298_OUT_2_ce0;
wire    grp_get_sss_id_fu_298_OUT_2_we0;
wire   [31:0] grp_get_sss_id_fu_298_OUT_2_d0;
reg   [7:0] i_reg_276;
reg    ap_block_state1;
reg   [7:0] ap_phi_mux_i_1_phi_fu_291_p4;
reg    grp_get_sss_id_fu_298_ap_start_reg;
wire   [63:0] i_cast_fu_337_p1;
wire   [63:0] i_1_cast1_fu_397_p1;
wire  signed [63:0] sext_ln166_fu_412_p1;
wire  signed [63:0] sext_ln167_fu_427_p1;
wire   [31:0] bitcast_ln166_fu_437_p1;
reg    ap_block_pp1_stage0_01001;
wire   [31:0] bitcast_ln167_fu_441_p1;
reg    ap_block_pp1_stage1_01001;
wire   [62:0] i_1_cast_fu_403_p1;
wire   [62:0] add_ln166_fu_407_p2;
wire   [62:0] add_ln167_fu_422_p2;
wire    ap_CS_fsm_state14;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    regslice_both_IN_R_V_data_V_U_apdone_blk;
wire   [31:0] IN_R_TDATA_int_regslice;
wire    IN_R_TVALID_int_regslice;
reg    IN_R_TREADY_int_regslice;
wire    regslice_both_IN_R_V_data_V_U_ack_in;
wire    regslice_both_IN_R_V_keep_V_U_apdone_blk;
wire   [3:0] IN_R_TKEEP_int_regslice;
wire    regslice_both_IN_R_V_keep_V_U_vld_out;
wire    regslice_both_IN_R_V_keep_V_U_ack_in;
wire    regslice_both_IN_R_V_strb_V_U_apdone_blk;
wire   [3:0] IN_R_TSTRB_int_regslice;
wire    regslice_both_IN_R_V_strb_V_U_vld_out;
wire    regslice_both_IN_R_V_strb_V_U_ack_in;
wire    regslice_both_IN_R_V_last_V_U_apdone_blk;
wire   [0:0] IN_R_TLAST_int_regslice;
wire    regslice_both_IN_R_V_last_V_U_vld_out;
wire    regslice_both_IN_R_V_last_V_U_ack_in;
wire    regslice_both_IN_I_V_data_V_U_apdone_blk;
wire   [31:0] IN_I_TDATA_int_regslice;
wire    IN_I_TVALID_int_regslice;
reg    IN_I_TREADY_int_regslice;
wire    regslice_both_IN_I_V_data_V_U_ack_in;
wire    regslice_both_IN_I_V_keep_V_U_apdone_blk;
wire   [3:0] IN_I_TKEEP_int_regslice;
wire    regslice_both_IN_I_V_keep_V_U_vld_out;
wire    regslice_both_IN_I_V_keep_V_U_ack_in;
wire    regslice_both_IN_I_V_strb_V_U_apdone_blk;
wire   [3:0] IN_I_TSTRB_int_regslice;
wire    regslice_both_IN_I_V_strb_V_U_vld_out;
wire    regslice_both_IN_I_V_strb_V_U_ack_in;
wire    regslice_both_IN_I_V_last_V_U_apdone_blk;
wire   [0:0] IN_I_TLAST_int_regslice;
wire    regslice_both_IN_I_V_last_V_U_vld_out;
wire    regslice_both_IN_I_V_last_V_U_ack_in;
wire    regslice_both_pss_id_V_data_V_U_apdone_blk;
wire   [31:0] pss_id_TDATA_int_regslice;
wire    pss_id_TVALID_int_regslice;
reg    pss_id_TREADY_int_regslice;
wire    regslice_both_pss_id_V_data_V_U_ack_in;
wire    regslice_both_pss_id_V_keep_V_U_apdone_blk;
wire   [3:0] pss_id_TKEEP_int_regslice;
wire    regslice_both_pss_id_V_keep_V_U_vld_out;
wire    regslice_both_pss_id_V_keep_V_U_ack_in;
wire    regslice_both_pss_id_V_strb_V_U_apdone_blk;
wire   [3:0] pss_id_TSTRB_int_regslice;
wire    regslice_both_pss_id_V_strb_V_U_vld_out;
wire    regslice_both_pss_id_V_strb_V_U_ack_in;
wire    regslice_both_pss_id_V_last_V_U_apdone_blk;
wire   [0:0] pss_id_TLAST_int_regslice;
wire    regslice_both_pss_id_V_last_V_U_vld_out;
wire    regslice_both_pss_id_V_last_V_U_ack_in;
reg    ap_condition_568;
reg    ap_condition_507;
reg    ap_condition_830;
reg    ap_condition_834;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 grp_get_sss_id_fu_298_ap_start_reg = 1'b0;
end

sss_corr_OUT_1 #(
    .DataWidth( 32 ),
    .AddressRange( 168 ),
    .AddressWidth( 8 ))
OUT_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(OUT_1_address0),
    .ce0(OUT_1_ce0),
    .we0(OUT_1_we0),
    .d0(grp_get_sss_id_fu_298_OUT_1_d0),
    .q0(OUT_1_q0)
);

sss_corr_OUT_1 #(
    .DataWidth( 32 ),
    .AddressRange( 168 ),
    .AddressWidth( 8 ))
OUT_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(OUT_2_address0),
    .ce0(OUT_2_ce0),
    .we0(OUT_2_we0),
    .d0(grp_get_sss_id_fu_298_OUT_2_d0),
    .q0(OUT_2_q0)
);

sss_corr_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

sss_corr_control_r_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_R_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_R_DATA_WIDTH ))
control_r_s_axi_U(
    .AWVALID(s_axi_control_r_AWVALID),
    .AWREADY(s_axi_control_r_AWREADY),
    .AWADDR(s_axi_control_r_AWADDR),
    .WVALID(s_axi_control_r_WVALID),
    .WREADY(s_axi_control_r_WREADY),
    .WDATA(s_axi_control_r_WDATA),
    .WSTRB(s_axi_control_r_WSTRB),
    .ARVALID(s_axi_control_r_ARVALID),
    .ARREADY(s_axi_control_r_ARREADY),
    .ARADDR(s_axi_control_r_ARADDR),
    .RVALID(s_axi_control_r_RVALID),
    .RREADY(s_axi_control_r_RREADY),
    .RDATA(s_axi_control_r_RDATA),
    .RRESP(s_axi_control_r_RRESP),
    .BVALID(s_axi_control_r_BVALID),
    .BREADY(s_axi_control_r_BREADY),
    .BRESP(s_axi_control_r_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .OUT1(OUT1),
    .OUT2(OUT2)
);

sss_corr_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(gmem_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

sss_corr_IN_real #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
IN_real_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(IN_real_address0),
    .ce0(IN_real_ce0),
    .we0(IN_real_we0),
    .d0(IN_real_d0),
    .q0(IN_real_q0)
);

sss_corr_IN_real #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
IN_imag_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(IN_imag_address0),
    .ce0(IN_imag_ce0),
    .we0(IN_imag_we0),
    .d0(IN_imag_d0),
    .q0(IN_imag_q0)
);

sss_corr_get_sss_id grp_get_sss_id_fu_298(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_get_sss_id_fu_298_ap_start),
    .ap_done(grp_get_sss_id_fu_298_ap_done),
    .ap_idle(grp_get_sss_id_fu_298_ap_idle),
    .ap_ready(grp_get_sss_id_fu_298_ap_ready),
    .IN_R_address0(grp_get_sss_id_fu_298_IN_R_address0),
    .IN_R_ce0(grp_get_sss_id_fu_298_IN_R_ce0),
    .IN_R_q0(IN_real_q0),
    .IN_I_address0(grp_get_sss_id_fu_298_IN_I_address0),
    .IN_I_ce0(grp_get_sss_id_fu_298_IN_I_ce0),
    .IN_I_q0(IN_imag_q0),
    .pss_id(temp_data_reg_455),
    .OUT_1_address0(grp_get_sss_id_fu_298_OUT_1_address0),
    .OUT_1_ce0(grp_get_sss_id_fu_298_OUT_1_ce0),
    .OUT_1_we0(grp_get_sss_id_fu_298_OUT_1_we0),
    .OUT_1_d0(grp_get_sss_id_fu_298_OUT_1_d0),
    .OUT_2_address0(grp_get_sss_id_fu_298_OUT_2_address0),
    .OUT_2_ce0(grp_get_sss_id_fu_298_OUT_2_ce0),
    .OUT_2_we0(grp_get_sss_id_fu_298_OUT_2_we0),
    .OUT_2_d0(grp_get_sss_id_fu_298_OUT_2_d0)
);

sss_corr_regslice_both #(
    .DataWidth( 32 ))
regslice_both_IN_R_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(IN_R_TDATA),
    .vld_in(IN_R_TVALID),
    .ack_in(regslice_both_IN_R_V_data_V_U_ack_in),
    .data_out(IN_R_TDATA_int_regslice),
    .vld_out(IN_R_TVALID_int_regslice),
    .ack_out(IN_R_TREADY_int_regslice),
    .apdone_blk(regslice_both_IN_R_V_data_V_U_apdone_blk)
);

sss_corr_regslice_both #(
    .DataWidth( 4 ))
regslice_both_IN_R_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(IN_R_TKEEP),
    .vld_in(IN_R_TVALID),
    .ack_in(regslice_both_IN_R_V_keep_V_U_ack_in),
    .data_out(IN_R_TKEEP_int_regslice),
    .vld_out(regslice_both_IN_R_V_keep_V_U_vld_out),
    .ack_out(IN_R_TREADY_int_regslice),
    .apdone_blk(regslice_both_IN_R_V_keep_V_U_apdone_blk)
);

sss_corr_regslice_both #(
    .DataWidth( 4 ))
regslice_both_IN_R_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(IN_R_TSTRB),
    .vld_in(IN_R_TVALID),
    .ack_in(regslice_both_IN_R_V_strb_V_U_ack_in),
    .data_out(IN_R_TSTRB_int_regslice),
    .vld_out(regslice_both_IN_R_V_strb_V_U_vld_out),
    .ack_out(IN_R_TREADY_int_regslice),
    .apdone_blk(regslice_both_IN_R_V_strb_V_U_apdone_blk)
);

sss_corr_regslice_both #(
    .DataWidth( 1 ))
regslice_both_IN_R_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(IN_R_TLAST),
    .vld_in(IN_R_TVALID),
    .ack_in(regslice_both_IN_R_V_last_V_U_ack_in),
    .data_out(IN_R_TLAST_int_regslice),
    .vld_out(regslice_both_IN_R_V_last_V_U_vld_out),
    .ack_out(IN_R_TREADY_int_regslice),
    .apdone_blk(regslice_both_IN_R_V_last_V_U_apdone_blk)
);

sss_corr_regslice_both #(
    .DataWidth( 32 ))
regslice_both_IN_I_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(IN_I_TDATA),
    .vld_in(IN_I_TVALID),
    .ack_in(regslice_both_IN_I_V_data_V_U_ack_in),
    .data_out(IN_I_TDATA_int_regslice),
    .vld_out(IN_I_TVALID_int_regslice),
    .ack_out(IN_I_TREADY_int_regslice),
    .apdone_blk(regslice_both_IN_I_V_data_V_U_apdone_blk)
);

sss_corr_regslice_both #(
    .DataWidth( 4 ))
regslice_both_IN_I_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(IN_I_TKEEP),
    .vld_in(IN_I_TVALID),
    .ack_in(regslice_both_IN_I_V_keep_V_U_ack_in),
    .data_out(IN_I_TKEEP_int_regslice),
    .vld_out(regslice_both_IN_I_V_keep_V_U_vld_out),
    .ack_out(IN_I_TREADY_int_regslice),
    .apdone_blk(regslice_both_IN_I_V_keep_V_U_apdone_blk)
);

sss_corr_regslice_both #(
    .DataWidth( 4 ))
regslice_both_IN_I_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(IN_I_TSTRB),
    .vld_in(IN_I_TVALID),
    .ack_in(regslice_both_IN_I_V_strb_V_U_ack_in),
    .data_out(IN_I_TSTRB_int_regslice),
    .vld_out(regslice_both_IN_I_V_strb_V_U_vld_out),
    .ack_out(IN_I_TREADY_int_regslice),
    .apdone_blk(regslice_both_IN_I_V_strb_V_U_apdone_blk)
);

sss_corr_regslice_both #(
    .DataWidth( 1 ))
regslice_both_IN_I_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(IN_I_TLAST),
    .vld_in(IN_I_TVALID),
    .ack_in(regslice_both_IN_I_V_last_V_U_ack_in),
    .data_out(IN_I_TLAST_int_regslice),
    .vld_out(regslice_both_IN_I_V_last_V_U_vld_out),
    .ack_out(IN_I_TREADY_int_regslice),
    .apdone_blk(regslice_both_IN_I_V_last_V_U_apdone_blk)
);

sss_corr_regslice_both #(
    .DataWidth( 32 ))
regslice_both_pss_id_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(pss_id_TDATA),
    .vld_in(pss_id_TVALID),
    .ack_in(regslice_both_pss_id_V_data_V_U_ack_in),
    .data_out(pss_id_TDATA_int_regslice),
    .vld_out(pss_id_TVALID_int_regslice),
    .ack_out(pss_id_TREADY_int_regslice),
    .apdone_blk(regslice_both_pss_id_V_data_V_U_apdone_blk)
);

sss_corr_regslice_both #(
    .DataWidth( 4 ))
regslice_both_pss_id_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(pss_id_TKEEP),
    .vld_in(pss_id_TVALID),
    .ack_in(regslice_both_pss_id_V_keep_V_U_ack_in),
    .data_out(pss_id_TKEEP_int_regslice),
    .vld_out(regslice_both_pss_id_V_keep_V_U_vld_out),
    .ack_out(pss_id_TREADY_int_regslice),
    .apdone_blk(regslice_both_pss_id_V_keep_V_U_apdone_blk)
);

sss_corr_regslice_both #(
    .DataWidth( 4 ))
regslice_both_pss_id_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(pss_id_TSTRB),
    .vld_in(pss_id_TVALID),
    .ack_in(regslice_both_pss_id_V_strb_V_U_ack_in),
    .data_out(pss_id_TSTRB_int_regslice),
    .vld_out(regslice_both_pss_id_V_strb_V_U_vld_out),
    .ack_out(pss_id_TREADY_int_regslice),
    .apdone_blk(regslice_both_pss_id_V_strb_V_U_apdone_blk)
);

sss_corr_regslice_both #(
    .DataWidth( 1 ))
regslice_both_pss_id_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(pss_id_TLAST),
    .vld_in(pss_id_TVALID),
    .ack_in(regslice_both_pss_id_V_last_V_U_ack_in),
    .data_out(pss_id_TLAST_int_regslice),
    .vld_out(regslice_both_pss_id_V_last_V_U_vld_out),
    .ack_out(pss_id_TREADY_int_regslice),
    .apdone_blk(regslice_both_pss_id_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((grp_get_sss_id_fu_298_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_subdone))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_subdone))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_subdone))) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_subdone)))) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end else if (((grp_get_sss_id_fu_298_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp1_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_get_sss_id_fu_298_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_get_sss_id_fu_298_ap_start_reg <= 1'b1;
        end else if ((grp_get_sss_id_fu_298_ap_ready == 1'b1)) begin
            grp_get_sss_id_fu_298_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((grp_get_sss_id_fu_298_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_1_reg_287 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln164_reg_493 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_1_reg_287 <= add_ln164_reg_488;
    end
end

always @ (posedge ap_clk) begin
    if ((~((pss_id_TVALID_int_regslice == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_276 <= 8'd0;
    end else if ((~(((1'b0 == IN_I_TVALID_int_regslice) & (icmp_ln13_fu_331_p2 == 1'd0)) | ((1'b0 == IN_R_TVALID_int_regslice) & (icmp_ln13_fu_331_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_331_p2 == 1'd0))) begin
        i_reg_276 <= add_ln13_fu_325_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        OUT1_read_reg_450 <= OUT1;
        OUT2_read_reg_445 <= OUT2;
        temp_data_reg_455 <= pss_id_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln164_reg_493 == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001))) begin
        OUT_1_load_reg_519 <= OUT_1_q0;
        OUT_2_load_reg_524 <= OUT_2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        add_ln164_reg_488 <= add_ln164_fu_385_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln164_fu_391_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        gmem_addr_1_reg_513 <= sext_ln167_fu_427_p1;
        gmem_addr_reg_502 <= sext_ln166_fu_412_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln164_reg_493 <= icmp_ln164_fu_391_p2;
        icmp_ln164_reg_493_pp1_iter1_reg <= icmp_ln164_reg_493;
        icmp_ln164_reg_493_pp1_iter2_reg <= icmp_ln164_reg_493_pp1_iter1_reg;
        icmp_ln164_reg_493_pp1_iter3_reg <= icmp_ln164_reg_493_pp1_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sext_ln164_1_reg_483 <= sext_ln164_1_fu_382_p1;
        sext_ln164_reg_478 <= sext_ln164_fu_379_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        trunc_ln164_1_reg_473 <= {{OUT2_read_reg_445[63:2]}};
        trunc_ln_reg_468 <= {{OUT1_read_reg_450[63:2]}};
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_331_p2 == 1'd0))) begin
        IN_I_TDATA_blk_n = IN_I_TVALID_int_regslice;
    end else begin
        IN_I_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((1'b0 == IN_I_TVALID_int_regslice) & (icmp_ln13_fu_331_p2 == 1'd0)) | ((1'b0 == IN_R_TVALID_int_regslice) & (icmp_ln13_fu_331_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_331_p2 == 1'd0))) begin
        IN_I_TREADY_int_regslice = 1'b1;
    end else begin
        IN_I_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_331_p2 == 1'd0))) begin
        IN_R_TDATA_blk_n = IN_R_TVALID_int_regslice;
    end else begin
        IN_R_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((1'b0 == IN_I_TVALID_int_regslice) & (icmp_ln13_fu_331_p2 == 1'd0)) | ((1'b0 == IN_R_TVALID_int_regslice) & (icmp_ln13_fu_331_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_331_p2 == 1'd0))) begin
        IN_R_TREADY_int_regslice = 1'b1;
    end else begin
        IN_R_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        IN_imag_address0 = i_cast_fu_337_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        IN_imag_address0 = grp_get_sss_id_fu_298_IN_I_address0;
    end else begin
        IN_imag_address0 = 'bx;
    end
end

always @ (*) begin
    if ((~(((1'b0 == IN_I_TVALID_int_regslice) & (icmp_ln13_fu_331_p2 == 1'd0)) | ((1'b0 == IN_R_TVALID_int_regslice) & (icmp_ln13_fu_331_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state2))) begin
        IN_imag_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        IN_imag_ce0 = grp_get_sss_id_fu_298_IN_I_ce0;
    end else begin
        IN_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(((1'b0 == IN_I_TVALID_int_regslice) & (icmp_ln13_fu_331_p2 == 1'd0)) | ((1'b0 == IN_R_TVALID_int_regslice) & (icmp_ln13_fu_331_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_331_p2 == 1'd0))) begin
        IN_imag_we0 = 1'b1;
    end else begin
        IN_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        IN_real_address0 = i_cast_fu_337_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        IN_real_address0 = grp_get_sss_id_fu_298_IN_R_address0;
    end else begin
        IN_real_address0 = 'bx;
    end
end

always @ (*) begin
    if ((~(((1'b0 == IN_I_TVALID_int_regslice) & (icmp_ln13_fu_331_p2 == 1'd0)) | ((1'b0 == IN_R_TVALID_int_regslice) & (icmp_ln13_fu_331_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state2))) begin
        IN_real_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        IN_real_ce0 = grp_get_sss_id_fu_298_IN_R_ce0;
    end else begin
        IN_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(((1'b0 == IN_I_TVALID_int_regslice) & (icmp_ln13_fu_331_p2 == 1'd0)) | ((1'b0 == IN_R_TVALID_int_regslice) & (icmp_ln13_fu_331_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_331_p2 == 1'd0))) begin
        IN_real_we0 = 1'b1;
    end else begin
        IN_real_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        OUT_1_address0 = i_1_cast1_fu_397_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        OUT_1_address0 = grp_get_sss_id_fu_298_OUT_1_address0;
    end else begin
        OUT_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        OUT_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        OUT_1_ce0 = grp_get_sss_id_fu_298_OUT_1_ce0;
    end else begin
        OUT_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        OUT_1_we0 = grp_get_sss_id_fu_298_OUT_1_we0;
    end else begin
        OUT_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        OUT_2_address0 = i_1_cast1_fu_397_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        OUT_2_address0 = grp_get_sss_id_fu_298_OUT_2_address0;
    end else begin
        OUT_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        OUT_2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        OUT_2_ce0 = grp_get_sss_id_fu_298_OUT_2_ce0;
    end else begin
        OUT_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        OUT_2_we0 = grp_get_sss_id_fu_298_OUT_2_we0;
    end else begin
        OUT_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln164_fu_391_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln164_reg_493 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_i_1_phi_fu_291_p4 = add_ln164_reg_488;
    end else begin
        ap_phi_mux_i_1_phi_fu_291_p4 = i_1_reg_287;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln164_reg_493 == 1'd0)) begin
        if ((1'b1 == ap_condition_507)) begin
            gmem_AWADDR = gmem_addr_1_reg_513;
        end else if ((1'b1 == ap_condition_568)) begin
            gmem_AWADDR = gmem_addr_reg_502;
        end else begin
            gmem_AWADDR = 'bx;
        end
    end else begin
        gmem_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln164_reg_493 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln164_reg_493 == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (icmp_ln164_reg_493_pp1_iter3_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln164_reg_493_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage1_11001)))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp1_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_834)) begin
            gmem_WDATA = bitcast_ln167_fu_441_p1;
        end else if ((1'b1 == ap_condition_830)) begin
            gmem_WDATA = bitcast_ln166_fu_437_p1;
        end else begin
            gmem_WDATA = 'bx;
        end
    end else begin
        gmem_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln164_reg_493 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln164_reg_493_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage1_11001)))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln164_reg_493 == 1'd0) & (1'b0 == ap_block_pp1_stage0)) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln164_reg_493 == 1'd0) & (1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (icmp_ln164_reg_493_pp1_iter3_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0)) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln164_reg_493_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage1)))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln164_reg_493 == 1'd0) & (1'b0 == ap_block_pp1_stage0)) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln164_reg_493_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage1)))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        pss_id_TDATA_blk_n = pss_id_TVALID_int_regslice;
    end else begin
        pss_id_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((pss_id_TVALID_int_regslice == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        pss_id_TREADY_int_regslice = 1'b1;
    end else begin
        pss_id_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((pss_id_TVALID_int_regslice == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~(((1'b0 == IN_I_TVALID_int_regslice) & (icmp_ln13_fu_331_p2 == 1'd0)) | ((1'b0 == IN_R_TVALID_int_regslice) & (icmp_ln13_fu_331_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_331_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~(((1'b0 == IN_I_TVALID_int_regslice) & (icmp_ln13_fu_331_p2 == 1'd0)) | ((1'b0 == IN_R_TVALID_int_regslice) & (icmp_ln13_fu_331_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_331_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_get_sss_id_fu_298_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln164_fu_391_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (ap_enable_reg_pp1_iter3 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if ((((icmp_ln164_fu_391_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (ap_enable_reg_pp1_iter3 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign IN_I_TREADY = regslice_both_IN_I_V_data_V_U_ack_in;

assign IN_R_TREADY = regslice_both_IN_R_V_data_V_U_ack_in;

assign IN_imag_d0 = IN_I_TDATA_int_regslice;

assign IN_real_d0 = IN_R_TDATA_int_regslice;

assign add_ln13_fu_325_p2 = (i_reg_276 + 8'd1);

assign add_ln164_fu_385_p2 = (ap_phi_mux_i_1_phi_fu_291_p4 + 8'd1);

assign add_ln166_fu_407_p2 = ($signed(i_1_cast_fu_403_p1) + $signed(sext_ln164_reg_478));

assign add_ln167_fu_422_p2 = ($signed(i_1_cast_fu_403_p1) + $signed(sext_ln164_1_reg_483));

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((gmem_BVALID == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (icmp_ln164_reg_493_pp1_iter3_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((gmem_BVALID == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (icmp_ln164_reg_493_pp1_iter3_reg == 1'd0)) | ((1'b1 == ap_block_state7_io) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((gmem_BVALID == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (icmp_ln164_reg_493_pp1_iter3_reg == 1'd0)) | ((1'b1 == ap_block_state7_io) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage1_01001 = ((gmem_BVALID == 1'b0) & (icmp_ln164_reg_493_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage1_11001 = (((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((gmem_BVALID == 1'b0) & (icmp_ln164_reg_493_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage1_subdone = (((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((gmem_BVALID == 1'b0) & (icmp_ln164_reg_493_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((pss_id_TVALID_int_regslice == 1'b0) | (ap_start == 1'b0));
end

assign ap_block_state10_pp1_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_pp1_stage1_iter3 = ((gmem_BVALID == 1'b0) & (icmp_ln164_reg_493_pp1_iter3_reg == 1'd0));
end

always @ (*) begin
    ap_block_state13_pp1_stage0_iter4 = ((gmem_BVALID == 1'b0) & (icmp_ln164_reg_493_pp1_iter3_reg == 1'd0));
end

always @ (*) begin
    ap_block_state2 = (((1'b0 == IN_I_TVALID_int_regslice) & (icmp_ln13_fu_331_p2 == 1'd0)) | ((1'b0 == IN_R_TVALID_int_regslice) & (icmp_ln13_fu_331_p2 == 1'd0)));
end

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((gmem_AWREADY == 1'b0) & (icmp_ln164_reg_493 == 1'd0));
end

assign ap_block_state6_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_io = (((gmem_AWREADY == 1'b0) & (icmp_ln164_reg_493 == 1'd0)) | ((gmem_WREADY == 1'b0) & (icmp_ln164_reg_493 == 1'd0)));
end

assign ap_block_state7_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_io = ((gmem_WREADY == 1'b0) & (icmp_ln164_reg_493_pp1_iter1_reg == 1'd0));
end

assign ap_block_state8_pp1_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_507 = ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001));
end

always @ (*) begin
    ap_condition_568 = ((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_condition_830 = ((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln164_reg_493 == 1'd0) & (1'b0 == ap_block_pp1_stage0_01001));
end

always @ (*) begin
    ap_condition_834 = ((1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln164_reg_493_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage1_01001));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln166_fu_437_p1 = OUT_1_load_reg_519;

assign bitcast_ln167_fu_441_p1 = OUT_2_load_reg_524;

assign grp_get_sss_id_fu_298_ap_start = grp_get_sss_id_fu_298_ap_start_reg;

assign i_1_cast1_fu_397_p1 = ap_phi_mux_i_1_phi_fu_291_p4;

assign i_1_cast_fu_403_p1 = ap_phi_mux_i_1_phi_fu_291_p4;

assign i_cast_fu_337_p1 = i_reg_276;

assign icmp_ln13_fu_331_p2 = ((i_reg_276 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln164_fu_391_p2 = ((ap_phi_mux_i_1_phi_fu_291_p4 == 8'd168) ? 1'b1 : 1'b0);

assign pss_id_TREADY = regslice_both_pss_id_V_data_V_U_ack_in;

assign sext_ln164_1_fu_382_p1 = $signed(trunc_ln164_1_reg_473);

assign sext_ln164_fu_379_p1 = $signed(trunc_ln_reg_468);

assign sext_ln166_fu_412_p1 = $signed(add_ln166_fu_407_p2);

assign sext_ln167_fu_427_p1 = $signed(add_ln167_fu_422_p2);

endmodule //sss_corr
