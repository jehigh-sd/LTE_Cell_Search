-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sss_corr is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_CONTROL_R_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    IN_R_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    IN_R_TVALID : IN STD_LOGIC;
    IN_R_TREADY : OUT STD_LOGIC;
    IN_R_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    IN_R_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    IN_R_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    IN_I_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    IN_I_TVALID : IN STD_LOGIC;
    IN_I_TREADY : OUT STD_LOGIC;
    IN_I_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    IN_I_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    IN_I_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    pss_id_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    pss_id_TVALID : IN STD_LOGIC;
    pss_id_TREADY : OUT STD_LOGIC;
    pss_id_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    pss_id_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    pss_id_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    s_axi_control_r_AWVALID : IN STD_LOGIC;
    s_axi_control_r_AWREADY : OUT STD_LOGIC;
    s_axi_control_r_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_ADDR_WIDTH-1 downto 0);
    s_axi_control_r_WVALID : IN STD_LOGIC;
    s_axi_control_r_WREADY : OUT STD_LOGIC;
    s_axi_control_r_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_DATA_WIDTH-1 downto 0);
    s_axi_control_r_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_DATA_WIDTH/8-1 downto 0);
    s_axi_control_r_ARVALID : IN STD_LOGIC;
    s_axi_control_r_ARREADY : OUT STD_LOGIC;
    s_axi_control_r_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_ADDR_WIDTH-1 downto 0);
    s_axi_control_r_RVALID : OUT STD_LOGIC;
    s_axi_control_r_RREADY : IN STD_LOGIC;
    s_axi_control_r_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_DATA_WIDTH-1 downto 0);
    s_axi_control_r_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_r_BVALID : OUT STD_LOGIC;
    s_axi_control_r_BREADY : IN STD_LOGIC;
    s_axi_control_r_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of sss_corr is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sss_corr_sss_corr,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=16.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=21.088000,HLS_SYN_LAT=69021,HLS_SYN_TPT=none,HLS_SYN_MEM=246,HLS_SYN_DSP=0,HLS_SYN_FF=4030,HLS_SYN_LUT=8618,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_A8 : STD_LOGIC_VECTOR (7 downto 0) := "10101000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal OUT1 : STD_LOGIC_VECTOR (63 downto 0);
    signal OUT2 : STD_LOGIC_VECTOR (63 downto 0);
    signal OUT_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal OUT_1_ce0 : STD_LOGIC;
    signal OUT_1_we0 : STD_LOGIC;
    signal OUT_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal OUT_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal OUT_2_ce0 : STD_LOGIC;
    signal OUT_2_we0 : STD_LOGIC;
    signal OUT_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal icmp_ln164_reg_493 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal icmp_ln164_reg_493_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln164_reg_493_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal IN_R_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln13_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal IN_I_TDATA_blk_n : STD_LOGIC;
    signal pss_id_TDATA_blk_n : STD_LOGIC;
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_287 : STD_LOGIC_VECTOR (7 downto 0);
    signal OUT2_read_reg_445 : STD_LOGIC_VECTOR (63 downto 0);
    signal OUT1_read_reg_450 : STD_LOGIC_VECTOR (63 downto 0);
    signal temp_data_reg_455 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln13_fu_325_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal trunc_ln_reg_468 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln164_1_reg_473 : STD_LOGIC_VECTOR (61 downto 0);
    signal sext_ln164_fu_379_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln164_reg_478 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sext_ln164_1_fu_382_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln164_1_reg_483 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln164_fu_385_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln164_reg_488 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_io : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state11_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state13_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln164_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln164_reg_493_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_reg_502 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_1_reg_513 : STD_LOGIC_VECTOR (63 downto 0);
    signal OUT_1_load_reg_519 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state6_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_state8_pp1_stage1_iter1 : BOOLEAN;
    signal ap_block_state8_io : BOOLEAN;
    signal ap_block_state10_pp1_stage1_iter2 : BOOLEAN;
    signal ap_block_state12_pp1_stage1_iter3 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal OUT_2_load_reg_524 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_get_sss_id_fu_298_ap_ready : STD_LOGIC;
    signal grp_get_sss_id_fu_298_ap_done : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state5 : STD_LOGIC;
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal IN_real_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal IN_real_ce0 : STD_LOGIC;
    signal IN_real_we0 : STD_LOGIC;
    signal IN_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal IN_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal IN_imag_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal IN_imag_ce0 : STD_LOGIC;
    signal IN_imag_we0 : STD_LOGIC;
    signal IN_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal IN_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_get_sss_id_fu_298_ap_start : STD_LOGIC;
    signal grp_get_sss_id_fu_298_ap_idle : STD_LOGIC;
    signal grp_get_sss_id_fu_298_IN_R_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_get_sss_id_fu_298_IN_R_ce0 : STD_LOGIC;
    signal grp_get_sss_id_fu_298_IN_I_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_get_sss_id_fu_298_IN_I_ce0 : STD_LOGIC;
    signal grp_get_sss_id_fu_298_OUT_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_get_sss_id_fu_298_OUT_1_ce0 : STD_LOGIC;
    signal grp_get_sss_id_fu_298_OUT_1_we0 : STD_LOGIC;
    signal grp_get_sss_id_fu_298_OUT_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_get_sss_id_fu_298_OUT_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_get_sss_id_fu_298_OUT_2_ce0 : STD_LOGIC;
    signal grp_get_sss_id_fu_298_OUT_2_we0 : STD_LOGIC;
    signal grp_get_sss_id_fu_298_OUT_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_276 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_phi_mux_i_1_phi_fu_291_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_get_sss_id_fu_298_ap_start_reg : STD_LOGIC := '0';
    signal i_cast_fu_337_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_cast1_fu_397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln166_fu_412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln167_fu_427_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln166_fu_437_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal bitcast_ln167_fu_441_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage1_01001 : BOOLEAN;
    signal i_1_cast_fu_403_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln166_fu_407_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln167_fu_422_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal regslice_both_IN_R_V_data_V_U_apdone_blk : STD_LOGIC;
    signal IN_R_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal IN_R_TVALID_int_regslice : STD_LOGIC;
    signal IN_R_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_IN_R_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_IN_R_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal IN_R_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_IN_R_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_IN_R_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_IN_R_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal IN_R_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_IN_R_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_IN_R_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_IN_R_V_last_V_U_apdone_blk : STD_LOGIC;
    signal IN_R_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_IN_R_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_IN_R_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_IN_I_V_data_V_U_apdone_blk : STD_LOGIC;
    signal IN_I_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal IN_I_TVALID_int_regslice : STD_LOGIC;
    signal IN_I_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_IN_I_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_IN_I_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal IN_I_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_IN_I_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_IN_I_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_IN_I_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal IN_I_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_IN_I_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_IN_I_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_IN_I_V_last_V_U_apdone_blk : STD_LOGIC;
    signal IN_I_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_IN_I_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_IN_I_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_pss_id_V_data_V_U_apdone_blk : STD_LOGIC;
    signal pss_id_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal pss_id_TVALID_int_regslice : STD_LOGIC;
    signal pss_id_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_pss_id_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_pss_id_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal pss_id_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_pss_id_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_pss_id_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_pss_id_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal pss_id_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_pss_id_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_pss_id_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_pss_id_V_last_V_U_apdone_blk : STD_LOGIC;
    signal pss_id_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_pss_id_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_pss_id_V_last_V_U_ack_in : STD_LOGIC;
    signal ap_condition_568 : BOOLEAN;
    signal ap_condition_507 : BOOLEAN;
    signal ap_condition_830 : BOOLEAN;
    signal ap_condition_834 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component sss_corr_get_sss_id IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        IN_R_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        IN_R_ce0 : OUT STD_LOGIC;
        IN_R_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        IN_I_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        IN_I_ce0 : OUT STD_LOGIC;
        IN_I_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pss_id : IN STD_LOGIC_VECTOR (31 downto 0);
        OUT_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        OUT_1_ce0 : OUT STD_LOGIC;
        OUT_1_we0 : OUT STD_LOGIC;
        OUT_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUT_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        OUT_2_ce0 : OUT STD_LOGIC;
        OUT_2_we0 : OUT STD_LOGIC;
        OUT_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sss_corr_OUT_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sss_corr_IN_real IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sss_corr_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component sss_corr_control_r_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        OUT1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        OUT2 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sss_corr_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component sss_corr_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    OUT_1_U : component sss_corr_OUT_1
    generic map (
        DataWidth => 32,
        AddressRange => 168,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => OUT_1_address0,
        ce0 => OUT_1_ce0,
        we0 => OUT_1_we0,
        d0 => grp_get_sss_id_fu_298_OUT_1_d0,
        q0 => OUT_1_q0);

    OUT_2_U : component sss_corr_OUT_1
    generic map (
        DataWidth => 32,
        AddressRange => 168,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => OUT_2_address0,
        ce0 => OUT_2_ce0,
        we0 => OUT_2_we0,
        d0 => grp_get_sss_id_fu_298_OUT_2_d0,
        q0 => OUT_2_q0);

    control_s_axi_U : component sss_corr_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    control_r_s_axi_U : component sss_corr_control_r_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_R_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_R_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_r_AWVALID,
        AWREADY => s_axi_control_r_AWREADY,
        AWADDR => s_axi_control_r_AWADDR,
        WVALID => s_axi_control_r_WVALID,
        WREADY => s_axi_control_r_WREADY,
        WDATA => s_axi_control_r_WDATA,
        WSTRB => s_axi_control_r_WSTRB,
        ARVALID => s_axi_control_r_ARVALID,
        ARREADY => s_axi_control_r_ARREADY,
        ARADDR => s_axi_control_r_ARADDR,
        RVALID => s_axi_control_r_RVALID,
        RREADY => s_axi_control_r_RREADY,
        RDATA => s_axi_control_r_RDATA,
        RRESP => s_axi_control_r_RRESP,
        BVALID => s_axi_control_r_BVALID,
        BREADY => s_axi_control_r_BREADY,
        BRESP => s_axi_control_r_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        OUT1 => OUT1,
        OUT2 => OUT2);

    gmem_m_axi_U : component sss_corr_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => gmem_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    IN_real_U : component sss_corr_IN_real
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => IN_real_address0,
        ce0 => IN_real_ce0,
        we0 => IN_real_we0,
        d0 => IN_real_d0,
        q0 => IN_real_q0);

    IN_imag_U : component sss_corr_IN_real
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => IN_imag_address0,
        ce0 => IN_imag_ce0,
        we0 => IN_imag_we0,
        d0 => IN_imag_d0,
        q0 => IN_imag_q0);

    grp_get_sss_id_fu_298 : component sss_corr_get_sss_id
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_get_sss_id_fu_298_ap_start,
        ap_done => grp_get_sss_id_fu_298_ap_done,
        ap_idle => grp_get_sss_id_fu_298_ap_idle,
        ap_ready => grp_get_sss_id_fu_298_ap_ready,
        IN_R_address0 => grp_get_sss_id_fu_298_IN_R_address0,
        IN_R_ce0 => grp_get_sss_id_fu_298_IN_R_ce0,
        IN_R_q0 => IN_real_q0,
        IN_I_address0 => grp_get_sss_id_fu_298_IN_I_address0,
        IN_I_ce0 => grp_get_sss_id_fu_298_IN_I_ce0,
        IN_I_q0 => IN_imag_q0,
        pss_id => temp_data_reg_455,
        OUT_1_address0 => grp_get_sss_id_fu_298_OUT_1_address0,
        OUT_1_ce0 => grp_get_sss_id_fu_298_OUT_1_ce0,
        OUT_1_we0 => grp_get_sss_id_fu_298_OUT_1_we0,
        OUT_1_d0 => grp_get_sss_id_fu_298_OUT_1_d0,
        OUT_2_address0 => grp_get_sss_id_fu_298_OUT_2_address0,
        OUT_2_ce0 => grp_get_sss_id_fu_298_OUT_2_ce0,
        OUT_2_we0 => grp_get_sss_id_fu_298_OUT_2_we0,
        OUT_2_d0 => grp_get_sss_id_fu_298_OUT_2_d0);

    regslice_both_IN_R_V_data_V_U : component sss_corr_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => IN_R_TDATA,
        vld_in => IN_R_TVALID,
        ack_in => regslice_both_IN_R_V_data_V_U_ack_in,
        data_out => IN_R_TDATA_int_regslice,
        vld_out => IN_R_TVALID_int_regslice,
        ack_out => IN_R_TREADY_int_regslice,
        apdone_blk => regslice_both_IN_R_V_data_V_U_apdone_blk);

    regslice_both_IN_R_V_keep_V_U : component sss_corr_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => IN_R_TKEEP,
        vld_in => IN_R_TVALID,
        ack_in => regslice_both_IN_R_V_keep_V_U_ack_in,
        data_out => IN_R_TKEEP_int_regslice,
        vld_out => regslice_both_IN_R_V_keep_V_U_vld_out,
        ack_out => IN_R_TREADY_int_regslice,
        apdone_blk => regslice_both_IN_R_V_keep_V_U_apdone_blk);

    regslice_both_IN_R_V_strb_V_U : component sss_corr_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => IN_R_TSTRB,
        vld_in => IN_R_TVALID,
        ack_in => regslice_both_IN_R_V_strb_V_U_ack_in,
        data_out => IN_R_TSTRB_int_regslice,
        vld_out => regslice_both_IN_R_V_strb_V_U_vld_out,
        ack_out => IN_R_TREADY_int_regslice,
        apdone_blk => regslice_both_IN_R_V_strb_V_U_apdone_blk);

    regslice_both_IN_R_V_last_V_U : component sss_corr_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => IN_R_TLAST,
        vld_in => IN_R_TVALID,
        ack_in => regslice_both_IN_R_V_last_V_U_ack_in,
        data_out => IN_R_TLAST_int_regslice,
        vld_out => regslice_both_IN_R_V_last_V_U_vld_out,
        ack_out => IN_R_TREADY_int_regslice,
        apdone_blk => regslice_both_IN_R_V_last_V_U_apdone_blk);

    regslice_both_IN_I_V_data_V_U : component sss_corr_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => IN_I_TDATA,
        vld_in => IN_I_TVALID,
        ack_in => regslice_both_IN_I_V_data_V_U_ack_in,
        data_out => IN_I_TDATA_int_regslice,
        vld_out => IN_I_TVALID_int_regslice,
        ack_out => IN_I_TREADY_int_regslice,
        apdone_blk => regslice_both_IN_I_V_data_V_U_apdone_blk);

    regslice_both_IN_I_V_keep_V_U : component sss_corr_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => IN_I_TKEEP,
        vld_in => IN_I_TVALID,
        ack_in => regslice_both_IN_I_V_keep_V_U_ack_in,
        data_out => IN_I_TKEEP_int_regslice,
        vld_out => regslice_both_IN_I_V_keep_V_U_vld_out,
        ack_out => IN_I_TREADY_int_regslice,
        apdone_blk => regslice_both_IN_I_V_keep_V_U_apdone_blk);

    regslice_both_IN_I_V_strb_V_U : component sss_corr_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => IN_I_TSTRB,
        vld_in => IN_I_TVALID,
        ack_in => regslice_both_IN_I_V_strb_V_U_ack_in,
        data_out => IN_I_TSTRB_int_regslice,
        vld_out => regslice_both_IN_I_V_strb_V_U_vld_out,
        ack_out => IN_I_TREADY_int_regslice,
        apdone_blk => regslice_both_IN_I_V_strb_V_U_apdone_blk);

    regslice_both_IN_I_V_last_V_U : component sss_corr_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => IN_I_TLAST,
        vld_in => IN_I_TVALID,
        ack_in => regslice_both_IN_I_V_last_V_U_ack_in,
        data_out => IN_I_TLAST_int_regslice,
        vld_out => regslice_both_IN_I_V_last_V_U_vld_out,
        ack_out => IN_I_TREADY_int_regslice,
        apdone_blk => regslice_both_IN_I_V_last_V_U_apdone_blk);

    regslice_both_pss_id_V_data_V_U : component sss_corr_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => pss_id_TDATA,
        vld_in => pss_id_TVALID,
        ack_in => regslice_both_pss_id_V_data_V_U_ack_in,
        data_out => pss_id_TDATA_int_regslice,
        vld_out => pss_id_TVALID_int_regslice,
        ack_out => pss_id_TREADY_int_regslice,
        apdone_blk => regslice_both_pss_id_V_data_V_U_apdone_blk);

    regslice_both_pss_id_V_keep_V_U : component sss_corr_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => pss_id_TKEEP,
        vld_in => pss_id_TVALID,
        ack_in => regslice_both_pss_id_V_keep_V_U_ack_in,
        data_out => pss_id_TKEEP_int_regslice,
        vld_out => regslice_both_pss_id_V_keep_V_U_vld_out,
        ack_out => pss_id_TREADY_int_regslice,
        apdone_blk => regslice_both_pss_id_V_keep_V_U_apdone_blk);

    regslice_both_pss_id_V_strb_V_U : component sss_corr_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => pss_id_TSTRB,
        vld_in => pss_id_TVALID,
        ack_in => regslice_both_pss_id_V_strb_V_U_ack_in,
        data_out => pss_id_TSTRB_int_regslice,
        vld_out => regslice_both_pss_id_V_strb_V_U_vld_out,
        ack_out => pss_id_TREADY_int_regslice,
        apdone_blk => regslice_both_pss_id_V_strb_V_U_apdone_blk);

    regslice_both_pss_id_V_last_V_U : component sss_corr_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => pss_id_TLAST,
        vld_in => pss_id_TVALID,
        ack_in => regslice_both_pss_id_V_last_V_U_ack_in,
        data_out => pss_id_TLAST_int_regslice,
        vld_out => regslice_both_pss_id_V_last_V_U_vld_out,
        ack_out => pss_id_TREADY_int_regslice,
        apdone_blk => regslice_both_pss_id_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((grp_get_sss_id_fu_298_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_subdone))) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_subdone))) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_subdone)))) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                elsif (((grp_get_sss_id_fu_298_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_get_sss_id_fu_298_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_get_sss_id_fu_298_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_get_sss_id_fu_298_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_get_sss_id_fu_298_ap_ready = ap_const_logic_1)) then 
                    grp_get_sss_id_fu_298_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_287_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_get_sss_id_fu_298_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_1_reg_287 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln164_reg_493 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_1_reg_287 <= add_ln164_reg_488;
            end if; 
        end if;
    end process;

    i_reg_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((pss_id_TVALID_int_regslice = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_276 <= ap_const_lv8_0;
            elsif ((not((((ap_const_logic_0 = IN_I_TVALID_int_regslice) and (icmp_ln13_fu_331_p2 = ap_const_lv1_0)) or ((ap_const_logic_0 = IN_R_TVALID_int_regslice) and (icmp_ln13_fu_331_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln13_fu_331_p2 = ap_const_lv1_0))) then 
                i_reg_276 <= add_ln13_fu_325_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                OUT1_read_reg_450 <= OUT1;
                OUT2_read_reg_445 <= OUT2;
                temp_data_reg_455 <= pss_id_TDATA_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln164_reg_493 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then
                OUT_1_load_reg_519 <= OUT_1_q0;
                OUT_2_load_reg_524 <= OUT_2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                add_ln164_reg_488 <= add_ln164_fu_385_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln164_fu_391_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                gmem_addr_1_reg_513 <= sext_ln167_fu_427_p1;
                gmem_addr_reg_502 <= sext_ln166_fu_412_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln164_reg_493 <= icmp_ln164_fu_391_p2;
                icmp_ln164_reg_493_pp1_iter1_reg <= icmp_ln164_reg_493;
                icmp_ln164_reg_493_pp1_iter2_reg <= icmp_ln164_reg_493_pp1_iter1_reg;
                icmp_ln164_reg_493_pp1_iter3_reg <= icmp_ln164_reg_493_pp1_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                sext_ln164_1_reg_483 <= sext_ln164_1_fu_382_p1;
                sext_ln164_reg_478 <= sext_ln164_fu_379_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                trunc_ln164_1_reg_473 <= OUT2_read_reg_445(63 downto 2);
                trunc_ln_reg_468 <= OUT1_read_reg_450(63 downto 2);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4, ap_CS_fsm_state2, icmp_ln13_fu_331_p2, ap_CS_fsm_state4, icmp_ln164_fu_391_p2, grp_get_sss_id_fu_298_ap_done, ap_block_pp1_stage0_subdone, ap_block_pp1_stage1_subdone, IN_R_TVALID_int_regslice, IN_I_TVALID_int_regslice, pss_id_TVALID_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((pss_id_TVALID_int_regslice = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not((((ap_const_logic_0 = IN_I_TVALID_int_regslice) and (icmp_ln13_fu_331_p2 = ap_const_lv1_0)) or ((ap_const_logic_0 = IN_R_TVALID_int_regslice) and (icmp_ln13_fu_331_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln13_fu_331_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not((((ap_const_logic_0 = IN_I_TVALID_int_regslice) and (icmp_ln13_fu_331_p2 = ap_const_lv1_0)) or ((ap_const_logic_0 = IN_R_TVALID_int_regslice) and (icmp_ln13_fu_331_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln13_fu_331_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_get_sss_id_fu_298_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((icmp_ln164_fu_391_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif ((((icmp_ln164_fu_391_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;

    IN_I_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, icmp_ln13_fu_331_p2, IN_I_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln13_fu_331_p2 = ap_const_lv1_0))) then 
            IN_I_TDATA_blk_n <= IN_I_TVALID_int_regslice;
        else 
            IN_I_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    IN_I_TREADY <= regslice_both_IN_I_V_data_V_U_ack_in;

    IN_I_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state2, icmp_ln13_fu_331_p2, IN_R_TVALID_int_regslice, IN_I_TVALID_int_regslice)
    begin
        if ((not((((ap_const_logic_0 = IN_I_TVALID_int_regslice) and (icmp_ln13_fu_331_p2 = ap_const_lv1_0)) or ((ap_const_logic_0 = IN_R_TVALID_int_regslice) and (icmp_ln13_fu_331_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln13_fu_331_p2 = ap_const_lv1_0))) then 
            IN_I_TREADY_int_regslice <= ap_const_logic_1;
        else 
            IN_I_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    IN_R_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, icmp_ln13_fu_331_p2, IN_R_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln13_fu_331_p2 = ap_const_lv1_0))) then 
            IN_R_TDATA_blk_n <= IN_R_TVALID_int_regslice;
        else 
            IN_R_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    IN_R_TREADY <= regslice_both_IN_R_V_data_V_U_ack_in;

    IN_R_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state2, icmp_ln13_fu_331_p2, IN_R_TVALID_int_regslice, IN_I_TVALID_int_regslice)
    begin
        if ((not((((ap_const_logic_0 = IN_I_TVALID_int_regslice) and (icmp_ln13_fu_331_p2 = ap_const_lv1_0)) or ((ap_const_logic_0 = IN_R_TVALID_int_regslice) and (icmp_ln13_fu_331_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln13_fu_331_p2 = ap_const_lv1_0))) then 
            IN_R_TREADY_int_regslice <= ap_const_logic_1;
        else 
            IN_R_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    IN_imag_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, grp_get_sss_id_fu_298_IN_I_address0, i_cast_fu_337_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            IN_imag_address0 <= i_cast_fu_337_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            IN_imag_address0 <= grp_get_sss_id_fu_298_IN_I_address0;
        else 
            IN_imag_address0 <= "XXXXXXX";
        end if; 
    end process;


    IN_imag_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln13_fu_331_p2, ap_CS_fsm_state4, grp_get_sss_id_fu_298_IN_I_ce0, IN_R_TVALID_int_regslice, IN_I_TVALID_int_regslice)
    begin
        if ((not((((ap_const_logic_0 = IN_I_TVALID_int_regslice) and (icmp_ln13_fu_331_p2 = ap_const_lv1_0)) or ((ap_const_logic_0 = IN_R_TVALID_int_regslice) and (icmp_ln13_fu_331_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            IN_imag_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            IN_imag_ce0 <= grp_get_sss_id_fu_298_IN_I_ce0;
        else 
            IN_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    IN_imag_d0 <= IN_I_TDATA_int_regslice;

    IN_imag_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln13_fu_331_p2, IN_R_TVALID_int_regslice, IN_I_TVALID_int_regslice)
    begin
        if ((not((((ap_const_logic_0 = IN_I_TVALID_int_regslice) and (icmp_ln13_fu_331_p2 = ap_const_lv1_0)) or ((ap_const_logic_0 = IN_R_TVALID_int_regslice) and (icmp_ln13_fu_331_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln13_fu_331_p2 = ap_const_lv1_0))) then 
            IN_imag_we0 <= ap_const_logic_1;
        else 
            IN_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    IN_real_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, grp_get_sss_id_fu_298_IN_R_address0, i_cast_fu_337_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            IN_real_address0 <= i_cast_fu_337_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            IN_real_address0 <= grp_get_sss_id_fu_298_IN_R_address0;
        else 
            IN_real_address0 <= "XXXXXXX";
        end if; 
    end process;


    IN_real_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln13_fu_331_p2, ap_CS_fsm_state4, grp_get_sss_id_fu_298_IN_R_ce0, IN_R_TVALID_int_regslice, IN_I_TVALID_int_regslice)
    begin
        if ((not((((ap_const_logic_0 = IN_I_TVALID_int_regslice) and (icmp_ln13_fu_331_p2 = ap_const_lv1_0)) or ((ap_const_logic_0 = IN_R_TVALID_int_regslice) and (icmp_ln13_fu_331_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            IN_real_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            IN_real_ce0 <= grp_get_sss_id_fu_298_IN_R_ce0;
        else 
            IN_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    IN_real_d0 <= IN_R_TDATA_int_regslice;

    IN_real_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln13_fu_331_p2, IN_R_TVALID_int_regslice, IN_I_TVALID_int_regslice)
    begin
        if ((not((((ap_const_logic_0 = IN_I_TVALID_int_regslice) and (icmp_ln13_fu_331_p2 = ap_const_lv1_0)) or ((ap_const_logic_0 = IN_R_TVALID_int_regslice) and (icmp_ln13_fu_331_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln13_fu_331_p2 = ap_const_lv1_0))) then 
            IN_real_we0 <= ap_const_logic_1;
        else 
            IN_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_1_address0_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_CS_fsm_state4, grp_get_sss_id_fu_298_OUT_1_address0, i_1_cast1_fu_397_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            OUT_1_address0 <= i_1_cast1_fu_397_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            OUT_1_address0 <= grp_get_sss_id_fu_298_OUT_1_address0;
        else 
            OUT_1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    OUT_1_ce0_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage0, ap_CS_fsm_state4, ap_block_pp1_stage0_11001, grp_get_sss_id_fu_298_OUT_1_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            OUT_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            OUT_1_ce0 <= grp_get_sss_id_fu_298_OUT_1_ce0;
        else 
            OUT_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_1_we0_assign_proc : process(ap_CS_fsm_state4, grp_get_sss_id_fu_298_OUT_1_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            OUT_1_we0 <= grp_get_sss_id_fu_298_OUT_1_we0;
        else 
            OUT_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_2_address0_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_CS_fsm_state4, grp_get_sss_id_fu_298_OUT_2_address0, i_1_cast1_fu_397_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            OUT_2_address0 <= i_1_cast1_fu_397_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            OUT_2_address0 <= grp_get_sss_id_fu_298_OUT_2_address0;
        else 
            OUT_2_address0 <= "XXXXXXXX";
        end if; 
    end process;


    OUT_2_ce0_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage0, ap_CS_fsm_state4, ap_block_pp1_stage0_11001, grp_get_sss_id_fu_298_OUT_2_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            OUT_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            OUT_2_ce0 <= grp_get_sss_id_fu_298_OUT_2_ce0;
        else 
            OUT_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_2_we0_assign_proc : process(ap_CS_fsm_state4, grp_get_sss_id_fu_298_OUT_2_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            OUT_2_we0 <= grp_get_sss_id_fu_298_OUT_2_we0;
        else 
            OUT_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln13_fu_325_p2 <= std_logic_vector(unsigned(i_reg_276) + unsigned(ap_const_lv8_1));
    add_ln164_fu_385_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_1_phi_fu_291_p4) + unsigned(ap_const_lv8_1));
    add_ln166_fu_407_p2 <= std_logic_vector(unsigned(i_1_cast_fu_403_p1) + unsigned(sext_ln164_reg_478));
    add_ln167_fu_422_p2 <= std_logic_vector(unsigned(i_1_cast_fu_403_p1) + unsigned(sext_ln164_1_reg_483));
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(6);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_01001_assign_proc : process(icmp_ln164_reg_493_pp1_iter3_reg, ap_enable_reg_pp1_iter4, gmem_BVALID)
    begin
                ap_block_pp1_stage0_01001 <= ((gmem_BVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (icmp_ln164_reg_493_pp1_iter3_reg = ap_const_lv1_0));
    end process;


    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, icmp_ln164_reg_493_pp1_iter3_reg, ap_enable_reg_pp1_iter4, gmem_BVALID, ap_block_state7_io)
    begin
                ap_block_pp1_stage0_11001 <= (((gmem_BVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (icmp_ln164_reg_493_pp1_iter3_reg = ap_const_lv1_0)) or ((ap_const_boolean_1 = ap_block_state7_io) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, icmp_ln164_reg_493_pp1_iter3_reg, ap_enable_reg_pp1_iter4, gmem_BVALID, ap_block_state7_io)
    begin
                ap_block_pp1_stage0_subdone <= (((gmem_BVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (icmp_ln164_reg_493_pp1_iter3_reg = ap_const_lv1_0)) or ((ap_const_boolean_1 = ap_block_state7_io) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)));
    end process;

        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage1_01001_assign_proc : process(ap_enable_reg_pp1_iter3, icmp_ln164_reg_493_pp1_iter3_reg, gmem_BVALID)
    begin
                ap_block_pp1_stage1_01001 <= ((gmem_BVALID = ap_const_logic_0) and (icmp_ln164_reg_493_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage1_11001_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter3, icmp_ln164_reg_493_pp1_iter3_reg, gmem_BVALID, ap_block_state6_io, ap_block_state8_io)
    begin
                ap_block_pp1_stage1_11001 <= (((ap_const_boolean_1 = ap_block_state8_io) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state6_io) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((gmem_BVALID = ap_const_logic_0) and (icmp_ln164_reg_493_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1)));
    end process;


    ap_block_pp1_stage1_subdone_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter3, icmp_ln164_reg_493_pp1_iter3_reg, gmem_BVALID, ap_block_state6_io, ap_block_state8_io)
    begin
                ap_block_pp1_stage1_subdone <= (((ap_const_boolean_1 = ap_block_state8_io) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state6_io) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((gmem_BVALID = ap_const_logic_0) and (icmp_ln164_reg_493_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, pss_id_TVALID_int_regslice)
    begin
                ap_block_state1 <= ((pss_id_TVALID_int_regslice = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state10_pp1_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_pp1_stage1_iter3_assign_proc : process(icmp_ln164_reg_493_pp1_iter3_reg, gmem_BVALID)
    begin
                ap_block_state12_pp1_stage1_iter3 <= ((gmem_BVALID = ap_const_logic_0) and (icmp_ln164_reg_493_pp1_iter3_reg = ap_const_lv1_0));
    end process;


    ap_block_state13_pp1_stage0_iter4_assign_proc : process(icmp_ln164_reg_493_pp1_iter3_reg, gmem_BVALID)
    begin
                ap_block_state13_pp1_stage0_iter4 <= ((gmem_BVALID = ap_const_logic_0) and (icmp_ln164_reg_493_pp1_iter3_reg = ap_const_lv1_0));
    end process;


    ap_block_state2_assign_proc : process(icmp_ln13_fu_331_p2, IN_R_TVALID_int_regslice, IN_I_TVALID_int_regslice)
    begin
                ap_block_state2 <= (((ap_const_logic_0 = IN_I_TVALID_int_regslice) and (icmp_ln13_fu_331_p2 = ap_const_lv1_0)) or ((ap_const_logic_0 = IN_R_TVALID_int_regslice) and (icmp_ln13_fu_331_p2 = ap_const_lv1_0)));
    end process;

        ap_block_state5_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_io_assign_proc : process(icmp_ln164_reg_493, gmem_AWREADY)
    begin
                ap_block_state6_io <= ((gmem_AWREADY = ap_const_logic_0) and (icmp_ln164_reg_493 = ap_const_lv1_0));
    end process;

        ap_block_state6_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_io_assign_proc : process(icmp_ln164_reg_493, gmem_AWREADY, gmem_WREADY)
    begin
                ap_block_state7_io <= (((gmem_AWREADY = ap_const_logic_0) and (icmp_ln164_reg_493 = ap_const_lv1_0)) or ((gmem_WREADY = ap_const_logic_0) and (icmp_ln164_reg_493 = ap_const_lv1_0)));
    end process;

        ap_block_state7_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_io_assign_proc : process(icmp_ln164_reg_493_pp1_iter1_reg, gmem_WREADY)
    begin
                ap_block_state8_io <= ((gmem_WREADY = ap_const_logic_0) and (icmp_ln164_reg_493_pp1_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state8_pp1_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_507_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_11001)
    begin
                ap_condition_507 <= ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001));
    end process;


    ap_condition_568_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_block_pp1_stage1_11001)
    begin
                ap_condition_568 <= ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1));
    end process;


    ap_condition_830_assign_proc : process(icmp_ln164_reg_493, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_01001)
    begin
                ap_condition_830 <= ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln164_reg_493 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_01001));
    end process;


    ap_condition_834_assign_proc : process(ap_CS_fsm_pp1_stage1, icmp_ln164_reg_493_pp1_iter1_reg, ap_block_pp1_stage1_01001)
    begin
                ap_condition_834 <= ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln164_reg_493_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage1_01001));
    end process;


    ap_condition_pp1_exit_iter0_state5_assign_proc : process(icmp_ln164_fu_391_p2)
    begin
        if ((icmp_ln164_fu_391_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_1_phi_fu_291_p4_assign_proc : process(icmp_ln164_reg_493, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, i_1_reg_287, add_ln164_reg_488)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln164_reg_493 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_i_1_phi_fu_291_p4 <= add_ln164_reg_488;
        else 
            ap_phi_mux_i_1_phi_fu_291_p4 <= i_1_reg_287;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln166_fu_437_p1 <= OUT_1_load_reg_519;
    bitcast_ln167_fu_441_p1 <= OUT_2_load_reg_524;

    gmem_AWADDR_assign_proc : process(icmp_ln164_reg_493, gmem_addr_reg_502, gmem_addr_1_reg_513, ap_condition_568, ap_condition_507)
    begin
        if ((icmp_ln164_reg_493 = ap_const_lv1_0)) then
            if ((ap_const_boolean_1 = ap_condition_507)) then 
                gmem_AWADDR <= gmem_addr_1_reg_513;
            elsif ((ap_const_boolean_1 = ap_condition_568)) then 
                gmem_AWADDR <= gmem_addr_reg_502;
            else 
                gmem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, icmp_ln164_reg_493, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_11001, ap_block_pp1_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln164_reg_493 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln164_reg_493 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter3, icmp_ln164_reg_493_pp1_iter3_reg, ap_enable_reg_pp1_iter4, ap_block_pp1_stage0_11001, ap_block_pp1_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (icmp_ln164_reg_493_pp1_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln164_reg_493_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WDATA_assign_proc : process(ap_enable_reg_pp1_iter1, bitcast_ln166_fu_437_p1, bitcast_ln167_fu_441_p1, ap_condition_830, ap_condition_834)
    begin
        if ((ap_enable_reg_pp1_iter1 = ap_const_logic_1)) then
            if ((ap_const_boolean_1 = ap_condition_834)) then 
                gmem_WDATA <= bitcast_ln167_fu_441_p1;
            elsif ((ap_const_boolean_1 = ap_condition_830)) then 
                gmem_WDATA <= bitcast_ln166_fu_437_p1;
            else 
                gmem_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_CS_fsm_pp1_stage1, icmp_ln164_reg_493, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln164_reg_493_pp1_iter1_reg, ap_block_pp1_stage0_11001, ap_block_pp1_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln164_reg_493 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln164_reg_493_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_block_pp1_stage1, icmp_ln164_reg_493, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln164_reg_493 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln164_reg_493 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_enable_reg_pp1_iter3, icmp_ln164_reg_493_pp1_iter3_reg, ap_enable_reg_pp1_iter4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (icmp_ln164_reg_493_pp1_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln164_reg_493_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1)))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1, icmp_ln164_reg_493, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln164_reg_493_pp1_iter1_reg)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln164_reg_493 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln164_reg_493_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1)))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_get_sss_id_fu_298_ap_start <= grp_get_sss_id_fu_298_ap_start_reg;
    i_1_cast1_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_1_phi_fu_291_p4),64));
    i_1_cast_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_1_phi_fu_291_p4),63));
    i_cast_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_276),64));
    icmp_ln13_fu_331_p2 <= "1" when (i_reg_276 = ap_const_lv8_80) else "0";
    icmp_ln164_fu_391_p2 <= "1" when (ap_phi_mux_i_1_phi_fu_291_p4 = ap_const_lv8_A8) else "0";

    pss_id_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, pss_id_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            pss_id_TDATA_blk_n <= pss_id_TVALID_int_regslice;
        else 
            pss_id_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    pss_id_TREADY <= regslice_both_pss_id_V_data_V_U_ack_in;

    pss_id_TREADY_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_state1, pss_id_TVALID_int_regslice)
    begin
        if ((not(((pss_id_TVALID_int_regslice = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            pss_id_TREADY_int_regslice <= ap_const_logic_1;
        else 
            pss_id_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln164_1_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln164_1_reg_473),63));

        sext_ln164_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_468),63));

        sext_ln166_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln166_fu_407_p2),64));

        sext_ln167_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln167_fu_422_p2),64));

end behav;
