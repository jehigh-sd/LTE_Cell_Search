-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity lteCellSearch_compute_pss_td_pss_real_V_0_rom is 
    generic(
             DWIDTH     : integer := 23; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of lteCellSearch_compute_pss_td_pss_real_V_0_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00100101111110001111001", 1 => "00001010001111001100101", 
    2 => "11011100001011011110110", 3 => "11010111001011001111000", 
    4 => "11111110111010100101001", 5 => "00100100110010101011001", 
    6 => "00101000010110001110000", 7 => "00010001100000101011110", 
    8 => "11110101010111100101101", 9 => "11011111101010010111001", 
    10 => "11010100100101110011100", 11 => "11010010001010111011100", 
    12 => "11010000011100011011111", 13 => "11001100111101011001100", 
    14 => "11001110101011001001110", 15 => "11010110000110101100111", 
    16 => "11011010011110111101001", 17 => "11100000111101001101100", 
    18 => "11111100101010110010111", 19 => "00100101111100111100110", 
    20 => "00110001000100000010110", 21 => "00001011000100110011001", 
    22 => "11100001010011010100000", 23 => "11100100110011001000110", 
    24 => "00000010010101001100001", 25 => "00000111001111110100011", 
    26 => "11110110011111110101100", 27 => "11111011101100101100000", 
    28 => "00010100111111011101001", 29 => "00001111110000000011101", 
    30 => "11100010110000010101000", 31 => "11001000010001111010101", 
    32 => "11100110110010100000001", 33 => "00011001000001010000010", 
    34 => "00101100001010101111010", 35 => "00100101000001000001100", 
    36 => "00100011010100100001000", 37 => "00101001001110100111100", 
    38 => "00100110111001001110001", 39 => "00100000011111010111100", 
    40 => "00100011011100111100101", 41 => "00101010111100001010101", 
    42 => "00101010111101011011100", 43 => "00100010000010110001011", 
    44 => "00001101001010100111001", 45 => "11101000001011110001000", 
    46 => "11001011011011110011001", 47 => "11011110010011110100001", 
    48 => "00010011010101001110111", 49 => "00100100111001000111110", 
    50 => "11111011000000010000000", 51 => "11011011001010101100100", 
    52 => "11111100010100000110110", 53 => "00100101101111010100111", 
    54 => "00001000010100111110100", 55 => "11001000111011110101010", 
    56 => "11001101011000101111010", 57 => "00010111110011010011000", 
    58 => "01000011001100001011010", 59 => "00100100110011000101111", 
    60 => "00000001001100011110110", 61 => "00001001100101001110000", 
    62 => "00010001000000011101101", 63 => "11110001011110110111000", 
    64 => "11011000111010111110110", 65 => "11110001011110110111000", 
    66 => "00010001000000011101101", 67 => "00001001100101001110000", 
    68 => "00000001001100011110110", 69 => "00100100110011000101111", 
    70 => "01000011001100001011010", 71 => "00010111110011010011000", 
    72 => "11001101011000101111010", 73 => "11001000111011110101010", 
    74 => "00001000010100111110100", 75 => "00100101101111010100111", 
    76 => "11111100010100000110110", 77 => "11011011001010101100100", 
    78 => "11111011000000010000000", 79 => "00100100111001000111110", 
    80 => "00010011010101001110111", 81 => "11011110010011110100001", 
    82 => "11001011011011110011001", 83 => "11101000001011110001000", 
    84 => "00001101001010100111001", 85 => "00100010000010110001011", 
    86 => "00101010111101011011100", 87 => "00101010111100001010101", 
    88 => "00100011011100111100101", 89 => "00100000011111010111100", 
    90 => "00100110111001001110001", 91 => "00101001001110100111100", 
    92 => "00100011010100100001000", 93 => "00100101000001000001100", 
    94 => "00101100001010101111010", 95 => "00011001000001010000010", 
    96 => "11100110110010100000001", 97 => "11001000010001111010101", 
    98 => "11100010110000010101000", 99 => "00001111110000000011101", 
    100 => "00010100111111011101001", 101 => "11111011101100101100000", 
    102 => "11110110011111110101100", 103 => "00000111001111110100011", 
    104 => "00000010010101001100001", 105 => "11100100110011001000110", 
    106 => "11100001010011010100000", 107 => "00001011000100110011001", 
    108 => "00110001000100000010110", 109 => "00100101111100111100110", 
    110 => "11111100101010110010111", 111 => "11100000111101001101100", 
    112 => "11011010011110111101001", 113 => "11010110000110101100111", 
    114 => "11001110101011001001110", 115 => "11001100111101011001100", 
    116 => "11010000011100011011111", 117 => "11010010001010111011100", 
    118 => "11010100100101110011100", 119 => "11011111101010010111001", 
    120 => "11110101010111100101101", 121 => "00010001100000101011110", 
    122 => "00101000010110001110000", 123 => "00100100110010101011001", 
    124 => "11111110111010100101001", 125 => "11010111001011001111000", 
    126 => "11011100001011011110110", 127 => "00001010001111001100101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity lteCellSearch_compute_pss_td_pss_real_V_0 is
    generic (
        DataWidth : INTEGER := 23;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of lteCellSearch_compute_pss_td_pss_real_V_0 is
    component lteCellSearch_compute_pss_td_pss_real_V_0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    lteCellSearch_compute_pss_td_pss_real_V_0_rom_U :  component lteCellSearch_compute_pss_td_pss_real_V_0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


