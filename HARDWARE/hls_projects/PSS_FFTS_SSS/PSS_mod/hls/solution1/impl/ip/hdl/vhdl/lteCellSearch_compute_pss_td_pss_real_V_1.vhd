-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity lteCellSearch_compute_pss_td_pss_real_V_1_rom is 
    generic(
             DWIDTH     : integer := 22; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of lteCellSearch_compute_pss_td_pss_real_V_1_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1011000110010000100011", 1 => "1101101100001001111010", 
    2 => "0010110111110001100111", 3 => "0110000010110010110010", 
    4 => "0110000000100011011000", 5 => "0101011011101000001010", 
    6 => "0101111100101010000101", 7 => "0101011101000110000000", 
    8 => "0010000000000011001001", 9 => "1101111001001010001110", 
    10 => "1100101110101111000100", 11 => "1110000100010001011010", 
    12 => "1111000011101011101010", 13 => "0000000101010000110011", 
    14 => "0011011011100011011100", 15 => "0110110001010100001101", 
    16 => "0100100101100101011011", 17 => "1101101110110001101011", 
    18 => "1010100101000010010011", 19 => "1111000110111000111011", 
    20 => "0100010010100111001011", 21 => "0010011101111010101100", 
    22 => "1100011100010100011101", 23 => "1001110000010111111010", 
    24 => "1010111000000111000111", 25 => "1011000001011101100101", 
    26 => "1010001011101000110000", 27 => "1100011000100000001001", 
    28 => "0000101001000001101000", 29 => "0001101011001000111001", 
    30 => "1111100011101010001100", 31 => "1111111111111111100101", 
    32 => "0100001001111010001000", 33 => "0110101001000010101011", 
    34 => "0101010101101110001001", 35 => "0100100100100001100010", 
    36 => "0101111110011111100001", 37 => "0100111111000010101010", 
    38 => "0000001110101100001000", 39 => "1101110110011011000110", 
    40 => "0001000100101011010111", 41 => "0011100000101110010001", 
    42 => "1111011011001100110001", 43 => "1001011101100101111111", 
    44 => "1000101011101010011101", 45 => "1011011000110100000100", 
    46 => "1100011001011010010101", 47 => "1101011101110010110101", 
    48 => "0010011000001011101100", 49 => "0110010110001011001111", 
    50 => "0001111110000101000011", 51 => "1001011001001101011111", 
    52 => "1000010000010011010101", 53 => "1111011110010111101111", 
    54 => "0011010101111111101101", 55 => "1110000101111110001101", 
    56 => "1000100101011001010111", 57 => "1011100000100010001101", 
    58 => "0010001010001011001010", 59 => "0011000011011010111000", 
    60 => "1110001110101100010011", 61 => "1011001100110110110111", 
    62 => "1101011001010110011010", 63 => "0001011110101111011001", 
    64 => "0011010011111001011111", 65 => "0001011110101111011001", 
    66 => "1101011001010110011010", 67 => "1011001100110110110111", 
    68 => "1110001110101100010011", 69 => "0011000011011010111000", 
    70 => "0010001010001011001010", 71 => "1011100000100010001101", 
    72 => "1000100101011001010111", 73 => "1110000101111110001101", 
    74 => "0011010101111111101101", 75 => "1111011110010111101111", 
    76 => "1000010000010011010101", 77 => "1001011001001101011111", 
    78 => "0001111110000101000011", 79 => "0110010110001011001111", 
    80 => "0010011000001011101100", 81 => "1101011101110010110101", 
    82 => "1100011001011010010101", 83 => "1011011000110100000100", 
    84 => "1000101011101010011101", 85 => "1001011101100101111111", 
    86 => "1111011011001100110001", 87 => "0011100000101110010001", 
    88 => "0001000100101011010111", 89 => "1101110110011011000110", 
    90 => "0000001110101100001000", 91 => "0100111111000010101010", 
    92 => "0101111110011111100001", 93 => "0100100100100001100010", 
    94 => "0101010101101110001001", 95 => "0110101001000010101011", 
    96 => "0100001001111010001000", 97 => "1111111111111111100101", 
    98 => "1111100011101010001100", 99 => "0001101011001000111001", 
    100 => "0000101001000001101000", 101 => "1100011000100000001001", 
    102 => "1010001011101000110000", 103 => "1011000001011101100101", 
    104 => "1010111000000111000111", 105 => "1001110000010111111010", 
    106 => "1100011100010100011101", 107 => "0010011101111010101100", 
    108 => "0100010010100111001011", 109 => "1111000110111000111011", 
    110 => "1010100101000010010011", 111 => "1101101110110001101011", 
    112 => "0100100101100101011011", 113 => "0110110001010100001101", 
    114 => "0011011011100011011100", 115 => "0000000101010000110011", 
    116 => "1111000011101011101010", 117 => "1110000100010001011010", 
    118 => "1100101110101111000100", 119 => "1101111001001010001110", 
    120 => "0010000000000011001001", 121 => "0101011101000110000000", 
    122 => "0101111100101010000101", 123 => "0101011011101000001010", 
    124 => "0110000000100011011000", 125 => "0110000010110010110010", 
    126 => "0010110111110001100111", 127 => "1101101100001001111010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity lteCellSearch_compute_pss_td_pss_real_V_1 is
    generic (
        DataWidth : INTEGER := 22;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of lteCellSearch_compute_pss_td_pss_real_V_1 is
    component lteCellSearch_compute_pss_td_pss_real_V_1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    lteCellSearch_compute_pss_td_pss_real_V_1_rom_U :  component lteCellSearch_compute_pss_td_pss_real_V_1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


