-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity lteCellSearch_compute_pss_td_pss_imag_V_1_rom is 
    generic(
             DWIDTH     : integer := 22; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of lteCellSearch_compute_pss_td_pss_imag_V_1_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0011000000000000100001", 1 => "0000001111001000111011", 
    2 => "1011101111010000010110", 3 => "1011111000100011111100", 
    4 => "0001000000101000000110", 5 => "0100011111100100100110", 
    6 => "0001010111101100001111", 7 => "1011011010101100111010", 
    8 => "1010100110111111000101", 9 => "0000010100001000011100", 
    10 => "0101000100101010100101", 11 => "0010100100100111000010", 
    12 => "1100000011101111000100", 13 => "1001010101101100000011", 
    14 => "1011111011000111110010", 15 => "1110000110010001010101", 
    16 => "1100010111010111100010", 17 => "1010011010010101100101", 
    18 => "1100101100111110010101", 19 => "0001100101101101010011", 
    20 => "0100010100010101010010", 21 => "0011111001101001011010", 
    22 => "0010110011000011111000", 23 => "0001101001001110101111", 
    24 => "1111001010100001001011", 25 => "1100111000101110011011", 
    26 => "1110101100011010101100", 27 => "0100001100011111010001", 
    28 => "0111000111010011111011", 29 => "0011010000101011111110", 
    30 => "1100110010101111011100", 31 => "1010111100111011011001", 
    32 => "1110110100100110101101", 33 => "0011010010010110011001", 
    34 => "0100101100010011110111", 35 => "0011111101010110011001", 
    36 => "0010010110101100110011", 37 => "1111010001111111010101", 
    38 => "1011110111110011011100", 39 => "1100001110001010001110", 
    40 => "0001101010100111110111", 41 => "0110111101011110110010", 
    42 => "0110010001011000000000", 43 => "0001010010111011010111", 
    44 => "1111000010111001110111", 45 => "0010000011011011001001", 
    46 => "0101011010011010000010", 47 => "0100100011101100110110", 
    48 => "0001100100010100001010", 49 => "0000111101100010101101", 
    50 => "0010011111100001001100", 51 => "0010000101010100010000", 
    52 => "1110011111010111110000", 53 => "1010111100111010110111", 
    54 => "1010001010011010000110", 55 => "1011010000110100111000", 
    56 => "1100110101000011100011", 57 => "1111011111011000001000", 
    58 => "0011011000010001111111", 59 => "0101100010011100010111", 
    60 => "0011000100100111101100", 61 => "1101110100001001010110", 
    62 => "1010100111111110010000", 63 => "1011000101100111111011", 
    64 => "1100000001110101111101", 65 => "1011000101100111111011", 
    66 => "1010100111111110010000", 67 => "1101110100001001010110", 
    68 => "0011000100100111101100", 69 => "0101100010011100010111", 
    70 => "0011011000010001111111", 71 => "1111011111011000001000", 
    72 => "1100110101000011100011", 73 => "1011010000110100111000", 
    74 => "1010001010011010000110", 75 => "1010111100111010110111", 
    76 => "1110011111010111110000", 77 => "0010000101010100010000", 
    78 => "0010011111100001001100", 79 => "0000111101100010101101", 
    80 => "0001100100010100001010", 81 => "0100100011101100110110", 
    82 => "0101011010011010000010", 83 => "0010000011011011001001", 
    84 => "1111000010111001110111", 85 => "0001010010111011010111", 
    86 => "0110010001011000000000", 87 => "0110111101011110110010", 
    88 => "0001101010100111110111", 89 => "1100001110001010001110", 
    90 => "1011110111110011011100", 91 => "1111010001111111010101", 
    92 => "0010010110101100110011", 93 => "0011111101010110011001", 
    94 => "0100101100010011110111", 95 => "0011010010010110011001", 
    96 => "1110110100100110101101", 97 => "1010111100111011011001", 
    98 => "1100110010101111011100", 99 => "0011010000101011111110", 
    100 => "0111000111010011111011", 101 => "0100001100011111010001", 
    102 => "1110101100011010101100", 103 => "1100111000101110011011", 
    104 => "1111001010100001001011", 105 => "0001101001001110101111", 
    106 => "0010110011000011111000", 107 => "0011111001101001011010", 
    108 => "0100010100010101010010", 109 => "0001100101101101010011", 
    110 => "1100101100111110010101", 111 => "1010011010010101100101", 
    112 => "1100010111010111100010", 113 => "1110000110010001010101", 
    114 => "1011111011000111110010", 115 => "1001010101101100000011", 
    116 => "1100000011101111000100", 117 => "0010100100100111000010", 
    118 => "0101000100101010100101", 119 => "0000010100001000011100", 
    120 => "1010100110111111000101", 121 => "1011011010101100111010", 
    122 => "0001010111101100001111", 123 => "0100011111100100100110", 
    124 => "0001000000101000000110", 125 => "1011111000100011111100", 
    126 => "1011101111010000010110", 127 => "0000001111001000111011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity lteCellSearch_compute_pss_td_pss_imag_V_1 is
    generic (
        DataWidth : INTEGER := 22;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of lteCellSearch_compute_pss_td_pss_imag_V_1 is
    component lteCellSearch_compute_pss_td_pss_imag_V_1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    lteCellSearch_compute_pss_td_pss_imag_V_1_rom_U :  component lteCellSearch_compute_pss_td_pss_imag_V_1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


