-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity lteCellSearch_compute_pss_td_pss_imag_V_0_rom is 
    generic(
             DWIDTH     : integer := 22; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of lteCellSearch_compute_pss_td_pss_imag_V_0_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1100110000100101111001", 1 => "1111101100010000111011", 
    2 => "0011000111100000001111", 3 => "0000000001011000110010", 
    4 => "1001111100000011111111", 5 => "1010000001010101011001", 
    6 => "0000111110101101010100", 7 => "0110010110101101111100", 
    8 => "0101010100001000100000", 9 => "0010001010101110101111", 
    10 => "0001100110111101010001", 11 => "0001110110101101101101", 
    12 => "1111111111011100010101", 13 => "1110001000011110110001", 
    14 => "1111011011101110111001", 15 => "0010001101110011001001", 
    16 => "0011001010110110011110", 17 => "0011001011001111001100", 
    18 => "0100011111011010111110", 19 => "0100101101010100110001", 
    20 => "0000000010101000101101", 21 => "1001101001011001111100", 
    22 => "1001011100110101111101", 23 => "0000010101100001001010", 
    24 => "0101010001111100110111", 25 => "0001101011110111011001", 
    26 => "1010111101111000101011", 27 => "1010101110101110100100", 
    28 => "0001001011011101011001", 29 => "0101100001111001000111", 
    30 => "0010100001010010010101", 31 => "1100010101111011100001", 
    32 => "1001011011000010111000", 33 => "1010100110101011100010", 
    34 => "1100110100110011010100", 35 => "1110100111000010000010", 
    36 => "0000100011010100011111", 37 => "0010011010010010000101", 
    38 => "0011000000000110101110", 39 => "0010010111001000100010", 
    40 => "0001100111001110100001", 41 => "0000110011101100001001", 
    42 => "1110110100110111000010", 43 => "1011101011100110011100", 
    44 => "1001011110111001100001", 45 => "1010011100101000000111", 
    46 => "1110011011111101000001", 47 => "0010101001111100100111", 
    48 => "0011101110110010000010", 49 => "0000101101110011010111", 
    50 => "1100100001101010010000", 51 => "1011100101111011001011", 
    52 => "1111000110100101000111", 53 => "0011001100111100011001", 
    54 => "0011001000110010101111", 55 => "1110110000101110101100", 
    56 => "1010100010011111100100", 57 => "1010010011000110010100", 
    58 => "1101100101111100011000", 59 => "0001011100010101001110", 
    60 => "0011111001001110010000", 61 => "0100111010010110011001", 
    62 => "0101000101100010110011", 63 => "0100111000011111110010", 
    64 => "0100101111001100110000", 65 => "0100111000011111110010", 
    66 => "0101000101100010110011", 67 => "0100111010010110011001", 
    68 => "0011111001001110010000", 69 => "0001011100010101001110", 
    70 => "1101100101111100011000", 71 => "1010010011000110010100", 
    72 => "1010100010011111100100", 73 => "1110110000101110101100", 
    74 => "0011001000110010101111", 75 => "0011001100111100011001", 
    76 => "1111000110100101000111", 77 => "1011100101111011001011", 
    78 => "1100100001101010010000", 79 => "0000101101110011010111", 
    80 => "0011101110110010000010", 81 => "0010101001111100100111", 
    82 => "1110011011111101000001", 83 => "1010011100101000000111", 
    84 => "1001011110111001100001", 85 => "1011101011100110011100", 
    86 => "1110110100110111000010", 87 => "0000110011101100001001", 
    88 => "0001100111001110100001", 89 => "0010010111001000100010", 
    90 => "0011000000000110101110", 91 => "0010011010010010000101", 
    92 => "0000100011010100011111", 93 => "1110100111000010000010", 
    94 => "1100110100110011010100", 95 => "1010100110101011100010", 
    96 => "1001011011000010111000", 97 => "1100010101111011100001", 
    98 => "0010100001010010010101", 99 => "0101100001111001000111", 
    100 => "0001001011011101011001", 101 => "1010101110101110100100", 
    102 => "1010111101111000101011", 103 => "0001101011110111011001", 
    104 => "0101010001111100110111", 105 => "0000010101100001001010", 
    106 => "1001011100110101111101", 107 => "1001101001011001111100", 
    108 => "0000000010101000101101", 109 => "0100101101010100110001", 
    110 => "0100011111011010111110", 111 => "0011001011001111001100", 
    112 => "0011001010110110011110", 113 => "0010001101110011001001", 
    114 => "1111011011101110111001", 115 => "1110001000011110110001", 
    116 => "1111111111011100010101", 117 => "0001110110101101101101", 
    118 => "0001100110111101010001", 119 => "0010001010101110101111", 
    120 => "0101010100001000100000", 121 => "0110010110101101111100", 
    122 => "0000111110101101010100", 123 => "1010000001010101011001", 
    124 => "1001111100000011111111", 125 => "0000000001011000110010", 
    126 => "0011000111100000001111", 127 => "1111101100010000111011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity lteCellSearch_compute_pss_td_pss_imag_V_0 is
    generic (
        DataWidth : INTEGER := 22;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of lteCellSearch_compute_pss_td_pss_imag_V_0 is
    component lteCellSearch_compute_pss_td_pss_imag_V_0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    lteCellSearch_compute_pss_td_pss_imag_V_0_rom_U :  component lteCellSearch_compute_pss_td_pss_imag_V_0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


