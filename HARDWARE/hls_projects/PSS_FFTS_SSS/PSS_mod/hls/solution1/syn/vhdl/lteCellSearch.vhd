-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lteCellSearch is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    IN_R_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    IN_R_TVALID : IN STD_LOGIC;
    IN_R_TREADY : OUT STD_LOGIC;
    IN_R_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
    IN_R_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
    IN_R_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    IN_I_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    IN_I_TVALID : IN STD_LOGIC;
    IN_I_TREADY : OUT STD_LOGIC;
    IN_I_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
    IN_I_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
    IN_I_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    OUT_FFT_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    OUT_FFT_TVALID : OUT STD_LOGIC;
    OUT_FFT_TREADY : IN STD_LOGIC;
    OUT_FFT_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_FFT_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_FFT_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    pss_id_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    pss_id_TVALID : OUT STD_LOGIC;
    pss_id_TREADY : IN STD_LOGIC;
    pss_id_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    pss_id_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    pss_id_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of lteCellSearch is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "lteCellSearch_lteCellSearch,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=16.299999,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=11.898999,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=461,HLS_SYN_DSP=0,HLS_SYN_FF=4981,HLS_SYN_LUT=28079,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_17700 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010111011100000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv19_46500 : STD_LOGIC_VECTOR (18 downto 0) := "1000110010100000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv17_17700 : STD_LOGIC_VECTOR (16 downto 0) := "10111011100000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv19_17700 : STD_LOGIC_VECTOR (18 downto 0) := "0010111011100000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal OUT_PSS_ID_ap_vld : STD_LOGIC;
    signal OUT_PEAK_INDEX_ap_vld : STD_LOGIC;
    signal OUT_RSLT : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal icmp_ln878_1_reg_609 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_1_reg_609_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal IN_R_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln878_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal IN_I_TDATA_blk_n : STD_LOGIC;
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal i_V_1_reg_326 : STD_LOGIC_VECTOR (16 downto 0);
    signal OUT_RSLT_read_reg_542 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_91_fu_408_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln691_fu_425_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_state4 : BOOLEAN;
    signal zext_ln267_fu_497_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln267_reg_589 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal mul_ln203_fu_503_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln203_reg_594 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln267_1_fu_509_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln267_1_reg_599 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln691_1_fu_512_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state9_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state11_io : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln878_1_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pss_rslt_temp_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal pss_rslt_temp_load_reg_618 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal grp_write_buffer_fft_fu_374_ap_ready : STD_LOGIC;
    signal grp_write_buffer_fft_fu_374_ap_done : STD_LOGIC;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state9 : STD_LOGIC;
    signal pss_rslt_temp_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal pss_rslt_temp_ce0 : STD_LOGIC;
    signal pss_rslt_temp_we0 : STD_LOGIC;
    signal pss_rslt_temp_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal pss_rslt_temp_ce1 : STD_LOGIC;
    signal pss_rslt_temp_we1 : STD_LOGIC;
    signal IN_real_V_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal IN_real_V_ce0 : STD_LOGIC;
    signal IN_real_V_we0 : STD_LOGIC;
    signal IN_real_V_d0 : STD_LOGIC_VECTOR (22 downto 0);
    signal IN_real_V_q0 : STD_LOGIC_VECTOR (22 downto 0);
    signal IN_real_V_ce1 : STD_LOGIC;
    signal IN_real_V_q1 : STD_LOGIC_VECTOR (22 downto 0);
    signal IN_imag_V_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal IN_imag_V_ce0 : STD_LOGIC;
    signal IN_imag_V_we0 : STD_LOGIC;
    signal IN_imag_V_d0 : STD_LOGIC_VECTOR (22 downto 0);
    signal IN_imag_V_q0 : STD_LOGIC_VECTOR (22 downto 0);
    signal IN_imag_V_ce1 : STD_LOGIC;
    signal IN_imag_V_q1 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_337_IN_real_V_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_337_IN_real_V_ce0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_337_IN_real_V_d0 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_337_IN_real_V_we0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_337_IN_real_V_address1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_337_IN_real_V_ce1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_337_IN_real_V_d1 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_337_IN_real_V_we1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_337_IN_imag_V_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_337_IN_imag_V_ce0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_337_IN_imag_V_d0 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_337_IN_imag_V_we0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_337_IN_imag_V_address1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_337_IN_imag_V_ce1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_337_IN_imag_V_d1 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_337_IN_imag_V_we1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_337_pss_id_temp : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_337_peak_id_temp : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_337_pss_rslt_temp_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_337_pss_rslt_temp_ce0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_337_pss_rslt_temp_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_337_pss_rslt_temp_we0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_337_pss_rslt_temp_address1 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_337_pss_rslt_temp_ce1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_337_pss_rslt_temp_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_337_pss_rslt_temp_we1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_337_pss_id_temp_ap_vld : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_337_peak_id_temp_ap_vld : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_337_ap_start : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_337_ap_done : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_337_ap_ready : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_337_ap_idle : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_337_ap_continue : STD_LOGIC;
    signal grp_write_buffer_fft_fu_374_ap_start : STD_LOGIC;
    signal grp_write_buffer_fft_fu_374_ap_idle : STD_LOGIC;
    signal grp_write_buffer_fft_fu_374_IN_real_V_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_write_buffer_fft_fu_374_IN_real_V_ce0 : STD_LOGIC;
    signal grp_write_buffer_fft_fu_374_IN_imag_V_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_write_buffer_fft_fu_374_IN_imag_V_ce0 : STD_LOGIC;
    signal grp_write_buffer_fft_fu_374_OUT_FFT_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_write_buffer_fft_fu_374_OUT_FFT_TVALID : STD_LOGIC;
    signal grp_write_buffer_fft_fu_374_OUT_FFT_TREADY : STD_LOGIC;
    signal grp_write_buffer_fft_fu_374_OUT_FFT_TKEEP : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_write_buffer_fft_fu_374_OUT_FFT_TSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_write_buffer_fft_fu_374_OUT_FFT_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_write_buffer_fft_fu_374_pss_id_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_write_buffer_fft_fu_374_pss_id_TVALID : STD_LOGIC;
    signal grp_write_buffer_fft_fu_374_pss_id_TREADY : STD_LOGIC;
    signal grp_write_buffer_fft_fu_374_pss_id_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_buffer_fft_fu_374_pss_id_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_buffer_fft_fu_374_pss_id_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_304 : STD_LOGIC_VECTOR (18 downto 0);
    signal exitcond894_i_i_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_V_reg_315 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_dataflow_parent_loop_proc_fu_337_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_sync_grp_dataflow_parent_loop_proc_fu_337_ap_ready : STD_LOGIC;
    signal ap_sync_grp_dataflow_parent_loop_proc_fu_337_ap_done : STD_LOGIC;
    signal ap_block_state6_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_dataflow_parent_loop_proc_fu_337_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_dataflow_parent_loop_proc_fu_337_ap_done : STD_LOGIC := '0';
    signal pss_id_temp_fu_180 : STD_LOGIC_VECTOR (1 downto 0);
    signal peak_id_temp_fu_184 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_write_buffer_fft_fu_374_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal p_cast_fu_420_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln878_fu_437_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln203_3_fu_533_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln203_fu_478_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal regslice_both_OUT_FFT_V_data_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_pss_id_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state16 : BOOLEAN;
    signal ap_block_pp2_stage0_01001 : BOOLEAN;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal trunc_ln_fu_469_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal mul_ln203_fu_503_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln203_fu_503_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln203_2_fu_524_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln203_fu_528_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal regslice_both_IN_R_V_data_V_U_apdone_blk : STD_LOGIC;
    signal IN_R_TDATA_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal IN_R_TVALID_int_regslice : STD_LOGIC;
    signal IN_R_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_IN_R_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_IN_R_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal IN_R_TKEEP_int_regslice : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_IN_R_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_IN_R_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_IN_R_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal IN_R_TSTRB_int_regslice : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_IN_R_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_IN_R_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_IN_R_V_last_V_U_apdone_blk : STD_LOGIC;
    signal IN_R_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_IN_R_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_IN_R_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_IN_I_V_data_V_U_apdone_blk : STD_LOGIC;
    signal IN_I_TDATA_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal IN_I_TVALID_int_regslice : STD_LOGIC;
    signal IN_I_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_IN_I_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_IN_I_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal IN_I_TKEEP_int_regslice : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_IN_I_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_IN_I_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_IN_I_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal IN_I_TSTRB_int_regslice : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_IN_I_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_IN_I_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_IN_I_V_last_V_U_apdone_blk : STD_LOGIC;
    signal IN_I_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_IN_I_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_IN_I_V_last_V_U_ack_in : STD_LOGIC;
    signal OUT_FFT_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_OUT_FFT_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUT_FFT_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUT_FFT_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUT_FFT_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUT_FFT_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUT_FFT_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUT_FFT_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUT_FFT_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUT_FFT_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUT_FFT_V_last_V_U_vld_out : STD_LOGIC;
    signal pss_id_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_pss_id_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_pss_id_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_pss_id_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_pss_id_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_pss_id_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_pss_id_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_pss_id_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_pss_id_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_pss_id_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_pss_id_V_last_V_U_vld_out : STD_LOGIC;
    signal mul_ln203_fu_503_p00 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component lteCellSearch_dataflow_parent_loop_proc IS
    port (
        IN_real_V_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        IN_real_V_ce0 : OUT STD_LOGIC;
        IN_real_V_d0 : OUT STD_LOGIC_VECTOR (22 downto 0);
        IN_real_V_q0 : IN STD_LOGIC_VECTOR (22 downto 0);
        IN_real_V_we0 : OUT STD_LOGIC;
        IN_real_V_address1 : OUT STD_LOGIC_VECTOR (16 downto 0);
        IN_real_V_ce1 : OUT STD_LOGIC;
        IN_real_V_d1 : OUT STD_LOGIC_VECTOR (22 downto 0);
        IN_real_V_q1 : IN STD_LOGIC_VECTOR (22 downto 0);
        IN_real_V_we1 : OUT STD_LOGIC;
        IN_imag_V_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        IN_imag_V_ce0 : OUT STD_LOGIC;
        IN_imag_V_d0 : OUT STD_LOGIC_VECTOR (22 downto 0);
        IN_imag_V_q0 : IN STD_LOGIC_VECTOR (22 downto 0);
        IN_imag_V_we0 : OUT STD_LOGIC;
        IN_imag_V_address1 : OUT STD_LOGIC_VECTOR (16 downto 0);
        IN_imag_V_ce1 : OUT STD_LOGIC;
        IN_imag_V_d1 : OUT STD_LOGIC_VECTOR (22 downto 0);
        IN_imag_V_q1 : IN STD_LOGIC_VECTOR (22 downto 0);
        IN_imag_V_we1 : OUT STD_LOGIC;
        pss_id_temp : OUT STD_LOGIC_VECTOR (1 downto 0);
        peak_id_temp : OUT STD_LOGIC_VECTOR (16 downto 0);
        pss_rslt_temp_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        pss_rslt_temp_ce0 : OUT STD_LOGIC;
        pss_rslt_temp_d0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        pss_rslt_temp_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
        pss_rslt_temp_we0 : OUT STD_LOGIC;
        pss_rslt_temp_address1 : OUT STD_LOGIC_VECTOR (18 downto 0);
        pss_rslt_temp_ce1 : OUT STD_LOGIC;
        pss_rslt_temp_d1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        pss_rslt_temp_q1 : IN STD_LOGIC_VECTOR (11 downto 0);
        pss_rslt_temp_we1 : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        pss_id_temp_ap_vld : OUT STD_LOGIC;
        peak_id_temp_ap_vld : OUT STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component lteCellSearch_write_buffer_fft IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        IN_real_V_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        IN_real_V_ce0 : OUT STD_LOGIC;
        IN_real_V_q0 : IN STD_LOGIC_VECTOR (22 downto 0);
        IN_imag_V_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        IN_imag_V_ce0 : OUT STD_LOGIC;
        IN_imag_V_q0 : IN STD_LOGIC_VECTOR (22 downto 0);
        OUT_FFT_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        OUT_FFT_TVALID : OUT STD_LOGIC;
        OUT_FFT_TREADY : IN STD_LOGIC;
        OUT_FFT_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
        OUT_FFT_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        OUT_FFT_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        index : IN STD_LOGIC_VECTOR (16 downto 0);
        pss_id : IN STD_LOGIC_VECTOR (1 downto 0);
        pss_id_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        pss_id_TVALID : OUT STD_LOGIC;
        pss_id_TREADY : IN STD_LOGIC;
        pss_id_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        pss_id_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        pss_id_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lteCellSearch_mul_2ns_18ns_19_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component lteCellSearch_pss_rslt_temp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (18 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (11 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address1 : IN STD_LOGIC_VECTOR (18 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component lteCellSearch_IN_real_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (22 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (22 downto 0);
        address1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component lteCellSearch_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        OUT_PSS_ID : IN STD_LOGIC_VECTOR (31 downto 0);
        OUT_PSS_ID_ap_vld : IN STD_LOGIC;
        OUT_PEAK_INDEX : IN STD_LOGIC_VECTOR (31 downto 0);
        OUT_PEAK_INDEX_ap_vld : IN STD_LOGIC;
        OUT_RSLT : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component lteCellSearch_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lteCellSearch_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    control_s_axi_U : component lteCellSearch_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        OUT_PSS_ID => zext_ln267_1_reg_599,
        OUT_PSS_ID_ap_vld => OUT_PSS_ID_ap_vld,
        OUT_PEAK_INDEX => zext_ln267_reg_589,
        OUT_PEAK_INDEX_ap_vld => OUT_PEAK_INDEX_ap_vld,
        OUT_RSLT => OUT_RSLT,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    gmem_m_axi_U : component lteCellSearch_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => sext_ln203_fu_478_p1,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_17700,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => gmem_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    pss_rslt_temp_U : component lteCellSearch_pss_rslt_temp
    generic map (
        DataWidth => 12,
        AddressRange => 288000,
        AddressWidth => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => pss_rslt_temp_address0,
        ce0 => pss_rslt_temp_ce0,
        we0 => pss_rslt_temp_we0,
        d0 => pss_rslt_temp_d0,
        q0 => pss_rslt_temp_q0,
        address1 => grp_dataflow_parent_loop_proc_fu_337_pss_rslt_temp_address1,
        ce1 => pss_rslt_temp_ce1,
        we1 => pss_rslt_temp_we1,
        d1 => grp_dataflow_parent_loop_proc_fu_337_pss_rslt_temp_d1);

    IN_real_V_U : component lteCellSearch_IN_real_V
    generic map (
        DataWidth => 23,
        AddressRange => 96000,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => IN_real_V_address0,
        ce0 => IN_real_V_ce0,
        we0 => IN_real_V_we0,
        d0 => IN_real_V_d0,
        q0 => IN_real_V_q0,
        address1 => grp_dataflow_parent_loop_proc_fu_337_IN_real_V_address1,
        ce1 => IN_real_V_ce1,
        q1 => IN_real_V_q1);

    IN_imag_V_U : component lteCellSearch_IN_real_V
    generic map (
        DataWidth => 23,
        AddressRange => 96000,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => IN_imag_V_address0,
        ce0 => IN_imag_V_ce0,
        we0 => IN_imag_V_we0,
        d0 => IN_imag_V_d0,
        q0 => IN_imag_V_q0,
        address1 => grp_dataflow_parent_loop_proc_fu_337_IN_imag_V_address1,
        ce1 => IN_imag_V_ce1,
        q1 => IN_imag_V_q1);

    grp_dataflow_parent_loop_proc_fu_337 : component lteCellSearch_dataflow_parent_loop_proc
    port map (
        IN_real_V_address0 => grp_dataflow_parent_loop_proc_fu_337_IN_real_V_address0,
        IN_real_V_ce0 => grp_dataflow_parent_loop_proc_fu_337_IN_real_V_ce0,
        IN_real_V_d0 => grp_dataflow_parent_loop_proc_fu_337_IN_real_V_d0,
        IN_real_V_q0 => IN_real_V_q0,
        IN_real_V_we0 => grp_dataflow_parent_loop_proc_fu_337_IN_real_V_we0,
        IN_real_V_address1 => grp_dataflow_parent_loop_proc_fu_337_IN_real_V_address1,
        IN_real_V_ce1 => grp_dataflow_parent_loop_proc_fu_337_IN_real_V_ce1,
        IN_real_V_d1 => grp_dataflow_parent_loop_proc_fu_337_IN_real_V_d1,
        IN_real_V_q1 => IN_real_V_q1,
        IN_real_V_we1 => grp_dataflow_parent_loop_proc_fu_337_IN_real_V_we1,
        IN_imag_V_address0 => grp_dataflow_parent_loop_proc_fu_337_IN_imag_V_address0,
        IN_imag_V_ce0 => grp_dataflow_parent_loop_proc_fu_337_IN_imag_V_ce0,
        IN_imag_V_d0 => grp_dataflow_parent_loop_proc_fu_337_IN_imag_V_d0,
        IN_imag_V_q0 => IN_imag_V_q0,
        IN_imag_V_we0 => grp_dataflow_parent_loop_proc_fu_337_IN_imag_V_we0,
        IN_imag_V_address1 => grp_dataflow_parent_loop_proc_fu_337_IN_imag_V_address1,
        IN_imag_V_ce1 => grp_dataflow_parent_loop_proc_fu_337_IN_imag_V_ce1,
        IN_imag_V_d1 => grp_dataflow_parent_loop_proc_fu_337_IN_imag_V_d1,
        IN_imag_V_q1 => IN_imag_V_q1,
        IN_imag_V_we1 => grp_dataflow_parent_loop_proc_fu_337_IN_imag_V_we1,
        pss_id_temp => grp_dataflow_parent_loop_proc_fu_337_pss_id_temp,
        peak_id_temp => grp_dataflow_parent_loop_proc_fu_337_peak_id_temp,
        pss_rslt_temp_address0 => grp_dataflow_parent_loop_proc_fu_337_pss_rslt_temp_address0,
        pss_rslt_temp_ce0 => grp_dataflow_parent_loop_proc_fu_337_pss_rslt_temp_ce0,
        pss_rslt_temp_d0 => grp_dataflow_parent_loop_proc_fu_337_pss_rslt_temp_d0,
        pss_rslt_temp_q0 => ap_const_lv12_0,
        pss_rslt_temp_we0 => grp_dataflow_parent_loop_proc_fu_337_pss_rslt_temp_we0,
        pss_rslt_temp_address1 => grp_dataflow_parent_loop_proc_fu_337_pss_rslt_temp_address1,
        pss_rslt_temp_ce1 => grp_dataflow_parent_loop_proc_fu_337_pss_rslt_temp_ce1,
        pss_rslt_temp_d1 => grp_dataflow_parent_loop_proc_fu_337_pss_rslt_temp_d1,
        pss_rslt_temp_q1 => ap_const_lv12_0,
        pss_rslt_temp_we1 => grp_dataflow_parent_loop_proc_fu_337_pss_rslt_temp_we1,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        pss_id_temp_ap_vld => grp_dataflow_parent_loop_proc_fu_337_pss_id_temp_ap_vld,
        peak_id_temp_ap_vld => grp_dataflow_parent_loop_proc_fu_337_peak_id_temp_ap_vld,
        ap_start => grp_dataflow_parent_loop_proc_fu_337_ap_start,
        ap_done => grp_dataflow_parent_loop_proc_fu_337_ap_done,
        ap_ready => grp_dataflow_parent_loop_proc_fu_337_ap_ready,
        ap_idle => grp_dataflow_parent_loop_proc_fu_337_ap_idle,
        ap_continue => grp_dataflow_parent_loop_proc_fu_337_ap_continue);

    grp_write_buffer_fft_fu_374 : component lteCellSearch_write_buffer_fft
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_write_buffer_fft_fu_374_ap_start,
        ap_done => grp_write_buffer_fft_fu_374_ap_done,
        ap_idle => grp_write_buffer_fft_fu_374_ap_idle,
        ap_ready => grp_write_buffer_fft_fu_374_ap_ready,
        IN_real_V_address0 => grp_write_buffer_fft_fu_374_IN_real_V_address0,
        IN_real_V_ce0 => grp_write_buffer_fft_fu_374_IN_real_V_ce0,
        IN_real_V_q0 => IN_real_V_q0,
        IN_imag_V_address0 => grp_write_buffer_fft_fu_374_IN_imag_V_address0,
        IN_imag_V_ce0 => grp_write_buffer_fft_fu_374_IN_imag_V_ce0,
        IN_imag_V_q0 => IN_imag_V_q0,
        OUT_FFT_TDATA => grp_write_buffer_fft_fu_374_OUT_FFT_TDATA,
        OUT_FFT_TVALID => grp_write_buffer_fft_fu_374_OUT_FFT_TVALID,
        OUT_FFT_TREADY => grp_write_buffer_fft_fu_374_OUT_FFT_TREADY,
        OUT_FFT_TKEEP => grp_write_buffer_fft_fu_374_OUT_FFT_TKEEP,
        OUT_FFT_TSTRB => grp_write_buffer_fft_fu_374_OUT_FFT_TSTRB,
        OUT_FFT_TLAST => grp_write_buffer_fft_fu_374_OUT_FFT_TLAST,
        index => peak_id_temp_fu_184,
        pss_id => pss_id_temp_fu_180,
        pss_id_TDATA => grp_write_buffer_fft_fu_374_pss_id_TDATA,
        pss_id_TVALID => grp_write_buffer_fft_fu_374_pss_id_TVALID,
        pss_id_TREADY => grp_write_buffer_fft_fu_374_pss_id_TREADY,
        pss_id_TKEEP => grp_write_buffer_fft_fu_374_pss_id_TKEEP,
        pss_id_TSTRB => grp_write_buffer_fft_fu_374_pss_id_TSTRB,
        pss_id_TLAST => grp_write_buffer_fft_fu_374_pss_id_TLAST);

    mul_2ns_18ns_19_1_1_U95 : component lteCellSearch_mul_2ns_18ns_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 18,
        dout_WIDTH => 19)
    port map (
        din0 => mul_ln203_fu_503_p0,
        din1 => mul_ln203_fu_503_p1,
        dout => mul_ln203_fu_503_p2);

    regslice_both_IN_R_V_data_V_U : component lteCellSearch_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => IN_R_TDATA,
        vld_in => IN_R_TVALID,
        ack_in => regslice_both_IN_R_V_data_V_U_ack_in,
        data_out => IN_R_TDATA_int_regslice,
        vld_out => IN_R_TVALID_int_regslice,
        ack_out => IN_R_TREADY_int_regslice,
        apdone_blk => regslice_both_IN_R_V_data_V_U_apdone_blk);

    regslice_both_IN_R_V_keep_V_U : component lteCellSearch_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => IN_R_TKEEP,
        vld_in => IN_R_TVALID,
        ack_in => regslice_both_IN_R_V_keep_V_U_ack_in,
        data_out => IN_R_TKEEP_int_regslice,
        vld_out => regslice_both_IN_R_V_keep_V_U_vld_out,
        ack_out => IN_R_TREADY_int_regslice,
        apdone_blk => regslice_both_IN_R_V_keep_V_U_apdone_blk);

    regslice_both_IN_R_V_strb_V_U : component lteCellSearch_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => IN_R_TSTRB,
        vld_in => IN_R_TVALID,
        ack_in => regslice_both_IN_R_V_strb_V_U_ack_in,
        data_out => IN_R_TSTRB_int_regslice,
        vld_out => regslice_both_IN_R_V_strb_V_U_vld_out,
        ack_out => IN_R_TREADY_int_regslice,
        apdone_blk => regslice_both_IN_R_V_strb_V_U_apdone_blk);

    regslice_both_IN_R_V_last_V_U : component lteCellSearch_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => IN_R_TLAST,
        vld_in => IN_R_TVALID,
        ack_in => regslice_both_IN_R_V_last_V_U_ack_in,
        data_out => IN_R_TLAST_int_regslice,
        vld_out => regslice_both_IN_R_V_last_V_U_vld_out,
        ack_out => IN_R_TREADY_int_regslice,
        apdone_blk => regslice_both_IN_R_V_last_V_U_apdone_blk);

    regslice_both_IN_I_V_data_V_U : component lteCellSearch_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => IN_I_TDATA,
        vld_in => IN_I_TVALID,
        ack_in => regslice_both_IN_I_V_data_V_U_ack_in,
        data_out => IN_I_TDATA_int_regslice,
        vld_out => IN_I_TVALID_int_regslice,
        ack_out => IN_I_TREADY_int_regslice,
        apdone_blk => regslice_both_IN_I_V_data_V_U_apdone_blk);

    regslice_both_IN_I_V_keep_V_U : component lteCellSearch_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => IN_I_TKEEP,
        vld_in => IN_I_TVALID,
        ack_in => regslice_both_IN_I_V_keep_V_U_ack_in,
        data_out => IN_I_TKEEP_int_regslice,
        vld_out => regslice_both_IN_I_V_keep_V_U_vld_out,
        ack_out => IN_I_TREADY_int_regslice,
        apdone_blk => regslice_both_IN_I_V_keep_V_U_apdone_blk);

    regslice_both_IN_I_V_strb_V_U : component lteCellSearch_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => IN_I_TSTRB,
        vld_in => IN_I_TVALID,
        ack_in => regslice_both_IN_I_V_strb_V_U_ack_in,
        data_out => IN_I_TSTRB_int_regslice,
        vld_out => regslice_both_IN_I_V_strb_V_U_vld_out,
        ack_out => IN_I_TREADY_int_regslice,
        apdone_blk => regslice_both_IN_I_V_strb_V_U_apdone_blk);

    regslice_both_IN_I_V_last_V_U : component lteCellSearch_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => IN_I_TLAST,
        vld_in => IN_I_TVALID,
        ack_in => regslice_both_IN_I_V_last_V_U_ack_in,
        data_out => IN_I_TLAST_int_regslice,
        vld_out => regslice_both_IN_I_V_last_V_U_vld_out,
        ack_out => IN_I_TREADY_int_regslice,
        apdone_blk => regslice_both_IN_I_V_last_V_U_apdone_blk);

    regslice_both_OUT_FFT_V_data_V_U : component lteCellSearch_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_write_buffer_fft_fu_374_OUT_FFT_TDATA,
        vld_in => grp_write_buffer_fft_fu_374_OUT_FFT_TVALID,
        ack_in => OUT_FFT_TREADY_int_regslice,
        data_out => OUT_FFT_TDATA,
        vld_out => regslice_both_OUT_FFT_V_data_V_U_vld_out,
        ack_out => OUT_FFT_TREADY,
        apdone_blk => regslice_both_OUT_FFT_V_data_V_U_apdone_blk);

    regslice_both_OUT_FFT_V_keep_V_U : component lteCellSearch_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_write_buffer_fft_fu_374_OUT_FFT_TKEEP,
        vld_in => grp_write_buffer_fft_fu_374_OUT_FFT_TVALID,
        ack_in => regslice_both_OUT_FFT_V_keep_V_U_ack_in_dummy,
        data_out => OUT_FFT_TKEEP,
        vld_out => regslice_both_OUT_FFT_V_keep_V_U_vld_out,
        ack_out => OUT_FFT_TREADY,
        apdone_blk => regslice_both_OUT_FFT_V_keep_V_U_apdone_blk);

    regslice_both_OUT_FFT_V_strb_V_U : component lteCellSearch_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_write_buffer_fft_fu_374_OUT_FFT_TSTRB,
        vld_in => grp_write_buffer_fft_fu_374_OUT_FFT_TVALID,
        ack_in => regslice_both_OUT_FFT_V_strb_V_U_ack_in_dummy,
        data_out => OUT_FFT_TSTRB,
        vld_out => regslice_both_OUT_FFT_V_strb_V_U_vld_out,
        ack_out => OUT_FFT_TREADY,
        apdone_blk => regslice_both_OUT_FFT_V_strb_V_U_apdone_blk);

    regslice_both_OUT_FFT_V_last_V_U : component lteCellSearch_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_write_buffer_fft_fu_374_OUT_FFT_TLAST,
        vld_in => grp_write_buffer_fft_fu_374_OUT_FFT_TVALID,
        ack_in => regslice_both_OUT_FFT_V_last_V_U_ack_in_dummy,
        data_out => OUT_FFT_TLAST,
        vld_out => regslice_both_OUT_FFT_V_last_V_U_vld_out,
        ack_out => OUT_FFT_TREADY,
        apdone_blk => regslice_both_OUT_FFT_V_last_V_U_apdone_blk);

    regslice_both_pss_id_V_data_V_U : component lteCellSearch_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_write_buffer_fft_fu_374_pss_id_TDATA,
        vld_in => grp_write_buffer_fft_fu_374_pss_id_TVALID,
        ack_in => pss_id_TREADY_int_regslice,
        data_out => pss_id_TDATA,
        vld_out => regslice_both_pss_id_V_data_V_U_vld_out,
        ack_out => pss_id_TREADY,
        apdone_blk => regslice_both_pss_id_V_data_V_U_apdone_blk);

    regslice_both_pss_id_V_keep_V_U : component lteCellSearch_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_write_buffer_fft_fu_374_pss_id_TKEEP,
        vld_in => grp_write_buffer_fft_fu_374_pss_id_TVALID,
        ack_in => regslice_both_pss_id_V_keep_V_U_ack_in_dummy,
        data_out => pss_id_TKEEP,
        vld_out => regslice_both_pss_id_V_keep_V_U_vld_out,
        ack_out => pss_id_TREADY,
        apdone_blk => regslice_both_pss_id_V_keep_V_U_apdone_blk);

    regslice_both_pss_id_V_strb_V_U : component lteCellSearch_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_write_buffer_fft_fu_374_pss_id_TSTRB,
        vld_in => grp_write_buffer_fft_fu_374_pss_id_TVALID,
        ack_in => regslice_both_pss_id_V_strb_V_U_ack_in_dummy,
        data_out => pss_id_TSTRB,
        vld_out => regslice_both_pss_id_V_strb_V_U_vld_out,
        ack_out => pss_id_TREADY,
        apdone_blk => regslice_both_pss_id_V_strb_V_U_apdone_blk);

    regslice_both_pss_id_V_last_V_U : component lteCellSearch_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_write_buffer_fft_fu_374_pss_id_TLAST,
        vld_in => grp_write_buffer_fft_fu_374_pss_id_TVALID,
        ack_in => regslice_both_pss_id_V_last_V_U_ack_in_dummy,
        data_out => pss_id_TLAST,
        vld_out => regslice_both_pss_id_V_last_V_U_vld_out,
        ack_out => pss_id_TREADY,
        apdone_blk => regslice_both_pss_id_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((grp_write_buffer_fft_fu_374_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state9)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif (((grp_write_buffer_fft_fu_374_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_337_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_dataflow_parent_loop_proc_fu_337_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done))) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_337_ap_done <= ap_const_logic_0;
                elsif ((grp_dataflow_parent_loop_proc_fu_337_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_337_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_337_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_dataflow_parent_loop_proc_fu_337_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done))) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_337_ap_ready <= ap_const_logic_0;
                elsif ((grp_dataflow_parent_loop_proc_fu_337_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_337_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_dataflow_parent_loop_proc_fu_337_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_dataflow_parent_loop_proc_fu_337_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_sync_grp_dataflow_parent_loop_proc_fu_337_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
                    grp_dataflow_parent_loop_proc_fu_337_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dataflow_parent_loop_proc_fu_337_ap_ready = ap_const_logic_1)) then 
                    grp_dataflow_parent_loop_proc_fu_337_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_write_buffer_fft_fu_374_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_write_buffer_fft_fu_374_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_write_buffer_fft_fu_374_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_write_buffer_fft_fu_374_ap_ready = ap_const_logic_1)) then 
                    grp_write_buffer_fft_fu_374_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    empty_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond894_i_i_fu_414_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                empty_reg_304 <= empty_91_fu_408_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                empty_reg_304 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;

    i_V_1_reg_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_write_buffer_fft_fu_374_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i_V_1_reg_326 <= ap_const_lv17_0;
            elsif (((icmp_ln878_1_fu_518_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                i_V_1_reg_326 <= add_ln691_1_fu_512_p2;
            end if; 
        end if;
    end process;

    i_V_reg_315_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_V_reg_315 <= ap_const_lv17_0;
            elsif ((not((((ap_const_logic_0 = IN_I_TVALID_int_regslice) and (icmp_ln878_fu_431_p2 = ap_const_lv1_0)) or ((ap_const_logic_0 = IN_R_TVALID_int_regslice) and (icmp_ln878_fu_431_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln878_fu_431_p2 = ap_const_lv1_0))) then 
                i_V_reg_315 <= add_ln691_fu_425_p2;
            end if; 
        end if;
    end process;

    peak_id_temp_fu_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                peak_id_temp_fu_184 <= ap_const_lv17_0;
            elsif (((grp_dataflow_parent_loop_proc_fu_337_peak_id_temp_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                peak_id_temp_fu_184 <= grp_dataflow_parent_loop_proc_fu_337_peak_id_temp;
            end if; 
        end if;
    end process;

    pss_id_temp_fu_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                pss_id_temp_fu_180 <= ap_const_lv2_0;
            elsif (((grp_dataflow_parent_loop_proc_fu_337_pss_id_temp_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                pss_id_temp_fu_180 <= grp_dataflow_parent_loop_proc_fu_337_pss_id_temp;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                OUT_RSLT_read_reg_542 <= OUT_RSLT;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln878_1_reg_609 <= icmp_ln878_1_fu_518_p2;
                icmp_ln878_1_reg_609_pp2_iter1_reg <= icmp_ln878_1_reg_609;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                mul_ln203_reg_594 <= mul_ln203_fu_503_p2;
                    zext_ln267_1_reg_599(1 downto 0) <= zext_ln267_1_fu_509_p1(1 downto 0);
                    zext_ln267_reg_589(16 downto 0) <= zext_ln267_fu_497_p1(16 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln878_1_reg_609 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                pss_rslt_temp_load_reg_618 <= pss_rslt_temp_q0;
            end if;
        end if;
    end process;
    zext_ln267_reg_589(31 downto 17) <= "000000000000000";
    zext_ln267_1_reg_599(31 downto 2) <= "000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state5, ap_enable_reg_pp2_iter2, ap_CS_fsm_state16, ap_CS_fsm_state4, icmp_ln878_fu_431_p2, gmem_AWREADY, gmem_BVALID, ap_CS_fsm_state2, ap_CS_fsm_state8, ap_enable_reg_pp2_iter0, icmp_ln878_1_fu_518_p2, ap_enable_reg_pp2_iter1, grp_write_buffer_fft_fu_374_ap_done, ap_block_pp2_stage0_subdone, exitcond894_i_i_fu_414_p2, ap_CS_fsm_state6, ap_block_state6_on_subcall_done, regslice_both_OUT_FFT_V_data_V_U_apdone_blk, regslice_both_pss_id_V_data_V_U_apdone_blk, IN_R_TVALID_int_regslice, IN_I_TVALID_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond894_i_i_fu_414_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if ((not((((ap_const_logic_0 = IN_I_TVALID_int_regslice) and (icmp_ln878_fu_431_p2 = ap_const_lv1_0)) or ((ap_const_logic_0 = IN_R_TVALID_int_regslice) and (icmp_ln878_fu_431_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln878_fu_431_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not((((ap_const_logic_0 = IN_I_TVALID_int_regslice) and (icmp_ln878_fu_431_p2 = ap_const_lv1_0)) or ((ap_const_logic_0 = IN_R_TVALID_int_regslice) and (icmp_ln878_fu_431_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln878_fu_431_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_write_buffer_fft_fu_374_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln878_1_fu_518_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln878_1_fu_518_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if ((not(((regslice_both_pss_id_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_OUT_FFT_V_data_V_U_apdone_blk = ap_const_logic_1) or (gmem_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;

    IN_I_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state4, icmp_ln878_fu_431_p2, IN_I_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln878_fu_431_p2 = ap_const_lv1_0))) then 
            IN_I_TDATA_blk_n <= IN_I_TVALID_int_regslice;
        else 
            IN_I_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    IN_I_TREADY <= regslice_both_IN_I_V_data_V_U_ack_in;

    IN_I_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state4, icmp_ln878_fu_431_p2, IN_R_TVALID_int_regslice, IN_I_TVALID_int_regslice)
    begin
        if ((not((((ap_const_logic_0 = IN_I_TVALID_int_regslice) and (icmp_ln878_fu_431_p2 = ap_const_lv1_0)) or ((ap_const_logic_0 = IN_R_TVALID_int_regslice) and (icmp_ln878_fu_431_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln878_fu_431_p2 = ap_const_lv1_0))) then 
            IN_I_TREADY_int_regslice <= ap_const_logic_1;
        else 
            IN_I_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    IN_R_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state4, icmp_ln878_fu_431_p2, IN_R_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln878_fu_431_p2 = ap_const_lv1_0))) then 
            IN_R_TDATA_blk_n <= IN_R_TVALID_int_regslice;
        else 
            IN_R_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    IN_R_TREADY <= regslice_both_IN_R_V_data_V_U_ack_in;

    IN_R_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state4, icmp_ln878_fu_431_p2, IN_R_TVALID_int_regslice, IN_I_TVALID_int_regslice)
    begin
        if ((not((((ap_const_logic_0 = IN_I_TVALID_int_regslice) and (icmp_ln878_fu_431_p2 = ap_const_lv1_0)) or ((ap_const_logic_0 = IN_R_TVALID_int_regslice) and (icmp_ln878_fu_431_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln878_fu_431_p2 = ap_const_lv1_0))) then 
            IN_R_TREADY_int_regslice <= ap_const_logic_1;
        else 
            IN_R_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    IN_imag_V_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, grp_dataflow_parent_loop_proc_fu_337_IN_imag_V_address0, grp_write_buffer_fft_fu_374_IN_imag_V_address0, ap_CS_fsm_state6, zext_ln878_fu_437_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            IN_imag_V_address0 <= zext_ln878_fu_437_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            IN_imag_V_address0 <= grp_write_buffer_fft_fu_374_IN_imag_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            IN_imag_V_address0 <= grp_dataflow_parent_loop_proc_fu_337_IN_imag_V_address0;
        else 
            IN_imag_V_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    IN_imag_V_ce0_assign_proc : process(ap_CS_fsm_state4, icmp_ln878_fu_431_p2, ap_CS_fsm_state8, grp_dataflow_parent_loop_proc_fu_337_IN_imag_V_ce0, grp_write_buffer_fft_fu_374_IN_imag_V_ce0, ap_CS_fsm_state6, IN_R_TVALID_int_regslice, IN_I_TVALID_int_regslice)
    begin
        if ((not((((ap_const_logic_0 = IN_I_TVALID_int_regslice) and (icmp_ln878_fu_431_p2 = ap_const_lv1_0)) or ((ap_const_logic_0 = IN_R_TVALID_int_regslice) and (icmp_ln878_fu_431_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            IN_imag_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            IN_imag_V_ce0 <= grp_write_buffer_fft_fu_374_IN_imag_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            IN_imag_V_ce0 <= grp_dataflow_parent_loop_proc_fu_337_IN_imag_V_ce0;
        else 
            IN_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    IN_imag_V_ce1_assign_proc : process(grp_dataflow_parent_loop_proc_fu_337_IN_imag_V_ce1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            IN_imag_V_ce1 <= grp_dataflow_parent_loop_proc_fu_337_IN_imag_V_ce1;
        else 
            IN_imag_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    IN_imag_V_d0 <= (IN_I_TDATA_int_regslice & ap_const_lv7_0);

    IN_imag_V_we0_assign_proc : process(ap_CS_fsm_state4, icmp_ln878_fu_431_p2, IN_R_TVALID_int_regslice, IN_I_TVALID_int_regslice)
    begin
        if ((not((((ap_const_logic_0 = IN_I_TVALID_int_regslice) and (icmp_ln878_fu_431_p2 = ap_const_lv1_0)) or ((ap_const_logic_0 = IN_R_TVALID_int_regslice) and (icmp_ln878_fu_431_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln878_fu_431_p2 = ap_const_lv1_0))) then 
            IN_imag_V_we0 <= ap_const_logic_1;
        else 
            IN_imag_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    IN_real_V_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, grp_dataflow_parent_loop_proc_fu_337_IN_real_V_address0, grp_write_buffer_fft_fu_374_IN_real_V_address0, ap_CS_fsm_state6, zext_ln878_fu_437_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            IN_real_V_address0 <= zext_ln878_fu_437_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            IN_real_V_address0 <= grp_write_buffer_fft_fu_374_IN_real_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            IN_real_V_address0 <= grp_dataflow_parent_loop_proc_fu_337_IN_real_V_address0;
        else 
            IN_real_V_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    IN_real_V_ce0_assign_proc : process(ap_CS_fsm_state4, icmp_ln878_fu_431_p2, ap_CS_fsm_state8, grp_dataflow_parent_loop_proc_fu_337_IN_real_V_ce0, grp_write_buffer_fft_fu_374_IN_real_V_ce0, ap_CS_fsm_state6, IN_R_TVALID_int_regslice, IN_I_TVALID_int_regslice)
    begin
        if ((not((((ap_const_logic_0 = IN_I_TVALID_int_regslice) and (icmp_ln878_fu_431_p2 = ap_const_lv1_0)) or ((ap_const_logic_0 = IN_R_TVALID_int_regslice) and (icmp_ln878_fu_431_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            IN_real_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            IN_real_V_ce0 <= grp_write_buffer_fft_fu_374_IN_real_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            IN_real_V_ce0 <= grp_dataflow_parent_loop_proc_fu_337_IN_real_V_ce0;
        else 
            IN_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    IN_real_V_ce1_assign_proc : process(grp_dataflow_parent_loop_proc_fu_337_IN_real_V_ce1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            IN_real_V_ce1 <= grp_dataflow_parent_loop_proc_fu_337_IN_real_V_ce1;
        else 
            IN_real_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    IN_real_V_d0 <= (IN_R_TDATA_int_regslice & ap_const_lv7_0);

    IN_real_V_we0_assign_proc : process(ap_CS_fsm_state4, icmp_ln878_fu_431_p2, IN_R_TVALID_int_regslice, IN_I_TVALID_int_regslice)
    begin
        if ((not((((ap_const_logic_0 = IN_I_TVALID_int_regslice) and (icmp_ln878_fu_431_p2 = ap_const_lv1_0)) or ((ap_const_logic_0 = IN_R_TVALID_int_regslice) and (icmp_ln878_fu_431_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln878_fu_431_p2 = ap_const_lv1_0))) then 
            IN_real_V_we0 <= ap_const_logic_1;
        else 
            IN_real_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_FFT_TVALID <= regslice_both_OUT_FFT_V_data_V_U_vld_out;

    OUT_PEAK_INDEX_ap_vld_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_PEAK_INDEX_ap_vld <= ap_const_logic_1;
        else 
            OUT_PEAK_INDEX_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    OUT_PSS_ID_ap_vld_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_PSS_ID_ap_vld <= ap_const_logic_1;
        else 
            OUT_PSS_ID_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln203_fu_528_p2 <= std_logic_vector(unsigned(mul_ln203_reg_594) + unsigned(zext_ln203_2_fu_524_p1));
    add_ln691_1_fu_512_p2 <= std_logic_vector(unsigned(i_V_1_reg_326) + unsigned(ap_const_lv17_1));
    add_ln691_fu_425_p2 <= std_logic_vector(unsigned(i_V_reg_315) + unsigned(ap_const_lv17_1));
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state16 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(ap_enable_reg_pp2_iter2, ap_block_state11_io)
    begin
                ap_block_pp2_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state11_io) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(ap_enable_reg_pp2_iter2, ap_block_state11_io)
    begin
                ap_block_pp2_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state11_io) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1));
    end process;

        ap_block_state10_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_io_assign_proc : process(icmp_ln878_1_reg_609_pp2_iter1_reg, gmem_WREADY)
    begin
                ap_block_state11_io <= ((gmem_WREADY = ap_const_logic_0) and (icmp_ln878_1_reg_609_pp2_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state11_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state16_assign_proc : process(gmem_BVALID, regslice_both_OUT_FFT_V_data_V_U_apdone_blk, regslice_both_pss_id_V_data_V_U_apdone_blk)
    begin
                ap_block_state16 <= ((regslice_both_pss_id_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_OUT_FFT_V_data_V_U_apdone_blk = ap_const_logic_1) or (gmem_BVALID = ap_const_logic_0));
    end process;


    ap_block_state4_assign_proc : process(icmp_ln878_fu_431_p2, IN_R_TVALID_int_regslice, IN_I_TVALID_int_regslice)
    begin
                ap_block_state4 <= (((ap_const_logic_0 = IN_I_TVALID_int_regslice) and (icmp_ln878_fu_431_p2 = ap_const_lv1_0)) or ((ap_const_logic_0 = IN_R_TVALID_int_regslice) and (icmp_ln878_fu_431_p2 = ap_const_lv1_0)));
    end process;


    ap_block_state6_on_subcall_done_assign_proc : process(ap_sync_grp_dataflow_parent_loop_proc_fu_337_ap_ready, ap_sync_grp_dataflow_parent_loop_proc_fu_337_ap_done)
    begin
                ap_block_state6_on_subcall_done <= ((ap_sync_grp_dataflow_parent_loop_proc_fu_337_ap_ready and ap_sync_grp_dataflow_parent_loop_proc_fu_337_ap_done) = ap_const_logic_0);
    end process;

        ap_block_state9_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp2_exit_iter0_state9_assign_proc : process(icmp_ln878_1_fu_518_p2)
    begin
        if ((icmp_ln878_1_fu_518_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state16, gmem_BVALID, regslice_both_OUT_FFT_V_data_V_U_apdone_blk, regslice_both_pss_id_V_data_V_U_apdone_blk)
    begin
        if ((not(((regslice_both_pss_id_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_OUT_FFT_V_data_V_U_apdone_blk = ap_const_logic_1) or (gmem_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16, gmem_BVALID, regslice_both_OUT_FFT_V_data_V_U_apdone_blk, regslice_both_pss_id_V_data_V_U_apdone_blk)
    begin
        if ((not(((regslice_both_pss_id_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_OUT_FFT_V_data_V_U_apdone_blk = ap_const_logic_1) or (gmem_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_grp_dataflow_parent_loop_proc_fu_337_ap_done <= (grp_dataflow_parent_loop_proc_fu_337_ap_done or ap_sync_reg_grp_dataflow_parent_loop_proc_fu_337_ap_done);
    ap_sync_grp_dataflow_parent_loop_proc_fu_337_ap_ready <= (grp_dataflow_parent_loop_proc_fu_337_ap_ready or ap_sync_reg_grp_dataflow_parent_loop_proc_fu_337_ap_ready);
    empty_91_fu_408_p2 <= std_logic_vector(unsigned(empty_reg_304) + unsigned(ap_const_lv19_1));
    exitcond894_i_i_fu_414_p2 <= "1" when (empty_reg_304 = ap_const_lv19_46500) else "0";

    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state5, gmem_AWREADY)
    begin
        if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state16, gmem_BVALID, regslice_both_OUT_FFT_V_data_V_U_apdone_blk, regslice_both_pss_id_V_data_V_U_apdone_blk)
    begin
        if ((not(((regslice_both_pss_id_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_OUT_FFT_V_data_V_U_apdone_blk = ap_const_logic_1) or (gmem_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    gmem_WDATA <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pss_rslt_temp_load_reg_618),32));

    gmem_WVALID_assign_proc : process(ap_enable_reg_pp2_iter2, icmp_ln878_1_reg_609_pp2_iter1_reg, ap_block_pp2_stage0_11001)
    begin
        if (((icmp_ln878_1_reg_609_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0, icmp_ln878_1_reg_609_pp2_iter1_reg)
    begin
        if (((icmp_ln878_1_reg_609_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_dataflow_parent_loop_proc_fu_337_ap_continue_assign_proc : process(ap_CS_fsm_state6, ap_block_state6_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done))) then 
            grp_dataflow_parent_loop_proc_fu_337_ap_continue <= ap_const_logic_1;
        else 
            grp_dataflow_parent_loop_proc_fu_337_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_dataflow_parent_loop_proc_fu_337_ap_start <= grp_dataflow_parent_loop_proc_fu_337_ap_start_reg;
    grp_write_buffer_fft_fu_374_OUT_FFT_TREADY <= (ap_CS_fsm_state8 and OUT_FFT_TREADY_int_regslice);
    grp_write_buffer_fft_fu_374_ap_start <= grp_write_buffer_fft_fu_374_ap_start_reg;
    grp_write_buffer_fft_fu_374_pss_id_TREADY <= (pss_id_TREADY_int_regslice and ap_CS_fsm_state8);
    icmp_ln878_1_fu_518_p2 <= "1" when (i_V_1_reg_326 = ap_const_lv17_17700) else "0";
    icmp_ln878_fu_431_p2 <= "1" when (i_V_reg_315 = ap_const_lv17_17700) else "0";
    mul_ln203_fu_503_p0 <= mul_ln203_fu_503_p00(2 - 1 downto 0);
    mul_ln203_fu_503_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pss_id_temp_fu_180),19));
    mul_ln203_fu_503_p1 <= ap_const_lv19_17700(18 - 1 downto 0);
    p_cast_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_304),64));
    pss_id_TVALID <= regslice_both_pss_id_V_data_V_U_vld_out;

    pss_rslt_temp_address0_assign_proc : process(ap_block_pp2_stage0, ap_CS_fsm_state2, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, grp_dataflow_parent_loop_proc_fu_337_pss_rslt_temp_address0, ap_CS_fsm_state6, p_cast_fu_420_p1, zext_ln203_3_fu_533_p1)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            pss_rslt_temp_address0 <= zext_ln203_3_fu_533_p1(19 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pss_rslt_temp_address0 <= p_cast_fu_420_p1(19 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pss_rslt_temp_address0 <= grp_dataflow_parent_loop_proc_fu_337_pss_rslt_temp_address0;
        else 
            pss_rslt_temp_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    pss_rslt_temp_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, grp_dataflow_parent_loop_proc_fu_337_pss_rslt_temp_ce0, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            pss_rslt_temp_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pss_rslt_temp_ce0 <= grp_dataflow_parent_loop_proc_fu_337_pss_rslt_temp_ce0;
        else 
            pss_rslt_temp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pss_rslt_temp_ce1_assign_proc : process(grp_dataflow_parent_loop_proc_fu_337_pss_rslt_temp_ce1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pss_rslt_temp_ce1 <= grp_dataflow_parent_loop_proc_fu_337_pss_rslt_temp_ce1;
        else 
            pss_rslt_temp_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    pss_rslt_temp_d0_assign_proc : process(ap_CS_fsm_state2, grp_dataflow_parent_loop_proc_fu_337_pss_rslt_temp_d0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pss_rslt_temp_d0 <= ap_const_lv12_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pss_rslt_temp_d0 <= grp_dataflow_parent_loop_proc_fu_337_pss_rslt_temp_d0;
        else 
            pss_rslt_temp_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    pss_rslt_temp_we0_assign_proc : process(ap_CS_fsm_state2, grp_dataflow_parent_loop_proc_fu_337_pss_rslt_temp_we0, exitcond894_i_i_fu_414_p2, ap_CS_fsm_state6)
    begin
        if (((exitcond894_i_i_fu_414_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            pss_rslt_temp_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pss_rslt_temp_we0 <= grp_dataflow_parent_loop_proc_fu_337_pss_rslt_temp_we0;
        else 
            pss_rslt_temp_we0 <= ap_const_logic_0;
        end if; 
    end process;


    pss_rslt_temp_we1_assign_proc : process(grp_dataflow_parent_loop_proc_fu_337_pss_rslt_temp_we1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pss_rslt_temp_we1 <= grp_dataflow_parent_loop_proc_fu_337_pss_rslt_temp_we1;
        else 
            pss_rslt_temp_we1 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln203_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_469_p4),64));

    trunc_ln_fu_469_p4 <= OUT_RSLT_read_reg_542(63 downto 2);
    zext_ln203_2_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_V_1_reg_326),19));
    zext_ln203_3_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_fu_528_p2),64));
    zext_ln267_1_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pss_id_temp_fu_180),32));
    zext_ln267_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(peak_id_temp_fu_184),32));
    zext_ln878_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_V_reg_315),64));
end behav;
